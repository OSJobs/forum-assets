/*global I18n:true */

// Instantiate the object
var I18n = I18n || {};

// Set default locale to english
I18n.defaultLocale = "en";

// Set default pluralization rule
I18n.pluralizationRules = {
  en: function(n) {
    return n === 0 ? ["zero", "none", "other"] : n === 1 ? "one" : "other";
  }
};

// Set current locale to null
I18n.locale = null;
I18n.fallbackLocale = null;

// Set the placeholder format. Accepts `{{placeholder}}` and `%{placeholder}`.
I18n.PLACEHOLDER = /(?:\{\{|%\{)(.*?)(?:\}\}?)/gm;

I18n.SEPARATOR = ".";

I18n.noFallbacks = false;

I18n.isValidNode = function(obj, node, undefined) {
  return obj[node] !== null && obj[node] !== undefined;
};

I18n.lookup = function(scope, options) {
  options = options || {};

  var translations = this.prepareOptions(I18n.translations),
    locale = options.locale || I18n.currentLocale(),
    messages = translations[locale] || {},
    currentScope;

  options = this.prepareOptions(options);

  if (typeof scope === "object") {
    scope = scope.join(this.SEPARATOR);
  }

  if (options.scope) {
    scope = options.scope.toString() + this.SEPARATOR + scope;
  }

  var originalScope = scope;
  scope = scope.split(this.SEPARATOR);

  if (scope.length > 0 && scope[0] !== "js") {
    scope.unshift("js");
  }

  while (messages && scope.length > 0) {
    currentScope = scope.shift();
    messages = messages[currentScope];
  }

  if (messages === undefined && this.extras && this.extras[locale]) {
    messages = this.extras[locale];
    scope = originalScope.split(this.SEPARATOR);

    while (messages && scope.length > 0) {
      currentScope = scope.shift();
      messages = messages[currentScope];
    }
  }

  if (messages === undefined) {
    messages = options.defaultValue;
  }

  return messages;
};

// Merge serveral hash options, checking if value is set before
// overwriting any value. The precedence is from left to right.
//
//   I18n.prepareOptions({name: "John Doe"}, {name: "Mary Doe", role: "user"});
//   #=> {name: "John Doe", role: "user"}
//
I18n.prepareOptions = function() {
  var options = {},
    opts,
    count = arguments.length;

  for (var i = 0; i < count; i++) {
    opts = arguments[i];

    if (!opts) {
      continue;
    }

    for (var key in opts) {
      if (!this.isValidNode(options, key)) {
        options[key] = opts[key];
      }
    }
  }

  return options;
};

I18n.interpolate = function(message, options) {
  options = this.prepareOptions(options);

  var matches = message.match(this.PLACEHOLDER),
    placeholder,
    value,
    name;

  if (!matches) {
    return message;
  }

  for (var i = 0; (placeholder = matches[i]); i++) {
    name = placeholder.replace(this.PLACEHOLDER, "$1");

    if (typeof options[name] === "string") {
      // The dollar sign (`$`) is a special replace pattern, and `$&` inserts
      // the matched string. Thus dollars signs need to be escaped with the
      // special pattern `$$`, which inserts a single `$`.
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_string_as_a_parameter
      value = options[name].replace(/\$/g, "$$$$");
    } else {
      value = options[name];
    }

    if (!this.isValidNode(options, name)) {
      value = "[missing " + placeholder + " value]";
    }

    var regex = new RegExp(
      placeholder.replace(/\{/gm, "\\{").replace(/\}/gm, "\\}")
    );
    message = message.replace(regex, value);
  }

  return message;
};

I18n.translate = function(scope, options) {
  options = this.prepareOptions(options);
  options.needsPluralization = typeof options.count === "number";
  options.ignoreMissing = !this.noFallbacks;

  var translation = this.findTranslation(scope, options);

  if (!this.noFallbacks) {
    if (!translation && this.fallbackLocale) {
      options.locale = this.fallbackLocale;
      translation = this.findTranslation(scope, options);
    }

    options.ignoreMissing = false;

    if (!translation && this.currentLocale() !== this.defaultLocale) {
      options.locale = this.defaultLocale;
      translation = this.findTranslation(scope, options);
    }

    if (!translation && this.currentLocale() !== "en") {
      options.locale = "en";
      translation = this.findTranslation(scope, options);
    }
  }

  try {
    return this.interpolate(translation, options);
  } catch (error) {
    return this.missingTranslation(scope);
  }
};

I18n.findTranslation = function(scope, options) {
  var translation = this.lookup(scope, options);

  if (translation && options.needsPluralization) {
    translation = this.pluralize(translation, scope, options);
  }

  return translation;
};

I18n.toNumber = function(number, options) {
  options = this.prepareOptions(options, this.lookup("number.format"), {
    precision: 3,
    separator: this.SEPARATOR,
    delimiter: ",",
    strip_insignificant_zeros: false
  });

  var negative = number < 0,
    string = Math.abs(number)
      .toFixed(options.precision)
      .toString(),
    parts = string.split(this.SEPARATOR),
    precision,
    buffer = [],
    formattedNumber;

  number = parts[0];
  precision = parts[1];

  while (number.length > 0) {
    buffer.unshift(number.substr(Math.max(0, number.length - 3), 3));
    number = number.substr(0, number.length - 3);
  }

  formattedNumber = buffer.join(options.delimiter);

  if (options.precision > 0) {
    formattedNumber += options.separator + parts[1];
  }

  if (negative) {
    formattedNumber = "-" + formattedNumber;
  }

  if (options.strip_insignificant_zeros) {
    var regex = {
      separator: new RegExp(options.separator.replace(/\./, "\\.") + "$"),
      zeros: /0+$/
    };

    formattedNumber = formattedNumber
      .replace(regex.zeros, "")
      .replace(regex.separator, "");
  }

  return formattedNumber;
};

I18n.toHumanSize = function(number, options) {
  var kb = 1024,
    size = number,
    iterations = 0,
    unit,
    precision;

  while (size >= kb && iterations < 4) {
    size = size / kb;
    iterations += 1;
  }

  if (iterations === 0) {
    unit = this.t("number.human.storage_units.units.byte", { count: size });
    precision = 0;
  } else {
    unit = this.t(
      "number.human.storage_units.units." +
        [null, "kb", "mb", "gb", "tb"][iterations]
    );
    precision = size - Math.floor(size) === 0 ? 0 : 1;
  }

  options = this.prepareOptions(options, {
    precision: precision,
    format: "%n%u",
    delimiter: ""
  });

  number = this.toNumber(size, options);
  number = options.format.replace("%u", unit).replace("%n", number);

  return number;
};

I18n.pluralizer = function(locale) {
  var pluralizer = this.pluralizationRules[locale];
  if (pluralizer !== undefined) return pluralizer;
  return this.pluralizationRules["en"];
};

I18n.findAndTranslateValidNode = function(keys, translation) {
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (this.isValidNode(translation, key)) return translation[key];
  }
  return null;
};

I18n.pluralize = function(translation, scope, options) {
  if (typeof translation !== "object") return translation;

  options = this.prepareOptions(options);
  var count = options.count.toString();

  var pluralizer = this.pluralizer(options.locale || this.currentLocale());
  var key = pluralizer(Math.abs(count));
  var keys = typeof key === "object" && key instanceof Array ? key : [key];

  var message = this.findAndTranslateValidNode(keys, translation);

  if (message !== null || options.ignoreMissing) {
    return message;
  }

  return this.missingTranslation(scope, keys[0]);
};

I18n.missingTranslation = function(scope, key) {
  var message = "[" + this.currentLocale() + this.SEPARATOR + scope;
  if (key) {
    message += this.SEPARATOR + key;
  }
  return message + "]";
};

I18n.currentLocale = function() {
  return I18n.locale || I18n.defaultLocale;
};

I18n.enableVerboseLocalization = function() {
  var counter = 0;
  var keys = {};
  var t = I18n.t;

  I18n.noFallbacks = true;

  I18n.t = I18n.translate = function(scope, value) {
    var current = keys[scope];
    if (!current) {
      current = keys[scope] = ++counter;
      var message = "Translation #" + current + ": " + scope;
      if (!_.isEmpty(value)) {
        message += ", parameters: " + JSON.stringify(value);
      }
      // eslint-disable-next-line no-console
      console.info(message);
    }
    return t.apply(I18n, [scope, value]) + " (#" + current + ")";
  };
};

I18n.enableVerboseLocalizationSession = function() {
  sessionStorage.setItem("verbose_localization", "true");
  I18n.enableVerboseLocalization();

  return "Verbose localization is enabled. Close the browser tab to turn it off. Reload the page to see the translation keys.";
};

// shortcuts
I18n.t = I18n.translate;


MessageFormat = {locale: {}};
I18n._compiledMFs = {"topic.read_more_MF" : function(d){
var r = "";
r += "Å iuo metu ";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_1 = "UNREAD";
var k_1=d[lastkey_1];
var off_0 = 0;
var pf_0 = { 
"0" : function(d){
var r = "";
return r;
},
"one" : function(d){
var r = "";
r += "yra <a href='";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
r += d["basePath"];
r += "/unread'>1 neperskaityta</a> ";
return r;
},
"other" : function(d){
var r = "";
r += "yra <a href='";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
r += d["basePath"];
r += "/unread'>" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + " neperskaitytos</a> ";
return r;
}
};
if ( pf_0[ k_1 + "" ] ) {
r += pf_0[ k_1 + "" ]( d ); 
}
else {
r += (pf_0[ MessageFormat.locale["lt"]( k_1 - off_0 ) ] || pf_0[ "other" ] )( d );
}
r += " ";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_1 = "NEW";
var k_1=d[lastkey_1];
var off_0 = 0;
var pf_0 = { 
"0" : function(d){
var r = "";
return r;
},
"one" : function(d){
var r = "";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_2 = "BOTH";
var k_2=d[lastkey_2];
var off_1 = 0;
var pf_1 = { 
"true" : function(d){
var r = "";
r += "and ";
return r;
},
"false" : function(d){
var r = "";
r += "is ";
return r;
},
"other" : function(d){
var r = "";
return r;
}
};
r += (pf_1[ k_2 ] || pf_1[ "other" ])( d );
r += " <a href='";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
r += d["basePath"];
r += "/new'>1 nauja</a> tema";
return r;
},
"other" : function(d){
var r = "";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_2 = "BOTH";
var k_2=d[lastkey_2];
var off_1 = 0;
var pf_1 = { 
"true" : function(d){
var r = "";
r += "and ";
return r;
},
"false" : function(d){
var r = "";
r += "are ";
return r;
},
"other" : function(d){
var r = "";
return r;
}
};
r += (pf_1[ k_2 ] || pf_1[ "other" ])( d );
r += " <a href='";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
r += d["basePath"];
r += "/new'>" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + " naujos</a> temos";
return r;
}
};
if ( pf_0[ k_1 + "" ] ) {
r += pf_0[ k_1 + "" ]( d ); 
}
else {
r += (pf_0[ MessageFormat.locale["lt"]( k_1 - off_0 ) ] || pf_0[ "other" ] )( d );
}
r += " remaining, or ";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_1 = "CATEGORY";
var k_1=d[lastkey_1];
var off_0 = 0;
var pf_0 = { 
"true" : function(d){
var r = "";
r += "browse other topics in ";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
r += d["catLink"];
return r;
},
"false" : function(d){
var r = "";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
r += d["latestLink"];
return r;
},
"other" : function(d){
var r = "";
return r;
}
};
r += (pf_0[ k_1 ] || pf_0[ "other" ])( d );
return r;
}, "posts_likes_MF" : function(d){
var r = "";
r += "Å i tema turi ";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_1 = "count";
var k_1=d[lastkey_1];
var off_0 = 0;
var pf_0 = { 
"one" : function(d){
var r = "";
r += "1 reply";
return r;
},
"other" : function(d){
var r = "";
r += "" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + " replies";
return r;
}
};
if ( pf_0[ k_1 + "" ] ) {
r += pf_0[ k_1 + "" ]( d ); 
}
else {
r += (pf_0[ MessageFormat.locale["lt"]( k_1 - off_0 ) ] || pf_0[ "other" ] )( d );
}
r += " ";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_1 = "ratio";
var k_1=d[lastkey_1];
var off_0 = 0;
var pf_0 = { 
"low" : function(d){
var r = "";
r += "with a high like to post ratio";
return r;
},
"med" : function(d){
var r = "";
r += "with a very high like to post ratio";
return r;
},
"high" : function(d){
var r = "";
r += "with an extremely high like to post ratio";
return r;
},
"other" : function(d){
var r = "";
return r;
}
};
r += (pf_0[ k_1 ] || pf_0[ "other" ])( d );
r += "\n";
return r;
}, "too_few_topics_and_posts_notice_MF" : function(d){
var r = "";
r += "è®©æä»¬<a href=\"https://blog.discourse.org/2014/08/building-a-discourse-community/\">å¼å§è®¨è®ºå§ï¼</a>ç°";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_1 = "currentTopics";
var k_1=d[lastkey_1];
var off_0 = 0;
var pf_0 = { 
"one" : function(d){
var r = "";
r += "ä»æ<strong>" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + "</strong>ä¸ªä¸»é¢";
return r;
},
"other" : function(d){
var r = "";
r += "å±æ <strong>" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + "</strong>ä¸ªä¸»é¢";
return r;
}
};
if ( pf_0[ k_1 + "" ] ) {
r += pf_0[ k_1 + "" ]( d ); 
}
else {
r += (pf_0[ MessageFormat.locale["lt"]( k_1 - off_0 ) ] || pf_0[ "other" ] )( d );
}
r += "å";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_1 = "currentPosts";
var k_1=d[lastkey_1];
var off_0 = 0;
var pf_0 = { 
"one" : function(d){
var r = "";
r += "<strong>" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + "</strong>ä¸ªå¸å­";
return r;
},
"other" : function(d){
var r = "";
r += "<strong>" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + "</strong>ä¸ªå¸å­";
return r;
}
};
if ( pf_0[ k_1 + "" ] ) {
r += pf_0[ k_1 + "" ]( d ); 
}
else {
r += (pf_0[ MessageFormat.locale["lt"]( k_1 - off_0 ) ] || pf_0[ "other" ] )( d );
}
r += "ãè®¿å®¢éè¦æ´å¤çéè¯»ååå¤ââæä»¬å»ºè®®è³å° ";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_1 = "requiredTopics";
var k_1=d[lastkey_1];
var off_0 = 0;
var pf_0 = { 
"one" : function(d){
var r = "";
r += "<strong>" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + "</strong>ä¸ªä¸»é¢";
return r;
},
"other" : function(d){
var r = "";
r += "<strong>" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + "</strong>ä¸ªä¸»é¢";
return r;
}
};
if ( pf_0[ k_1 + "" ] ) {
r += pf_0[ k_1 + "" ]( d ); 
}
else {
r += (pf_0[ MessageFormat.locale["lt"]( k_1 - off_0 ) ] || pf_0[ "other" ] )( d );
}
r += "å";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_1 = "requiredPosts";
var k_1=d[lastkey_1];
var off_0 = 0;
var pf_0 = { 
"one" : function(d){
var r = "";
r += "<strong>" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + "</strong>ä¸ªå¸å­";
return r;
},
"other" : function(d){
var r = "";
r += "<strong>" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + "</strong>ä¸ªå¸å­";
return r;
}
};
if ( pf_0[ k_1 + "" ] ) {
r += pf_0[ k_1 + "" ]( d ); 
}
else {
r += (pf_0[ MessageFormat.locale["lt"]( k_1 - off_0 ) ] || pf_0[ "other" ] )( d );
}
r += "ãæ­¤æ¶æ¯ä»ç®¡çäººåå¯è§ã";
return r;
}, "too_few_topics_notice_MF" : function(d){
var r = "";
r += "è®©æä»¬<a href=\"https://blog.discourse.org/2014/08/building-a-discourse-community/\">å¼å§è®¨è®ºå§ï¼</a>ç°";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_1 = "currentTopics";
var k_1=d[lastkey_1];
var off_0 = 0;
var pf_0 = { 
"one" : function(d){
var r = "";
r += "ä»æ<strong>" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + "</strong>ä¸ªä¸»é¢";
return r;
},
"other" : function(d){
var r = "";
r += "å±æ <strong>" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + "</strong>ä¸ªä¸»é¢";
return r;
}
};
if ( pf_0[ k_1 + "" ] ) {
r += pf_0[ k_1 + "" ]( d ); 
}
else {
r += (pf_0[ MessageFormat.locale["lt"]( k_1 - off_0 ) ] || pf_0[ "other" ] )( d );
}
r += "ãè®¿å®¢éè¦æ´å¤çéè¯»ååå¤ââæä»¬å»ºè®®è³å°";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_1 = "requiredTopics";
var k_1=d[lastkey_1];
var off_0 = 0;
var pf_0 = { 
"one" : function(d){
var r = "";
r += "<strong>" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + "</strong>ä¸ªä¸»é¢";
return r;
},
"other" : function(d){
var r = "";
r += "<strong>" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + "</strong>ä¸ªä¸»é¢";
return r;
}
};
if ( pf_0[ k_1 + "" ] ) {
r += pf_0[ k_1 + "" ]( d ); 
}
else {
r += (pf_0[ MessageFormat.locale["lt"]( k_1 - off_0 ) ] || pf_0[ "other" ] )( d );
}
r += "ãæ­¤æ¶æ¯ä»ç®¡çäººåå¯è§ã";
return r;
}, "too_few_posts_notice_MF" : function(d){
var r = "";
r += "è®©æä»¬<a href=\"https://blog.discourse.org/2014/08/building-a-discourse-community/\">å¼å§è®¨è®ºå§ï¼</a>ç° ";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_1 = "currentPosts";
var k_1=d[lastkey_1];
var off_0 = 0;
var pf_0 = { 
"one" : function(d){
var r = "";
r += "ä»æ<strong>" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + "</strong>ä¸ªå¸å­";
return r;
},
"other" : function(d){
var r = "";
r += "å±æ<strong>" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + "</strong>ä¸ªå¸å­";
return r;
}
};
if ( pf_0[ k_1 + "" ] ) {
r += pf_0[ k_1 + "" ]( d ); 
}
else {
r += (pf_0[ MessageFormat.locale["lt"]( k_1 - off_0 ) ] || pf_0[ "other" ] )( d );
}
r += "ãè®¿å®¢éè¦æ´å¤çéè¯»ååå¤ââæä»¬å»ºè®®è³å°";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_1 = "requiredPosts";
var k_1=d[lastkey_1];
var off_0 = 0;
var pf_0 = { 
"one" : function(d){
var r = "";
r += "<strong>" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + "</strong>ä¸ªå¸å­";
return r;
},
"other" : function(d){
var r = "";
r += "<strong>" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + "</strong>ä¸ªå¸å­";
return r;
}
};
if ( pf_0[ k_1 + "" ] ) {
r += pf_0[ k_1 + "" ]( d ); 
}
else {
r += (pf_0[ MessageFormat.locale["lt"]( k_1 - off_0 ) ] || pf_0[ "other" ] )( d );
}
r += "ãæ­¤æ¶æ¯ä»ç®¡çäººåå¯è§ã";
return r;
}, "logs_error_rate_notice.reached_hour_MF" : function(d){
var r = "";
r += "<b>";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
r += d["relativeAge"];
r += "</b> â <a href='";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
r += d["url"];
r += "' target='_blank'>";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_1 = "rate";
var k_1=d[lastkey_1];
var off_0 = 0;
var pf_0 = { 
"one" : function(d){
var r = "";
r += "" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + " error/hour";
return r;
},
"other" : function(d){
var r = "";
r += "" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + " errors/hour";
return r;
}
};
if ( pf_0[ k_1 + "" ] ) {
r += pf_0[ k_1 + "" ]( d ); 
}
else {
r += (pf_0[ MessageFormat.locale["lt"]( k_1 - off_0 ) ] || pf_0[ "other" ] )( d );
}
r += "</a>è¾¾å°äºç«ç¹è®¾ç½®ä¸­çéå¶";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_1 = "limit";
var k_1=d[lastkey_1];
var off_0 = 0;
var pf_0 = { 
"one" : function(d){
var r = "";
r += "" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + " error/hour";
return r;
},
"other" : function(d){
var r = "";
r += "" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + " errors/hour";
return r;
}
};
if ( pf_0[ k_1 + "" ] ) {
r += pf_0[ k_1 + "" ]( d ); 
}
else {
r += (pf_0[ MessageFormat.locale["lt"]( k_1 - off_0 ) ] || pf_0[ "other" ] )( d );
}
r += "ã";
return r;
}, "logs_error_rate_notice.reached_minute_MF" : function(d){
var r = "";
r += "<b>";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
r += d["relativeAge"];
r += "</b>1 â <a href='";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
r += d["url"];
r += "' target='_blank'>";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_1 = "rate";
var k_1=d[lastkey_1];
var off_0 = 0;
var pf_0 = { 
"one" : function(d){
var r = "";
r += "" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + " error/minute";
return r;
},
"other" : function(d){
var r = "";
r += "" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + " errors/minute";
return r;
}
};
if ( pf_0[ k_1 + "" ] ) {
r += pf_0[ k_1 + "" ]( d ); 
}
else {
r += (pf_0[ MessageFormat.locale["lt"]( k_1 - off_0 ) ] || pf_0[ "other" ] )( d );
}
r += "</a>å·²ç»è¾¾å°ç«ç¹è®¾ç½®éå¶ ";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_1 = "limit";
var k_1=d[lastkey_1];
var off_0 = 0;
var pf_0 = { 
"one" : function(d){
var r = "";
r += "" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + " error/minute";
return r;
},
"other" : function(d){
var r = "";
r += "" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + " errors/minute";
return r;
}
};
if ( pf_0[ k_1 + "" ] ) {
r += pf_0[ k_1 + "" ]( d ); 
}
else {
r += (pf_0[ MessageFormat.locale["lt"]( k_1 - off_0 ) ] || pf_0[ "other" ] )( d );
}
r += "ã";
return r;
}, "logs_error_rate_notice.exceeded_hour_MF" : function(d){
var r = "";
r += "<b>";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
r += d["relativeAge"];
r += "</b> â <a href='";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
r += d["url"];
r += "' target='_blank'>";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_1 = "rate";
var k_1=d[lastkey_1];
var off_0 = 0;
var pf_0 = { 
"one" : function(d){
var r = "";
r += "" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + " error/hour";
return r;
},
"other" : function(d){
var r = "";
r += "" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + " errors/hour";
return r;
}
};
if ( pf_0[ k_1 + "" ] ) {
r += pf_0[ k_1 + "" ]( d ); 
}
else {
r += (pf_0[ MessageFormat.locale["lt"]( k_1 - off_0 ) ] || pf_0[ "other" ] )( d );
}
r += "</a>è¶åºäºç«ç¹è®¾ç½®ä¸­çéå¶";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_1 = "limit";
var k_1=d[lastkey_1];
var off_0 = 0;
var pf_0 = { 
"one" : function(d){
var r = "";
r += "" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + " error/hour";
return r;
},
"other" : function(d){
var r = "";
r += "" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + " errors/hour";
return r;
}
};
if ( pf_0[ k_1 + "" ] ) {
r += pf_0[ k_1 + "" ]( d ); 
}
else {
r += (pf_0[ MessageFormat.locale["lt"]( k_1 - off_0 ) ] || pf_0[ "other" ] )( d );
}
r += "ã";
return r;
}, "logs_error_rate_notice.exceeded_minute_MF" : function(d){
var r = "";
r += "<b>";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
r += d["relativeAge"];
r += "</b>1 â <a href='";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
r += d["url"];
r += "' target='_blank'>";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_1 = "rate";
var k_1=d[lastkey_1];
var off_0 = 0;
var pf_0 = { 
"one" : function(d){
var r = "";
r += "" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + " error/minute";
return r;
},
"other" : function(d){
var r = "";
r += "" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + " errors/minute";
return r;
}
};
if ( pf_0[ k_1 + "" ] ) {
r += pf_0[ k_1 + "" ]( d ); 
}
else {
r += (pf_0[ MessageFormat.locale["lt"]( k_1 - off_0 ) ] || pf_0[ "other" ] )( d );
}
r += "</a>å·²ç»è¶åºç«ç¹è®¾ç½®éå¶ ";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_1 = "limit";
var k_1=d[lastkey_1];
var off_0 = 0;
var pf_0 = { 
"one" : function(d){
var r = "";
r += "" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + " error/minute";
return r;
},
"other" : function(d){
var r = "";
r += "" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + " errors/minute";
return r;
}
};
if ( pf_0[ k_1 + "" ] ) {
r += pf_0[ k_1 + "" ]( d ); 
}
else {
r += (pf_0[ MessageFormat.locale["lt"]( k_1 - off_0 ) ] || pf_0[ "other" ] )( d );
}
r += "ã";
return r;
}, "topic.bumped_at_title_MF" : function(){ return "Invalid Format: Uncaught SyntaxError: Expected [a-zA-Z$_] but \"%u9996\" found. at undefined:1376:10";}, "flagging.delete_confirm_MF" : function(d){
var r = "";
r += "ä½ å°å é¤è¯¥ç¨æ·ç";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_1 = "POSTS";
var k_1=d[lastkey_1];
var off_0 = 0;
var pf_0 = { 
"one" : function(d){
var r = "";
r += "<b>1</b>ä¸ªå¸å­";
return r;
},
"other" : function(d){
var r = "";
r += "<b>" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + "</b>ä¸ªå¸å­";
return r;
}
};
if ( pf_0[ k_1 + "" ] ) {
r += pf_0[ k_1 + "" ]( d ); 
}
else {
r += (pf_0[ MessageFormat.locale["lt"]( k_1 - off_0 ) ] || pf_0[ "other" ] )( d );
}
r += " and ";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_1 = "TOPICS";
var k_1=d[lastkey_1];
var off_0 = 0;
var pf_0 = { 
"one" : function(d){
var r = "";
r += "<b>1</b>ä¸ªä¸»é¢";
return r;
},
"other" : function(d){
var r = "";
r += "<b>" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + "</b>ä¸ªä¸»é¢";
return r;
}
};
if ( pf_0[ k_1 + "" ] ) {
r += pf_0[ k_1 + "" ]( d ); 
}
else {
r += (pf_0[ MessageFormat.locale["lt"]( k_1 - off_0 ) ] || pf_0[ "other" ] )( d );
}
r += "ãè¯¥è´¦æ·ï¼å¹¶é»æ­¢å¶IPå°å <b>%";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
r += d["ip_address"];
r += "</b> åæ¬¡æ³¨åï¼å¹¶å°å¶é®ä»¶å°å <b>%";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
r += d["email"];
r += "</b> å å¥é»ååãä½ ç¡®å®è¿ç¨æ·æ¯å¹¿åæ£å¸èåï¼";
return r;
}, "admin.user.delete_all_posts_confirm_MF" : function(d){
var r = "";
r += "ä½ å°è¦å é¤ ";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_1 = "POSTS";
var k_1=d[lastkey_1];
var off_0 = 0;
var pf_0 = { 
"one" : function(d){
var r = "";
r += "1 ä¸ªå¸å­";
return r;
},
"other" : function(d){
var r = "";
r += "" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + " ä¸ªå¸å­";
return r;
}
};
if ( pf_0[ k_1 + "" ] ) {
r += pf_0[ k_1 + "" ]( d ); 
}
else {
r += (pf_0[ MessageFormat.locale["lt"]( k_1 - off_0 ) ] || pf_0[ "other" ] )( d );
}
r += "å ";
if(!d){
throw new Error("MessageFormat: No data passed to function.");
}
var lastkey_1 = "TOPICS";
var k_1=d[lastkey_1];
var off_0 = 0;
var pf_0 = { 
"one" : function(d){
var r = "";
r += "1 ä¸ªä¸»é¢";
return r;
},
"other" : function(d){
var r = "";
r += "" + (function(){ var x = k_1 - off_0;
if( isNaN(x) ){
throw new Error("MessageFormat: `"+lastkey_1+"` isnt a number.");
}
return x;
})() + " ä¸ªä¸»é¢";
return r;
}
};
if ( pf_0[ k_1 + "" ] ) {
r += pf_0[ k_1 + "" ]( d ); 
}
else {
r += (pf_0[ MessageFormat.locale["lt"]( k_1 - off_0 ) ] || pf_0[ "other" ] )( d );
}
r += "ãç¡®å®åï¼";
return r;
}};
MessageFormat.locale.lt = function (n) {
  if ((n % 10) == 1 && ((n % 100) < 11 || (n % 100) > 19)) {
    return 'one';
  }
  if ((n % 10) >= 2 && (n % 10) <= 9 &&
      ((n % 100) < 11 || (n % 100) > 19) && n == Math.floor(n)) {
    return 'few';
  }
  return 'other';
};

(function() {

  I18n.messageFormat = function(key, options) {
    var fn = I18n._compiledMFs[key];
    if (fn) {
      try {
        return fn(options);
      } catch(err) {
        return err.message;
      }
    } else {
      return 'Missing Key: ' + key;
    }
    return I18n._compiledMFs[key](options);
  };

})();

I18n.translations = {"lt":{"js":{"number":{"format":{"separator":".","delimiter":","},"human":{"storage_units":{"format":"%n %u","units":{"byte":{"one":"Baitas","few":"Baitai","many":"Baitai","other":"Baitai"},"gb":"GB","kb":"KB","mb":"MB","tb":"TB"}}},"short":{"thousands":"{{number}}k","millions":"{{number}}M"}},"dates":{"time":"H:mm","time_with_zone":"H:mm (z)","timeline_date":"MMM YYYY","long_no_year_no_time":"MMMM D","full_no_year_no_time":"MMMM Do","long_with_year":"YYYY MMMM D H:mm","long_with_year_no_time":"YYYY MMMM D","full_with_year_no_time":"MMMM Do, YYYY","long_date_with_year":"YYYY MMMM D H:mm","long_date_without_year":"MMMM D H:mm","long_date_with_year_without_time":"YYYY MMMM D","long_date_without_year_with_linebreak":"MMMM D\u003cbr/\u003eH:mm","long_date_with_year_with_linebreak":"YYYY MMMM D\u003cbr/\u003eH:mm","wrap_ago":"prieÅ¡ %{date} ","tiny":{"half_a_minute":"\u003c 1 min.","less_than_x_seconds":{"one":"\u003c %{count} s.","few":"\u003c %{count} s.","many":"\u003c %{count} s.","other":"\u003c %{count} s."},"x_seconds":{"one":"%{count} s.","few":"%{count} s.","many":"%{count} s.","other":"%{count} s."},"less_than_x_minutes":{"one":"\u003c %{count}m","few":"\u003c%{count}m","many":"\u003c %{count}m","other":"\u003c%{count}m"},"x_minutes":{"one":"%{count} min.","few":"%{count} min.","many":"%{count} min.","other":"%{count} min."},"about_x_hours":{"one":"%{count} val.","few":"%{count} val.","many":"%{count} val.","other":"%{count} val."},"x_days":{"one":"%{count} d.","few":"%{count} d.","many":"%{count} d.","other":"%{count} d."},"x_months":{"one":"%{count} mÄn","few":"%{count} mÄn","many":"%{count} mÄn","other":"%{count} mÄn"},"about_x_years":{"one":"%{count} m.","few":"%{count} m.","many":"%{count} m.","other":"%{count} m."},"over_x_years":{"one":"\u003e %{count} m.","few":"\u003e %{count} m.","many":"\u003e %{count} m.","other":"\u003e %{count} m."},"almost_x_years":{"one":"%{count} m.","few":"%{count} m.","many":"%{count} m.","other":"%{count} m."},"date_month":"MMM D","date_year":"YYYY MMM"},"medium":{"x_minutes":{"one":"%{count} minutÄ","few":"%{count} minutÄs","many":"%{count} minuÄiÅ³","other":"%{count} minuÄiÅ³"},"x_hours":{"one":"%{count} valanda","few":"%{count} valandos","many":"%{count} valandÅ³","other":"%{count} valandÅ³"},"x_days":{"one":"%{count} diena","few":"%{count} dienos","many":"%{count} dienÅ³","other":"%{count} dienÅ³"},"date_year":"YYYY-MM-D"},"medium_with_ago":{"x_minutes":{"one":"prieÅ¡ %{count} minutÄ","few":"prieÅ¡ %{count} minutes","many":"prieÅ¡ %{count} minuÄiÅ³","other":"prieÅ¡ %{count} minuÄiÅ³"},"x_hours":{"one":"prieÅ¡ %{count} valandÄ","few":"prieÅ¡ %{count} valandas","many":"prieÅ¡ %{count} valandÅ³","other":"prieÅ¡ %{count} valandÅ³"},"x_days":{"one":"prieÅ¡ %{count} dienÄ","few":"prieÅ¡ %{count} dienas","many":"prieÅ¡ %{count} dienÅ³","other":"prieÅ¡ %{count} dienÅ³"}},"later":{"x_days":{"one":"po %{count} dienos","few":"po %{count} dienÅ³","many":"po %{count} dienÅ³","other":"po %{count} dienÅ³"},"x_months":{"one":"Po %{count} mÄnesio","few":"po %{count} mÄnesiÅ³","many":"po %{count} mÄnesiÅ³","other":"po %{count} mÄnesiÅ³"},"x_years":{"one":"Po %{count} metÅ³","few":"po %{count} metÅ³","many":"po %{count} metÅ³","other":"po %{count} metÅ³"}},"previous_month":"PraÄjusÄ¯ mÄnesÄ¯","next_month":"AteinantÄ¯ mÄnesÄ¯","placeholder":"data"},"share":{"topic_html":"Tema: \u003cspan class=\"topic-title\"\u003e%{topicTitle}\u003c/span\u003e","post":"Ä¯raÅ¡as #%{postNumber}","close":"uÅ¾daryti","twitter":"Dalintis nuoroda Twitter","facebook":"Dalintis nuoroda Facebook"},"action_codes":{"public_topic":"nustatÄ diskusijas vieÅ¡om %{when}","private_topic":"pakeisti temÄ Ä¯ asmeninÄ Å¾inutÄ 1%{when}","split_topic":"padalinti temÄ %{when}","invited_user":"%{who} pakvietÄ %{when}","invited_group":"pakvietÄ %{who} %{when}","user_left":"%{who} iÅ¡Äjo iÅ¡ Å¡io pokalbio %{when}","removed_user":"%{who} panaikino %{when}","removed_group":"paÅ¡alino %{who} %{when}","autobumped":"automatiÅ¡kai pakelti %{when}","autoclosed":{"enabled":"uÅ¾daryta %{when}","disabled":"atidaryta %{when}"},"closed":{"enabled":"uÅ¾daryta %{when}","disabled":"atidaryta %{when}"},"archived":{"enabled":"archivuota %{when}","disabled":"nearchivuota %{when}"},"pinned":{"enabled":"prisegta %{when}","disabled":"neprisegta %{when}"},"pinned_globally":{"enabled":"prisegta globaliai %{when}","disabled":"neprisegta %{when}"},"visible":{"enabled":"Ä¯traukta Ä¯ sÄraÅ¡Ä %{when}","disabled":"neÄ¯traukta Ä¯ sÄraÅ¡Ä %{when}"},"banner":{"enabled":"padarÄ Å¡iÄ reklamjuostÄ %{when}. Ji pasirodys kiekvieno puslapio virÅ¡uje, kol jos neiÅ¡jungs vartotojas.","disabled":"paÅ¡alinta Å¡i reklamjuostÄ %{when}. Ji nebebus rodomaa kiekvieno puslapio virÅ¡uje."}},"wizard_required":"Sveiki, tai jÅ«sÅ³ naujasis Discourse! PradÄkime nuo\u003ca href='%{url}' data-auto-route='true'\u003eInstliacijos\u003c/a\u003eâ¨","emails_are_disabled":"Visos iÅ¡einanÄios elektroninÄs Å¾inutÄs buvo uÅ¾draustos administratoriaus. JokiÅ³ papildÅ³ Ä¯spÄjamÅ³jÅ³ Å¾inuÄiÅ³ nebus iÅ¡siÅ³sta","bootstrap_mode_enabled":"NorÄdami palengvinti naujos svetainÄs paleidimÄ, jÅ«s esate paleidimo reÅ¾ime. Visiems naujiems vartotojams bus suteiktas 1 lygio pasitikÄjimas ir bus Ä¯galinti kasdieniniai elektroninio paÅ¡to santraukos atnaujinimai. Tai bus automatiÅ¡kai iÅ¡jungta, kai pasieksite %{min_users} vartotojÅ³ ribÄ.","bootstrap_mode_disabled":"Paleidimo reÅ¾imas bus iÅ¡jungtas per 24 valandas.","themes":{"default_description":"Numatytasis"},"s3":{"regions":{"ap_northeast_1":"Asia Pacific (Tokyo)","ap_northeast_2":"Asia Pacific (Seoul)","ap_south_1":"Azija ramaus vandenyno (Mumbajus)","ap_southeast_1":"Asia Pacific (Singapore)","ap_southeast_2":"Asia Pacific (Sydney)","cn_north_1":"Kinija (BeidÅ¾inas)","eu_central_1":"EU (Frankfurt)","eu_west_1":"EU (Ireland)","eu_west_2":"EU (Londonas)","eu_west_3":"EU (ParyÅ¾ius)","us_east_1":"US East (N. Virginia)","us_east_2":"US Rytai (Ohajo)","us_west_1":"US West (N. California)","us_west_2":"US West (Oregon)"}},"edit":"redaguoti Å¡ios temos pavadinimÄ ir kateogorijÄ","expand":"IÅ¡plÄsti","not_implemented":"Å i funkcija dar neveikia, atsipraÅ¡ome!","no_value":"Ne.","yes_value":"Taip","submit":"Pateikti","generic_error":"AtsipraÅ¡ome, Ä¯vyko klaida.","generic_error_with_reason":"Ä®vyko klaida: %{error}","sign_up":"Registruotis","log_in":"Prisijungti","age":"AmÅ¾ius","joined":"PrisijungÄ","admin_title":"Administratorius","show_more":"rodyti daugiau","show_help":"Nustatymai","links":"Nuorodos","links_lowercase":{"one":"nuoroda","few":"nuorodos","many":"nuorodos","other":"nuorodos"},"faq":"DUK","guidelines":"Instrukcijos","privacy_policy":"Privatumo politika","privacy":"Privatumas","tos":"PaslaugÅ³ teikimo sÄlygos","rules":"TisyklÄs","mobile_view":"Mobili perÅ¾iÅ«ra","desktop_view":"Pilna perÅ¾iÅ«ra","you":"JÅ«s","or":"arba","now":"KÄ tik","read_more":"skaityti daugiau","more":"Daugiau","less":"MaÅ¾iau","never":"niekada","every_30_minutes":"kas 30 minuÄiÅ³","every_hour":"kiekvienÄ valandÄ","daily":"kas dienÄ","weekly":"kas savaitÄ","max_of_count":"daugiausia iÅ¡ {{count}}","alternation":"arba","character_count":{"one":"{{count}} simbolis","few":"{{count}} simboliai","many":"{{count}} simboliÅ³","other":"{{count}} simboliÅ³"},"related_messages":{"title":"SusijÄ praneÅ¡imai"},"suggested_topics":{"title":"SiÅ«lomos Temos","pm_title":"Rekomenduojamos Å¾inutÄs"},"about":{"simple_title":"Apie","title":"Apie %{title}","stats":"SvetainÄs statistika","our_admins":"MÅ«sÅ³ Administratoriai","our_moderators":"MÅ«sÅ³ Moderatoriai","moderators":"Moderatoriai","stat":{"all_time":"Per visÄ laikÄ","last_7_days":"PaskutinÄs 7","last_30_days":"PaskutinÄs 30"},"like_count":"Patinka","topic_count":"Temos","post_count":"Ä®raÅ¡ai","user_count":"Nariai","active_user_count":"AktyvÅ«s vartotojai","contact":"Kontaktai","contact_info":"Atsiradus bet kokiai problemai susijusiai su puslapiu, praÅ¡ome kontaktuoti %{contact_info}."},"bookmarked":{"title":"Å½ymÄs","clear_bookmarks":"PaÅ¡alinti Å¾ymes","help":{"bookmark":"Paspausk, kad paÅ¾ymÄtum pirmÄ Ä¯raÅ¡Ä Å¡ioje temoje","unbookmark":"Paspausk, kad paÅ¡alintum visas Å¾ymÄs Å¡ioje temoje"}},"bookmarks":{"created":"jÅ«s paÅ¾ymÄjot Å¡Ä¯ Ä¯raÅ¡Ä","remove":"PaÅ¡alinti Å½ymÄ","save":"Saugoti","reminders":{"later_today":"Å iandien vÄliau","tomorrow":"Rytoj","next_week":"KitÄ savaitÄ","later_this_week":"Å ia savaitÄ vÄliau","next_month":"KitÄ mÄnesÄ¯"}},"drafts":{"resume":"GrÄ¯Å¾ti","remove":"PaÅ¡alinti","new_topic":"Naujos temos juodraÅ¡tis","new_private_message":"Naujas privatus praneÅ¡imo juodraÅ¡tis","topic_reply":"Atsakymo juodraÅ¡tis","abandon":{"yes_value":"Taip, atÅ¡aukti","no_value":"Ne, palikti"}},"topic_count_new":{"one":"Pamatyk {{count}} naujÄ temÄ","few":"Pamatyk {{count}} naujas temas","many":"Pamatyk {{count}} naujÅ³ temÅ³","other":"Pamatyk {{count}} naujas temas"},"preview":"PerÅ¾iÅ«rÄti","cancel":"atÅ¡aukti","save":"IÅ¡saugoti pakeitimus","saving":"IÅ¡saugojama...","saved":"IÅ¡saugota!","upload":"Ä®kelti","uploading":"Ä®keliama...","uploaded":"Ä®kelta!","pasting":"Skelbiama...","enable":"Ä®jungti","disable":"IÅ¡jungti","continue":"TÄsti","undo":"Anuliuoti","revert":"GrÄÅ¾inti","failed":"Nepavyko","switch_to_anon":"Pasirinkti slaptumo bÅ«senÄ","switch_from_anon":"IÅ¡junkti slaptumo bÅ«senÄ","banner":{"close":"panaikinti banerÄ¯","edit":"Redaguoti banerÄ¯ \u003e\u003e"},"choose_topic":{"none_found":"Nerasta temÅ³."},"choose_message":{"none_found":"Å½inuÄiÅ³ nÄra."},"review":{"explain":{"total":"Viso"},"delete":"PaÅ¡alinti","settings":{"save_changes":"IÅ¡saugoti pakeitimus","title":"Nustatymai"},"moderation_history":"Moderavimo istorija","topic":"Tema:","filtered_user":"Narys","user":{"username":"Slapyvardis","email":"EpaÅ¡tas","name":"Vardas"},"topics":{"topic":"Tema","details":"detalÄs"},"edit":"Redaguoti","save":"Saugoti","cancel":"AtÅ¡aukti","filters":{"type":{"title":"Tipas"},"refresh":"Atnaujinti","category":"Kategorija"},"scores":{"date":"Data","type":"Tipas"},"statuses":{"pending":{"title":"Laukiama"},"rejected":{"title":"Atmesta"}},"types":{"reviewable_user":{"title":"Narys"}},"approval":{"title":"Ä®raÅ¡ui reikalingas patvirtinimas","description":"Mes gavome tavo naujÄ Ä¯raÅ¡Ä, taÄiau jis turi bÅ«ti patvirtintas moderatoriaus. AÄiÅ« uÅ¾ kantrybÄ!","ok":"GERAI"}},"user_action":{"user_posted_topic":"\u003ca href='{{userUrl}}'\u003e{{user}}\u003c/a\u003e paskelbÄ \u003ca href='{{topicUrl}}'\u003etemÄ\u003c/a\u003e","you_posted_topic":"\u003ca href='{{userUrl}}'\u003eTu\u003c/a\u003e paskelbei \u003ca href='{{topicUrl}}'\u003etemÄ\u003c/a\u003e","user_replied_to_post":"\u003ca href='{{userUrl}}'\u003e{{user}}\u003c/a\u003e atsakÄ Ä¯ \u003ca href='{{postUrl}}'\u003e{{post_number}}\u003c/a\u003e","you_replied_to_post":"\u003ca href='{{userUrl}}'\u003eTu\u003c/a\u003e atsakei Ä¯ \u003ca href='{{postUrl}}'\u003e{{post_number}}\u003c/a\u003e","user_replied_to_topic":"\u003ca href='{{userUrl}}'\u003e{{user}}\u003c/a\u003e atsakÄ Ä¯ \u003ca href='{{topicUrl}}'\u003etemÄ\u003c/a\u003e","you_replied_to_topic":"\u003ca href='{{userUrl}}'\u003eTu\u003c/a\u003e atsakei Ä¯ \u003ca href='{{topicUrl}}'\u003etemÄ\u003c/a\u003e","user_mentioned_user":"\u003ca href='{{user1Url}}'\u003e{{user}}\u003c/a\u003e paminÄjo \u003ca href='{{user2Url}}'\u003e{{another_user}}\u003c/a\u003e","user_mentioned_you":"\u003ca href='{{user1Url}}'\u003e{{user}}\u003c/a\u003e paminÄjo \u003ca href='{{user2Url}}'\u003etave\u003c/a\u003e","you_mentioned_user":"\u003ca href='{{user1Url}}'\u003eTu\u003c/a\u003e paminÄjai \u003ca href='{{user2Url}}'\u003e{{another_user}}\u003c/a\u003e","posted_by_user":"PaskelbÄ \u003ca href='{{userUrl}}'\u003e{{user}}\u003c/a\u003e vartotojas","posted_by_you":"Paskelbta nuo \u003ca href='{{userUrl}}'\u003ejÅ«sÅ³\u003c/a\u003e","sent_by_user":"IÅ¡siuntÄ \u003ca href='{{userUrl}}'\u003e{{user}}\u003c/a\u003e","sent_by_you":"IÅ¡siÅ³sta nuo \u003ca href='{{userUrl}}'\u003ejÅ«sÅ³\u003c/a\u003e"},"directory":{"filter_name":"ruÅ¡iuoti pagal vartotojus","title":"Vartotojai","likes_given":"Duota","likes_received":"Gauta","topics_entered":"PerÅ¾iÅ«rÄta","topics_entered_long":"Temos perÅ¾iÅ«rÄtos","time_read":"Laikas","topic_count":"Temos","topic_count_long":"Sukurtos Temos","post_count":"Atsakymai","post_count_long":"Paskelbti Ä®raÅ¡ai","no_results":"Nerasta jokiÅ³ rezultatÅ³.","days_visited":"Apsilankymai","days_visited_long":"Apsilankymo dienos","posts_read":"Perskaityti","posts_read_long":"Perskaityta Ä®raÅ¡Å³","total_rows":{"one":"%{count} vartotojas","few":"%{count} vartotojÅ³","many":"%{count} vartotojÅ³","other":"%{count} vartotojÅ³"}},"group_histories":{"actions":{"change_group_setting":"Pakeisti grupÄs nustatymus","add_user_to_group":"PridÄti narÄ¯","remove_user_from_group":"PaÅ¡alinti narÄ¯","make_user_group_owner":"Padaryti savininku","remove_user_as_group_owner":"AtÅ¡aukti valdytojÄ"}},"groups":{"member_added":"PridÄta","add_members":{"title":"PridÄti narius","description":"Valdykite Å¡ios grupÄs narystÄ","usernames":"SlapyvardÅ¾iai"},"requests":{"reason":"PrieÅ¾astis","accepted":"patvirtinta"},"manage":{"title":"Redaguoti","name":"Vardas","full_name":"Vardas ir pavardÄ","add_members":"PridÄti nariÅ³","delete_member_confirm":"PaÅ¡alinti '%{username}' iÅ¡ '%{group}' grupÄs?","profile":{"title":"Profilis"},"interaction":{"title":"Integracija","posting":"Skelbiama","notification":"PerspÄjimai"},"membership":{"title":"NarystÄ","access":"Prieiga"},"logs":{"title":"AtÄskaita","when":"Kada","action":"Veiksmas","acting_user":"Vadovaujantis narys","target_user":"Numatytas narys","subject":"Tema","details":"DetalÄs","from":"Nuo","to":"Kam"}},"public_admission":"Leisti vartotojams laisvai prisijungti prie grupÄs (reikalauja vieÅ¡ai matomos grupÄs)","public_exit":"Leisti vartotojams laisvai iÅ¡eiti iÅ¡ grupÄs","empty":{"posts":"Å ios grupÄs nariÅ³ Ä¯raÅ¡Å³ nÄra.","members":"Å ioje grupÄje nariÅ³ nÄra.","mentions":"NÄra Å¡ios grupÄs paminÄjimÅ³."},"add":"PridÄti","join":"Prisijungti","leave":"Palikti","request":"UÅ¾klausa","message":"Å½inutÄ","membership_request":{"submit":"Pateikti uÅ¾klausÄ","title":"PraÅ¡yti prisijungimo prie @%{group_name}"},"membership":"NarystÄ","name":"Vardas","group_name":"GrupÄs pavadinimas","user_count":"Nariai","bio":"Apie grupÄ","selector_placeholder":"Ä¯veskite slapyvardÄ¯","owner":"valdytojas","index":{"title":"GrupÄs","all":"Visos grupÄs","filter":"Filtruoti grupes pagal tipÄ","close_groups":"UÅ¾darytos grupÄs","automatic":"Automatini","closed":"UÅ¾daryta","public":"VieÅ¡a","private":"Privati","public_groups":"VieÅ¡os grupÄs","close_group":"UÅ¾daryti grupÄ","my_groups":"Mano grupÄs","group_type":"GrupÄs tipas","is_group_user":"Narys","is_group_owner":"Savininkas"},"title":{"one":"GrupÄ","few":"GrupÄs","many":"GrupiÅ³","other":"GrupÄs"},"activity":"Veikla","members":{"title":"Nariai","filter_placeholder_admin":"slapyvardis arba e-paÅ¡tas","filter_placeholder":"slapyvardis","remove_member":"PaÅ¡alinti narÄ¯","remove_member_description":"PaÅ¡alinti \u003cb\u003e%{username}\u003c/b\u003e iÅ¡ Å¡ios grupÄs","make_owner":"Paversti savininku","make_owner_description":"Paskirti \u003cb\u003e%{username}\u003c/b\u003e, grupÄs valdytoju","remove_owner":"PaÅ¡alinti iÅ¡ savininkÅ³","remove_owner_description":"AtÅ¡aukti \u003cb\u003e%{username}\u003c/b\u003e, iÅ¡ grupÄs valdytojo posto","owner":"Savininkas"},"topics":"Temos","posts":"Ä¯raÅ¡ai","mentions":"PaminÄjimai","messages":"Å½inutÄs","alias_levels":{"mentionable":"Kas gali @minÄti Å¡iÄ grupÄ?","messageable":"Kas gali praneÅ¡ti apie Å¡iÄ grupÄ?","nobody":"Niekas","only_admins":"Tik administratoriai","mods_and_admins":"Tik moderatoriai ir administratoriai","members_mods_and_admins":"Tik grupÄs nariai, moderatoriai ir administratoriai","everyone":"Visi"},"notifications":{"watching":{"title":"Stebimos","description":"BÅ«si perspÄtas dÄl kiekvieno naujo Ä¯raÅ¡o kiekvienoje Å¾inutÄje."},"watching_first_post":{"title":"Stebime PirmÄ Ä®raÅ¡Ä"},"tracking":{"title":"Sekamos","description":"BÅ«si perspÄtas kai kaÅ¾kas paminÄs tavo @vardÄ ar tau atsakys."},"regular":{"title":"Ä®prastas","description":"BÅ«si perspÄtas kai kaÅ¾kas paminÄs tavo @vardÄ ar tau atsakys."},"muted":{"title":"Nutildytos"}},"flair_url":"Avatar Flair paveiksliukas","flair_url_placeholder":"(Pasirinktinai) Vaizdo URL arba \"Font Awesome\" klasÄ","flair_bg_color":"Avatar Flair fono splva","flair_bg_color_placeholder":"(Pasirinktinai) Hex spalva","flair_color":"Avatar Flair spalva","flair_color_placeholder":"(Pasirinktinai) Hex spalva","flair_preview_icon":"PerÅ¾iÅ«ros piktograma","flair_preview_image":"PerÅ¾iÅ«ros paveikslÄlÄ¯"},"user_action_groups":{"1":"Tau Patinka","2":"Å½monÄms patinka","3":"Å½ymÄs","4":"Temos","5":"Atsakymai","6":"Atsakymai","7":"PaminÄjimai","9":"Citatos","11":"Pakeitimai","12":"IÅ¡siÅ³sti","13":"PraneÅ¡imÅ³ deÅ¾utÄ","14":"Laukiama","15":"JuodraÅ¡Äiai"},"categories":{"all":"visos kategorijos","all_subcategories":"visi","no_subcategory":"nieko","category":"Kategorija","category_list":"Visos kategorijos","reorder":{"title":"Keisti kategorijÅ³ tvarkÄ","title_long":"Pakeisti kategorijÅ³ sÄraÅ¡o tvarkÄ","save":"IÅ¡saugoti","apply_all":"Kandidatuoti","position":"Pozicija"},"posts":"Ä®raÅ¡a","topics":"Temos","latest":"PaskutinÄs","latest_by":"paskutinÄs pagal","toggle_ordering":"perjungti iÅ¡dÄstimo tvarkÄ","subcategories":"Subkategorijos","topic_sentence":{"one":"%{count} tema","few":"%{count} temos","many":"%{count}temÅ³","other":"%{count}temos"}},"ip_lookup":{"title":"IP adreso perÅ¾iÅ³ra","hostname":"Adresas","location":"Vieta","location_not_found":"(neÅ¾inoma)","organisation":"Organizacija","phone":"Telefonas","other_accounts":"Kitos paskyros","delete_other_accounts":"IÅ¡trinti %{count}","username":"Vartotojo vardas","trust_level":"TL","read_time":"perskaitymo laikas","topics_entered":"paskelbtos temos","post_count":"# Ä¯raÅ¡ai","confirm_delete_other_accounts":"Ar tikrai nori iÅ¡trinti Å¡ias paskyras?","copied":"nukopijuota"},"user_fields":{"none":"(pasirink nustatymÄ)"},"user":{"said":"{{username}}:","profile":"Profilis","mute":"Nutildyti","edit":"Redaguoti Nustatymus","download_archive":{"button_text":"AtsisiÅ³sti viskÄ","confirm":"Ar tikrai norite atsisiÅ³sti savo Ä¯raÅ¡us?","success":"Eksportavimas pradÄtas. Kai procesas bus baigtas, gausite praneÅ¡imÄ","rate_limit_error":"Ä®raÅ¡ai gali bÅ«ti atsiunÄiami vienÄ kartÄ per dienÄ, praÅ¡ome pakartoti operacijÄ rytoj."},"new_private_message":"Nauja Å¾inutÄ","private_message":"Å½inutÄs","private_messages":"Å½inutÄs","user_notifications":{"ignore_duration_username":"Slapyvardis","ignore_duration_save":"Ignoruoti","mute_option":"Nutildyta","normal_option":"Ä®prastas"},"activity_stream":"Aktyvumas","preferences":"Nustatymai","feature_topic_on_profile":{"save":"Saugoti","clear":{"title":"IÅ¡valyti"}},"expand_profile":"PraplÄsti","collapse_profile":"Suskleisti","bookmarks":"Å½ymÄs","bio":"Apie mane","invited_by":"PakvietÄ","trust_level":"Patikimumo lygis","notifications":"PerspÄjimai","statistics":"Statistika","desktop_notifications":{"label":"Tiesioginiai praneÅ¡imai","not_supported":"PraneÅ¡imai neveikia ant Å¡ios narÅ¡yklÄs. AtsipraÅ¡ome!","perm_default":"Ä®jungti PraneÅ¡imus","perm_denied_btn":"Leidimas atmestas","perm_denied_expl":"UÅ¾klausa atmesta nes jÅ«s to neleidote. Jaigu norite gauti perspÄjimus, tai galite jÅ«sÅ³ narÅ¡yklÄs nustatymuose.","disable":"IÅ¡jungti PraneÅ¡imus","enable":"Galimi PraneÅ¡imai","each_browser_note":"PraneÅ¡imas: JÅ«s turite pasikeisti nustatymus ant kiekvienos narÅ¡yklÄs, kuriÄ naudojate.","consent_prompt":"Ar norite gauti tiesioginius praneÅ¡imus, kai Å¾monÄs atsakys Ä¯ jÅ«sÅ³ Ä¯raÅ¡us?"},"dismiss":"Praleisti","dismiss_notifications":"Atmesti visus","dismiss_notifications_tooltip":"PaÅ¾ymÄkite visus praneÅ¡imus kaip Perskaitytus.","first_notification":"Asmeniniai perspÄjimai. JÅ«s galite atlikti jums reikiamÄ uÅ¾klausÄ pasirinkdami atitinkamus nustatymus.","allow_private_messages":"Leisti kitiems vartotojams siÅ³sti man asmeninius praneÅ¡imus","external_links_in_new_tab":"Atidaryti visas pridÄtas nuorodas naujame lange","enable_quoting":"Ä®jungti citatÅ³ atsakymus pabrÄÅ¾tam tekstui","change":"pakeisti","moderator":"{{user}} yra moderatorius","admin":"{{user}} yra administratorius","moderator_tooltip":"Å is vartotojas yra moderatorius","admin_tooltip":"Å is vartotojas yra administratorius","silenced_tooltip":"Å is narys nutildytas","suspended_notice":"Å is vartotojas nuÅ¡alintas iki {{date}}.","suspended_permanently":"Å is narys suspenduotas","suspended_reason":"PrieÅ¾astis:","github_profile":"Github","email_activity_summary":"Aktyvumo veikla","mailing_list_mode":{"label":"Elektroninio paÅ¡to grupÄ","enabled":"Aktyvuoti elektroninio paÅ¡to grupiÅ³ rÄÅ¾imÄ.","instructions":"Å is nustatymas perraÅ¡ys prieÅ¡ tai buvusiÄ veiklÄ.\u003cbr /\u003e\nPrieÅ¡ tai uÅ¾tildytos temos ir Ä¯raÅ¡ai nebus Ä¯traukti Ä¯ eketroninÅ³ laiÅ¡kÅ³ saraÅ¡us.\n","individual":"AtsiÅ«sti elektroninÄ¯ laiÅ¡kÄ apie naujus visus naujus Ä¯raÅ¡us","individual_no_echo":"AtsiÅ«sti elektroninÄ¯ laiÅ¡kÄ apie naujus visus naujus Ä¯raÅ¡us, iÅ¡skyrus mano.","many_per_day":"AtsiÅ«sti elektroninÄ¯ laiÅ¡kÄ apie naujus visus naujus Ä¯raÅ¡us (kartÅ³ {{dailyEmailEstimate}} per dienÄ)","few_per_day":"AtsiÅ«sti elektroninÄ¯ laiÅ¡kÄ apie naujus visus naujus Ä¯raÅ¡us (apie 2 kartus per dienÄ)"},"tag_settings":"EtiketÄs","watched_tags":"Å½iÅ«rÄta","watched_tags_instructions":"JÅ«s automatiÅ¡kai Å¾iÅ«rÄsite visas temas su atitinkamai pasirinktomis etiketÄmis. JÅ«s bÅ«site perspÄjami apie visus naujus Ä¯raÅ¡us ir naujas temas, ir skaiÄius su naujais Ä¯raÅ¡ais bus rodomas Å¡alia temos.","tracked_tags":"Sekami","tracked_tags_instructions":"JÅ«s automatiÅ¡kai stebÄsite visas temas su atitinkamai pasirinktais Å¾ymekliais. SkaiÄius su naujais Ä¯raÅ¡ais bus rodomas Å¡alia temos.","muted_tags":"Nutildyta","muted_tags_instructions":"Jums daugiau nebus praneÅ¡ama apie naujas temas su Å¡iomis etiketÄmis, taip pat jos nebus naujÅ³ temÅ³ saraÅ¡uose. ","watched_categories":"Stebimos","watched_categories_instructions":"JÅ«s stebite visas temas Å¡iose kategorijose. Jums bus praneÅ¡ama apie naujus Ä¯raÅ¡us ir naujas temas, ir naujÅ³ Ä¯raÅ¡Å³ skaiÄius taip pat bus parodytas Å¡alia temos.","tracked_categories":"Sekamos","tracked_categories_instructions":"JÅ«s automatiÅ¡kai sekate vias temas Å¡iose kategorijose. SkaiÄius su naujais Ä¯raÅ¡ais bus taip pat rodomas Å¡alia temos.","watched_first_post_categories":"Stebime PirmÄ Ä®raÅ¡Ä","watched_first_post_categories_instructions":"BÅ«site perspÄjami apie naujus Ä¯raÅ¡us Å¡iose kategorijose.","watched_first_post_tags":"Stebime PirmÄ Ä®raÅ¡Ä","watched_first_post_tags_instructions":"JÅ«s bÅ«site perspÄjami apie Ä¯raÅ¡us kÄkvienoje naujoje temoje su pasirinktomis etiketÄmis.","muted_categories":"Nutildytos","delete_account":"IÅ¡trinti mano vartotojÄ","delete_account_confirm":"Ar tikrai norite visam laikui iÅ¡trinti savo paskyrÄ? Å is veiksmas yra galutinis.","deleted_yourself":"JÅ«sÅ³ paskyra sÄkmingai iÅ¡trinta.","unread_message_count":"Å½inutÄs","admin_delete":"IÅ¡trinti","users":"Vartotojai","muted_users":"Nutildytos","muted_users_instructions":"Slopinti visus Å¡iÅ³ vartoojÅ³ praneÅ¡imus.","tracked_topics_link":"Rodyti","automatically_unpin_topics":"AutomatiÅ¡kai atsegti temas pasiekus apaÄiÄ.","apps":"ProgramÄlÄs","revoke_access":"Panaiktinti teises","undo_revoke_access":"Atstatyti atgal panaikintas teises","api_approved":"Patvirtinta:","theme":"Tema","home":"Numatytasis pagrindinis puslapis","staff_counters":{"flags_given":"naudingos vÄliavos","flagged_posts":"Ä¯raÅ¡ai su vÄliavomis","deleted_posts":"iÅ¡trinti Ä¯raÅ¡ai","suspensions":"nuÅ¡alinimai","warnings_received":"perspejimai"},"messages":{"all":"Visos","inbox":"PraneÅ¡imÅ³ deÅ¾utÄ","sent":"IÅ¡siÅ³sti","archive":"Archyvuoti","groups":"GrupÄs","bulk_select":"Pasirinkti Å¾inutÄ","move_to_inbox":"Perkelti Ä¯ PraneÅ¡imÅ³ dÄÅ¾utÄ","move_to_archive":"Archyvuoti","failed_to_move":"Ä®vyko klaida! (patikrinkite interneto ryÅ¡Ä¯)","select_all":"PaÅ¾ymÄti visus","tags":"GairÄs"},"preferences_nav":{"account":"Paskyra","profile":"Profilis","emails":"EpaÅ¡tai","notifications":"PraneÅ¡imai","categories":"Kategorijos","users":"Nariai","tags":"GairÄs","interface":"SÄsaja","apps":"ProgramÄlÄs"},"change_password":{"success":"(el. laiÅ¡kas iÅ¡siÅ³stas)","in_progress":"(siunÄiamas el. laiÅ¡kas)","error":"(klaida)","action":"SiÅ³sti SlaptaÅ¾odÅ¾io priminimo elektroninÄ Å¾inutÄ","set_password":"Nustatyti SlaptaÅ¾odÄ¯","choose_new":"Pasirinkite naujÄ slaptaÅ¾odÄ¯","choose":"Pasirinkite slaptaÅ¾odÄ¯"},"second_factor_backup":{"regenerate":"Pergeneruoti","disable":"IÅ¡jungti","enable":"Ä®galinti","copied_to_clipboard":"Nukopijuota Ä¯ iÅ¡kirptÄ","copy_to_clipboard_error":"Klaida kopijuojant duomenis Ä¯ iÅ¡karpinÄ","remaining_codes":"JÅ«s turite \u003cstrong\u003e{{count}}\u003c/strong\u003e atsarginiai kodai.","codes":{"title":"Sukurta atsarginiÅ³ kopijÅ³ kodai"}},"second_factor":{"title":"DviejÅ³ veiksmÅ³ autentifikavimas","confirm_password_description":"Patvirtinkite slaptaÅ¾odÄ¯ norÄdami tÄsti","name":"Vardas","label":"Kodas","show_key_description":"Ä®veskite rankiniu bÅ«du","edit":"Redaguoti","security_key":{"register":"Registruokis","delete":"PaÅ¡alinti"}},"change_about":{"title":"Keisti Apie Mane","error":"Rasta klaida bandant pakeisti reikÅ¡mÄ. PraÅ¡om patikslinti veiksmus."},"change_username":{"title":"Keisti vartotojo vardÄ","taken":"AtsipraÅ¡ome, Å¡is vartotojo vardas uÅ¾imtas.","invalid":"Å is vartotojo vardas yra neteisingas. Jame turi bÅ«ti tik skaiÄiai ir raidÄs"},"change_email":{"title":"Keisti el. paÅ¡tÄ","taken":"AtsipraÅ¡ome, Å¡is el. paÅ¡tas negalimas.","error":"Ä®vyko klaida keiÄiant jÅ«sÅ³ el. paÅ¡to adresÄ. Gal bÅ«t jis jau yra naudojamas?","success":"Mes iÅ¡siunteme laiÅ¡kÄ nurodytu el. paÅ¡to adresu. PraÅ¡ome sekti patvirtinimo instrukcijas."},"change_avatar":{"title":"Pakeisti profilio nuotraukÄ","letter_based":"Sistema pridÄjo profilio nuotraukÄ","uploaded_avatar":"Paveiksliukas","uploaded_avatar_empty":"PridÄti paveiksliukÄ","upload_title":"Ä®kelti savo nuotraukÄ","image_is_not_a_square":"Ä®spÄjimas: jÅ«s kÄ tik apkirpote nuotraukÄ, taÄiau plotis ir ilgis nÄra vienodi."},"change_card_background":{"title":"Paskyros fonas","instructions":"Fono paveiksliukas bus sucentruotas ir turÄs numatytÄ 590px plotÄ¯."},"email":{"title":"El. paÅ¡tas","primary":"Pagrindinis el. PaÅ¡tas","secondary":"Antriniai el. PaÅ¡tai","no_secondary":"AntriniÅ³ el. PaÅ¡tÅ³ nÄra","instructions":"Nebus rodomas vieÅ¡ai.","ok":"Mes jums atsiÅ³sime patvirtinimo elektroninÄ¯ laiÅ¡kÄ","invalid":"PraÅ¡om Ä¯raÅ¡yti teisingÄ elektroninÄ¯ adresÄ","authenticated":"Tavo elektroninis laiÅ¡kas buvo {{provider}} autorizuotas","frequency_immediately":"Mes jums atsiÅ³sime elektroninÄ¯ laiÅ¡kÄ iÅ¡ karto, jeigu jÅ«s neperskaitÄte Å¾inutÄs, kuriÄ siuntÄme praeitame laiÅ¡ke.","frequency":{"one":"Mes atsiÅ³sime el. laiÅ¡kÄ jeigu nebuvai prisijungÄs per paskutinÄ minutÄ.","few":"Mes atsiÅ³sime el. laiÅ¡kÄ jeigu nebuvai prisijungÄs per paskutines {{count}} minutes.","many":"Mes atsiÅ³sime el. laiÅ¡kÄ jeigu nebuvai prisijungÄs per paskutines {{count}} minutes.","other":"Mes atsiÅ³sime el. laiÅ¡kÄ jeigu nebuvai prisijungÄs per paskutines {{count}} minutes."}},"associated_accounts":{"connect":"Prisijungti","revoke":"AtÅ¡aukti","cancel":"AtÅ¡aukti","not_connected":"(neprisijungÄs)"},"name":{"title":"Vardas","instructions":"jÅ«sÅ³ vardas pavardÄ (pasirinktinai)","instructions_required":"Tavo pilnas vardas","too_short":"Tavo slapyvardis yra per trumpas","ok":"Tavo slapyvardis yra tinkamas"},"username":{"title":"Vartotojo vardas","instructions":"unikalus, be tarpeliÅ³, trumpas","short_instructions":"Vartotojai gali tave paminÄti kaip @{{username}}","available":"Vartotojo vardas nÄra uÅ¾imtas","not_available":"Negalimas. Gal pabandykite {{suggestion}}?","not_available_no_suggestion":"Nepasiekiamas","too_short":"Vartotojo vardas yra per trumpas","too_long":"Vartotojo vardas yra per ilgas.","checking":"Tikrinmas vartotojo vardas...","prefilled":"El. paÅ¡tro adresas sutampa su uÅ¾registruotu vartotojo vardu."},"locale":{"title":"Kalba","instructions":"Vartotojo kalba. Ji pasikeis, kai perkrausite puslapÄ¯.","default":"(numatyta)","any":"bet kuris"},"password_confirmation":{"title":"Pakartokite slaptaÅ¾odÄ¯"},"auth_tokens":{"ip":"IP","details":"DetalÄs"},"last_posted":"Paskutinis Ä®raÅ¡as","last_emailed":"PaskutinÄ¯ kartÄ siÅ³stas el. laiÅ¡kas","last_seen":"Matytas","created":"PrisjungÄ","log_out":"Atsijungti","location":"Gyvenamoji vieta","website":"SvetainÄ","email_settings":"El. paÅ¡tas","text_size":{"normal":"Ä®prastas"},"like_notification_frequency":{"title":"PerspÄti susiejus","always":"Visada","first_time_and_daily":"Pirmas Ä¯raÅ¡as patinka","first_time":"Pirmas Ä¯raÅ¡as patinka","never":"Niekada"},"email_previous_replies":{"title":"Ä®traukti praÄjusius Ä¯raÅ¡us apaÄioje elektroninÅ³ laiÅ¡kÅ³","unless_emailed":"nebent iÅ¡sÅ³sta prieÅ¡tai","always":"visada","never":"niekada"},"email_digests":{"every_30_minutes":"kas 30 minuÄiÅ³","every_hour":"kas valandÄ","daily":"kas dienÄ","weekly":"kas savaitÄ"},"email_level":{"title":"AtsiÅ³skite man el. laiÅ¡kÄ, jei kaÅ¾kas mane cituoja, atsako Ä¯ mano Ä¯raÅ¡Ä, pakvieÄia Ä¯ temÄ ar pamini mane.","always":"visada","never":"niekada"},"email_messages_level":"AtsiÅ³skite man el. laiÅ¡kÄ jei kaÅ¾kas man paraÅ¡o","include_tl0_in_digests":"Ä®traukti turinÄ¯ iÅ¡ naujÅ³ vartotojÅ³ taip pat Ä¯ elektroniniÅ³ laiÅ¡kÅ³ uÅ¾klausas.","email_in_reply_to":"Ä®traukti atsakytÅ³ Ä¯raÅ¡Å³ iÅ¡traukas taip pat Ä¯ mano elektroninÄ¯ paÅ¡tÄ","other_settings":"Kita","categories_settings":"Kategorijos","new_topic_duration":{"label":"Laikyti temÄ nauja kai","not_viewed":"Dar neperÅ¾iÅ«rÄjau","last_here":"sukurta nuo paskutinio karto","after_1_day":"sukurta per paskutines 24val.","after_2_days":"sukurta per paskutines 2 dienas","after_1_week":"sukurta per paskutines 7 dienas","after_2_weeks":"sukurta per paskutines 2 savaites"},"auto_track_topics":"AutomatiÅ¡kai sekti temas, kurias aÅ¡ Ä¯vedu","auto_track_options":{"never":"niekada","immediately":"Staigiai","after_30_seconds":"Po 30 sekundÅ¾iÅ³","after_1_minute":"Po 1 minutÄs","after_2_minutes":"po 2 minuÄiÅ³","after_3_minutes":"po 3 minuÄiÅ³","after_4_minutes":"po 4 minuÄiÅ³","after_5_minutes":"po 5 minuÄiÅ³","after_10_minutes":"po 10 minuÄiÅ³"},"notification_level_when_replying":"Kuomet paskelbiu temÄ, paÅ¾ymeti tÄ temÄ kaip","invited":{"search":"Ä¯veskite, kad ieÅ¡kotumete pakvietim","title":"Pakvietimai","user":"Pakviestas vartotojas","truncated":{"one":"Rodomas pirmas pakvietimas","few":"Rodomi pirmi {{count}} pakvietimai.","many":"Rodomi pirmi {{count}} pakvietimai.","other":"Rodomi pirmi {{count}} pakvietimai."},"redeemed":"Atstatyti pakvietimai","redeemed_tab":"Atstatyta","redeemed_tab_with_count":"Atstatyta ({{count}})","redeemed_at":"Atstatyta","pending":"Laukiami pakvietimai","pending_tab":"Laukiama","pending_tab_with_count":"Neperskaityti ({{count}})","topics_entered":"PerÅ¾iÅ«rÄtos temos","posts_read_count":"Perskaityta Ä¯raÅ¡Å³","expired":"Å is pakvietimas nebegalioja","rescind":"PaÅ¡alinti","rescinded":"Pakvietimas paÅ¡alintas","reinvite":"PersiÅ³sti pakvietimÄ","reinvite_all":"PersiÅ³sti visus pakvietimus dar kartÄ","reinvite_all_confirm":"Ar esate tikri, norÄdami persiÅ³sti visus pakvietimus?","reinvited":"Pakvietimas persiÅ³stas","reinvited_all":"Visi pakvietimai buvo persiÅ³sti!","time_read":"Skaitymo laikas","days_visited":"Apsilankymo dienos","account_age_days":"Paskyros amÅ¾ius","create":"SiÅ³sti pakvietimÄ","generate_link":"Kopijuoti pavietimo nuorodÄ","link_generated":"Pavyko sugeneruoti pakvietimo nuorodÄ","valid_for":"Pakvietimo nuoroda galioja tik Å¡iam elektroninio paÅ¡to adresui: %{email}","bulk_invite":{"text":"Grupinis pakvietimas iÅ¡ failo","success":"Failas Ä¯keltas sÄkmingai, jums bus praneÅ¡ta kada procesas bus baigtas.","error":"AtsipraÅ¡ome, failas privalo buti CSV formato."}},"password":{"title":"SlaptaÅ¾odis","too_short":"JÅ«sÅ³ slaptaÅ¾odis per trumpas.","common":"JÅ«sÅ³ slaptaÅ¾odis yra per daug bendrinis.","same_as_username":"Tavo slaptaÅ¾odis yra toks pat, kaip ir vartotojo vardas","same_as_email":"Tavo slaptaÅ¾odis yra toks pat, kaip ir el. adresas.","ok":"JÅ«sÅ³ slaptaÅ¾odis yra tinkamas.","instructions":"bent jau %{count}simboliai"},"summary":{"title":"ApraÅ¡ymas","stats":"Statistika","time_read":"skaitymo laikas","top_replies":"Populiariausi Atsakymai","no_replies":"JokiÅ³ atsakymÅ³ nerasta.","more_replies":"Daugiau AtsakymÅ³","top_topics":"Popiuliariausios Temos","no_topics":"JokiÅ³ temÅ³ nerasta.","more_topics":"Daugiau TemÅ³","top_badges":"Populiariausi TrofÄjai","no_badges":"JokiÅ³ Å¾enkleliÅ³.","more_badges":"Daugiau TrofÄjÅ³","top_links":"Populiarios nuorodos","no_links":"JokiÅ³ nuorodÅ³.","most_liked_by":"Daugiausia tu patinki","most_liked_users":"Daugiausia tau patinka","most_replied_to_users":"Daugiausia atsakyta Ä¯","no_likes":"JokiÅ³ patinka kolkas.","topics":"Temos","replies":"Atsakymai"},"ip_address":{"title":"Paskutinis IP adresas"},"registration_ip_address":{"title":"Registracijos IP adresas"},"avatar":{"title":"Profilio nuotrauka","header_title":"Profilis, Å¾inutÄs, Å¾ymÄs ir nustatymai"},"title":{"title":"AntraÅ¡tÄ","none":"(nieko)"},"primary_group":{"title":"PagrindinÄ GrupÄ","none":"(nieko)"},"filters":{"all":"Visi"},"stream":{"posted_by":"Paskelbtas nuo","sent_by":"IÅ¡siÅ³stas nuo","private_message":"Å½inutÄs","the_topic":"tema"}},"loading":"Kraunama...","errors":{"prev_page":"kai buvo bandyta uÅ¾krauti","reasons":{"network":"RyÅ¡io Klaida","server":"Serverio Klaida","forbidden":"NÄra TeisiÅ³","unknown":"Klaida","not_found":"Puslapis nerastas"},"desc":{"network":"PraÅ¡ome patikrinti savo ryÅ¡Ä¯.","network_fixed":"PanaÅ¡u, kad tai sugrÄ¯Å¾o.","server":"Klaidos kodas: {{status}}","forbidden":"Jums negalima perÅ¾iÅ«rÄti.","not_found":"Oops, URL neegzistuoja.","unknown":"KaÅ¾kas blogai nutiko."},"buttons":{"back":"GrÄ¯Å¾ti Atgal","again":"Bandyti dar kartÄ","fixed":"UÅ¾krauti PuslapÄ¯"}},"modal":{"close":"uÅ¾daryti"},"close":"UÅ¾daryti","assets_changed_confirm":"Å i svetainÄ ka tik buvo atnaujinta. Perkrauti, kad matytumÄte naujausiÄ versijÄ?","logout":"JÅ«s buvote atjungtas nuo sistemos.","refresh":"Atnaujinti","read_only_mode":{"enabled":"Puslapis veikia skaitymo (read only) reÅ¾imu. Gali ieÅ¡koti, atsakinÄti ar spausti \"patinka\", taÄiau kitos funkcijos Å¡iuo metu yra negalimos.","login_disabled":"Prisijungimas yra iÅ¡jungtas, kai svetainÄ yra skaitymo reÅ¾ime.","logout_disabled":"Atsijungimas yra laikinai iÅ¡junktas kuomet puslapis yra Å¾iÅ«rimas skaitymo reÅ¾imu"},"learn_more":"suÅ¾inoti daugiau...","all_time":"iÅ¡ viso","all_time_desc":"temÅ³ sukurta","year":"metai","year_desc":"sukurtos temos per paskutines 365 dienas","month":"mÄnesis","month_desc":"sukurta temÅ³ per paskutines 30 dienÅ³","week":"savaitÄ","week_desc":"sukurta temÅ³ per paskutines 7 dienas","day":"diena","first_post":"Pirmas Ä¯raÅ¡as","mute":"Nutildyti","unmute":"PaÅ¡alinti nutildymÄ","last_post":"Paskelbta","time_read":"Skaitykite","time_read_recently":"%{time_read} pastaruoju metu","time_read_tooltip":"bendras skaitymo laikas %{time_read}","last_reply_lowercase":"Paskutinis atsakymas","replies_lowercase":{"one":"Atsakymas","few":"Atsakymai","many":"Atsakymai","other":"Atsakymai"},"signup_cta":{"sign_up":"Registruotis","hide_session":"Priminti rytoj","hide_forever":"AÄiÅ« ne!","hidden_for_session":"OK, paklausiu tavÄs rytoj. Tu taip pat visada gali naudoti 'Prisijungti' kad sukurtum paskyrÄ"},"summary":{"enabled_description":"Tu Å¡iuo metu Å¾iÅ«ri temos apraÅ¡ymÄ: paÄius Ä¯domiausius Ä¯raÅ¡us, kuriuos iÅ¡rinko bendruomenÄ.","description":"Yra iÅ¡ viso \u003cb\u003e{{replyCount}}\u003c/b\u003e atsakymÅ³.","description_time":"Yra \u003cb\u003e{{replyCount}}\u003c/b\u003e atsakymÅ³ ir apytiksliai \u003cb\u003e{{readingTime}} minuÄiÅ³ skaitymo\u003c/b\u003e.","enable":"Apibendrinkite Å¡iÄ TemÄ","disable":"PerÅ¾iÅ«rÄti visus Ä®raÅ¡us"},"deleted_filter":{"enabled_description":"Å ioje temoje yra iÅ¡trintÅ³ Ä¯raÅ¡Å³, kurie yra paslÄpti.","disabled_description":"IÅ¡trinti temos Ä¯raÅ¡ai vÄl rodomi.","enable":"PaslÄpti iÅ¡trintus Ä¯raÅ¡us","disable":"Rodyti iÅ¡trintus Ä¯raÅ¡us"},"private_message_info":{"title":"Å½inutÄs","remove_allowed_user":"Ar tikrai nori paÅ¡alinti {{name}} iÅ¡ Å¡ios Å¾inutÄs?","remove_allowed_group":"Ar tikrai norite paÅ¡alinti {{name}} iÅ¡ Å¡ios Å¾inutÄs?"},"email":"El. paÅ¡tas","username":"Vartotojo vardas","last_seen":"Matytas","created":"Sukurtas","created_lowercase":"sukurtas","trust_level":"Patikimumo lygis","search_hint":"vartotojo vardas, el. paÅ¡tas arba IP adresas","create_account":{"title":"Sukurti naujÄ paskyrÄ","failed":"Ä®vyko kaÅ¾kas blogai, gali bÅ«ti, kad Å¡is el. paÅ¡tas jau yra uÅ¾registruotas, pameginkite pasinaudoti slaptaÅ¾odÅ¾io priminimo nuoroda"},"forgot_password":{"title":"SlaptaÅ¾odÅ¾io atkÅ«rimas","action":"PamirÅ¡au savo slaptaÅ¾odÄ¯","invite":"IraÅ¡ykite savo vartotojo vardÄ arba el. adresÄ ir mes jums atsiÅ³sime slaptaÅ¾odÅ¾io atkÅ«rimo instrukcijas el. paÅ¡tu.","reset":"Keisti slaptaÅ¾odÄ¯","complete_username":"Jei paskyra sutampa su vartotojo vardu \u003cb\u003e%{username}\u003c/b\u003e, turÄtum gauti el.laiÅ¡kÄ su slaptaÅ¾odÅ¾io keitimo instrukcijomis.","complete_email":"Jei paskyra sutampa su \u003cb\u003e%{email}\u003c/b\u003e, turÄtum gauti el.laiÅ¡kÄ su slaptaÅ¾odÅ¾io keitimo instrukcijomis.","complete_username_not_found":"Jokia paskyra nesutampa su vartotojo vardu \u003cb\u003e%{username}\u003c/b\u003e","complete_email_not_found":"Jokia paskyra nesutampa su \u003cb\u003e%{email}\u003c/b\u003e","button_ok":"GERAI","button_help":"Pagalba"},"email_login":{"complete_username_not_found":"Jokia paskyra nesutampa su vartotojo vardu \u003cb\u003e%{username}\u003c/b\u003e","complete_email_not_found":"Jokia paskyra nesutampa su \u003cb\u003e%{email}\u003c/b\u003e","confirm_title":"TÄsti Ä¯ %{site_name}"},"login":{"title":"Prisijungti","username":"Vartotojas","password":"SlaptaÅ¾odis","second_factor_title":"DviejÅ³ veiksmÅ³ autentifikavimas","email_placeholder":"el. paÅ¡tas arba slaptaÅ¾odis","caps_lock_warning":"Ä®jungtas didÅ¾iÅ³jÅ³ raidÅ¾iÅ³ raÅ¡ymas","error":"NeÅ¾inoma klaida","rate_limit":"PraÅ¡ome palaukti prieÅ¡ prisijungiant dar kartÄ.","blank_username_or_password":"PraÅ¡ome Ä¯vesti savo el. paÅ¡tÄ arba slapyvardÄ¯ ir slaptaÅ¾odÄ¯.","reset_password":"Keisti slaptaÅ¾odÄ¯","logging_in":"Prisijungiama...","or":"Arba","authenticating":"Nustatoma tapatybÄ...","awaiting_activation":"Tavo paskyra laukia aktyvacijos. PraÅ¡ome pakartotinai paspausti ant \"PamirÅ¡au slaptaÅ¾odÄ¯\" mygtuko, kad galÄtume iÅ¡siÅ³sti naujÄ el. laiÅ¡kÄ su instrukcijomis.","awaiting_approval":"JÅ«sÅ³ paskyra dar neaktyvuota. Kai tik paskyra bus aktyvuota, atsiÅ³sime jums el. laiÅ¡kÄ.","requires_invite":"AtsipraÅ¡ome, bet prieeiga prie forumo tik su pakvietimais.","not_activated":"JÅ«s dar negalite prisijungti. Jums buvo iÅ¡siÅ³stas el. laiÅ¡kas Ä¯ \u003cb\u003e{{sentTo}}\u003c/b\u003e. PraÅ¡ome laikytis el. laiÅ¡ke nurodytÅ³ instrukcijÅ³.","not_allowed_from_ip_address":"JÅ«s negalite prisijungti iÅ¡ Å¡io IP adreso.","admin_not_allowed_from_ip_address":"Tu negali prisijungti kaip administratorius iÅ¡ Å¡io IP adreso.","resend_activation_email":"Spauskite Äia, kad gautumÄte naujÄ aktyvacijos laiÅ¡kÄ.","resend_title":"PersiÅ³sti patvirtinimo laiÅ¡kÄ","sent_activation_email_again":"Mes jums iÅ¡siunteme dar vienÄ el. laiÅ¡kÄ su aktyvacijos instrucijomis Ä¯ \u003cb\u003e{{currentEmail}}\u003c/b\u003e. PraÅ¡ome palaukti, gali uÅ¾trukti kelias minutes.","to_continue":"PraÅ¡ome prisijungti","preferences":"Turite bÅ«ti prisijungÄs, kad keistumete paskyros nustatymus.","forgot":"Negaliu atsiminti paskyros duomenÅ³.","google_oauth2":{"name":"Google","title":"per Google"},"twitter":{"name":"Twitter","title":"per Twitter"},"instagram":{"name":"Instagram","title":"su Instagram"},"facebook":{"name":"Facebook","title":"per Facebook"},"github":{"name":"GitHub","title":"per GitHub"}},"invites":{"welcome_to":"Sveiki atvykÄ Ä¯ %{site_name}!","invited_by":"Jus pakvietÄ:","accept_invite":"Priimti kvietimÄ","name_label":"Vardas","password_label":"Nustatykite slaptaÅ¾odÄ¯","optional_description":"(pasoronktinai)"},"password_reset":{"continue":"TÄsti Ä¯ %{site_name}"},"emoji_set":{"apple_international":"Apple","google":"Google","twitter":"Twitter","win10":"Win10","google_classic":"Google Classic","facebook_messenger":"Facebook Å½inutÄs"},"category_page_style":{"categories_only":"Tiktai Kategorijos","categories_with_featured_topics":"Kategorijos su populiariomis temomis","categories_and_latest_topics":"Kategorijos su paskutinÄmis temomis","categories_and_top_topics":"Kategorijos ir Top temos"},"shortcut_modifier_key":{"shift":"t","ctrl":"Ctrl","alt":"Alt"},"conditional_loading_section":{"loading":"Kraunasi..."},"select_kit":{"default_header_text":"Pasirinkti...","no_content":"AtitikmenÅ³ nerasta","filter_placeholder":"PaieÅ¡ka...","filter_placeholder_with_any":"IeÅ¡koti arba sukurti...","create":"Sukurti: '{{content}}'","max_content_reached":{"one":"JÅ«s galite pasirinkti{{count}} elementÄ.","few":"JÅ«s galite pasirinkti {{count}} elementus.","many":"JÅ«s galite pasirinkti {{count}}elementus.","other":"JÅ«s galite pasirinkti {{count}} elementus."},"min_content_not_reached":{"one":"Pasirinkite bent {{count}} elementÄ.","few":"Pasirinkite bent {{count}} elementus.","many":"Pasirinkite bent {{count}} elementus.","other":"Pasirinkite bent {{count}} elementus."}},"date_time_picker":{"from":"Nuo","to":"Kam"},"emoji_picker":{"objects":"Objektai","flags":"PaÅ¾ymÄk!","recent":"Neseniai naudoti"},"shared_drafts":{"publish":"Publikuoti pasidalintÄ juodraÅ¡tÄ¯","confirm_publish":"Ar esate tikri, jog norite publikuoti Å¡Ä¯ juodraÅ¡tÄ¯?","publishing":"Publikuojama tema..."},"composer":{"emoji":"Å ypsenÄlÄs :)","more_emoji":"daugiau...","options":"Nustatymai","whisper":"Å¡nabÅ¾desys","unlist":"neÄ¯traukta Ä¯ sÄraÅ¡Ä","blockquote_text":"Blokuoti citatÄ","add_warning":"Tai Oficialus IspÄjimas","toggle_whisper":"Ä®jungti Å nabÅ¾desÄ¯","toggle_unlisted":"PaÅ¾ymeti iÅ¡ saraÅ¡o","posting_not_on_topic":"KuriÄ temÄ nori atsakyti?","saved_local_draft_tip":"iÅ¡saugota lokaliai","similar_topics":"JÅ«sÅ³ tema panaÅ¡i Ä¯...","drafts_offline":"juodraÅ¡Äiai ne ryÅ¡io zonoje","error":{"title_missing":"AntraÅ¡tÄ turi bÅ«ti uÅ¾pildyta","title_too_short":"Tekstas turi bÅ«ti bent {{min}} simboliÅ³ ilgumo","title_too_long":"Tekstas negali bÅ«ti virÅ¡yti {{max}} simboliÅ³","post_length":"Ä®raÅ¡as turi bÅ«ti bent {{min}} simboliÅ³ ilgumo","category_missing":"JÅ«s privalote pasirinkti kategorijÄ","tags_missing":"Privalote pasirinkti bent {{count}} gairÄ"},"save_edit":"IÅ¡saugoti pakeitimus","reply_original":"Atsakyti Ä¯ OriginaliÄ TemÄ","reply_here":"Atsakyti","reply":"Atsakyti","cancel":"AtÅ¡aukti","create_topic":"Sukurti TemÄ","create_pm":"Å½inutÄs","create_whisper":"Gandas","title":"Arba paspauskite Ctrl+Enter","users_placeholder":"PridÄti vartotojÄ","title_placeholder":"ApibÅ«dinkite apie ka bus Å¡i diskusija vienu trumpu sakiniu","title_or_link_placeholder":"Ä®veskite pavadinimÄ, arba Ä¯klijuokite nuorodÄ Äia","edit_reason_placeholder":"kodÄl jÅ«s redaguojate?","reply_placeholder":"Ä®raÅ¡yti Äia. ","view_new_post":"PerÅ¾iÅ«rÄksavo naujÄ Ä¯raÅ¡Ä.","saving":"Saugoma...","saved":"IÅ¡saugota!","uploading":"Ä®keliama...","show_preview":"rodyti perÅ¾iÅ«rÄ \u0026raquo;","hide_preview":"\u0026laquo; slÄpti perÅ¾iÅ«rÄ","quote_post_title":"Cituoti visÄ Ä¯raÅ¡Ä","bold_title":"ParyÅ¡kinimas","bold_text":"paryÅ¡kintas tekstas","italic_title":"Pasvirimas","italic_text":"pasviras tekstas","link_title":"Nuoroda","link_description":"Ä¯veskite Äia nuorodos apraÅ¡ymÄ","link_dialog_title":"Ä®kelti nuorodÄ","link_optional_text":"papildoma antraÅ¡tÄ","quote_title":"Blokuoti citatÄ","quote_text":"Blokuoti citatÄ","code_title":"Tekstas kodui","code_text":"TekstÄ kodui atitraukite per 4 tarpelius ","paste_code_text":"Ä¯veskite arba Äkopijuokite kodÄ Äia","upload_title":"Ä®kelti","upload_description":"Ä¯veskite Äia nuorodos apraÅ¡ymÄ","olist_title":"Sunumeruotas sÄraÅ¡as","ulist_title":"SuÅ¾enklintas sÄraÅ¡as","list_item":"Ä®kelti","help":"Markdown redagavimo pagalba","modal_ok":"OK","modal_cancel":"AtÅ¡aukti","cant_send_pm":"AtsipraÅ¡ome, bet negalite siÅ³sti Å¾inuÄiÅ³ %{username}.","admin_options_title":"Pasirinkti Pinokio komandos nustatymai Å¡iai temai","composer_actions":{"reply":"Atsakyti","draft":"JuodraÅ¡tis","edit":"Redaguoti","reply_to_post":{"label":"Atsakyti Ä¯ %{postNumber} Ä¯raÅ¡Ä, %{postUsername}autoriaus"},"reply_as_private_message":{"label":"Nauja Å¾inutÄ","desc":"Sukurti naujÄ asmeninÄ Å¾inutÄ"},"reply_to_topic":{"label":"Atsakyti Ä¯ temÄ"},"toggle_whisper":{"label":"VisiÅ¡kas gandas","desc":"Gandai matomi tik valdytojams"},"create_topic":{"label":"Nauja tema"},"shared_draft":{"label":"Bendrinami juodraÅ¡Äiai"}},"details_title":"Santrauka","details_text":"Å is tekstas bus paslÄptas"},"notifications":{"tooltip":{"regular":{"one":"%{count} nematytas praneÅ¡imas","few":"{{count}}nematyti praneÅ¡imai","many":"{{count}}nematytÅ³ praneÅ¡imÅ³","other":"{{count}} nematyti praneÅ¡imai"},"message":{"one":"%{count} neskaityta Å¾inutÄ","few":"{{count}}neskaitytos Å¾inutÄs","many":"{{count}}neskaitytÅ³ Å¾inuÄiÅ³","other":"{{count}}neskaitytos Å¾inutÄs"}},"title":"praneÅ¡imai kai paminimas @name , atsakomi tavo Ä¯raÅ¡ai, temos, Å¾inutÄs ir pan.","none":"Å iuo metu neÄ¯manoma pakrauti praneÅ¡imÅ³.","empty":"PraneÅ¡imÅ³ nÄra","mentioned":"\u003cspan\u003e{{username}}\u003c/span\u003e {{description}}","group_mentioned":"\u003cspan\u003e{{username}}\u003c/span\u003e {{description}}","quoted":"\u003cspan\u003e{{username}}\u003c/span\u003e {{description}}","bookmark_reminder":"\u003cspan\u003e{{username}}\u003c/span\u003e {{description}}","replied":"\u003cspan\u003e{{username}}\u003c/span\u003e {{description}}","posted":"\u003cspan\u003e{{username}}\u003c/span\u003e {{description}}","edited":"\u003cspan\u003e{{username}}\u003c/span\u003e {{description}}","liked":"\u003cspan\u003e{{username}}\u003c/span\u003e {{description}}","liked_2":"\u003cspan\u003e{{username}}, {{username2}}\u003c/span\u003e {{description}}","liked_many":{"one":"\u003cspan\u003e{{username}}, {{username2}} ir dar %{count}\u003c/span\u003e {{description}}","few":"\u003cspan\u003e{{username}}, {{username2}}ir {{count}} kiti\u003c/span\u003e {{description}}","many":"\u003cspan\u003e{{username}}, {{username2}} ir {{count}}kitÅ³\u003c/span\u003e {{description}}","other":"\u003cspan\u003e{{username}}, {{username2}} ir {{count}}kitÅ³\u003c/span\u003e {{description}}"},"liked_consolidated":"\u003cspan\u003e{{username}}\u003c/span\u003e {{description}}","private_message":"\u003cspan\u003e{{username}}\u003c/span\u003e {{description}}","invited_to_private_message":"\u003cp\u003e\u003cspan\u003e{{username}}\u003c/span\u003e {{description}}","invited_to_topic":"\u003cspan\u003e{{username}}\u003c/span\u003e {{description}}","invitee_accepted":"\u003cspan\u003e{{username}}\u003c/span\u003e priÄmÄ jÅ«sÅ³ kvietimÄ","moved_post":"\u003cspan\u003e{{username}}\u003c/span\u003e perkeltas {{description}}","linked":"\u003cspan\u003e{{username}}\u003c/span\u003e {{description}}","granted_badge":"Gavote '{{description}}'","topic_reminder":"\u003cspan\u003e{{username}}\u003c/span\u003e {{description}}","watching_first_post":"\u003cspan\u003eNauja tema\u003c/span\u003e {{description}}","group_message_summary":{"one":"{{count}} Å¾inutÄ, jÅ«sÅ³ {{group_name}}pato dÄÅ¾utÄje","few":"{{count}} Å¾inutÄs, jÅ«sÅ³ {{group_name}}pato dÄÅ¾utÄje","many":"{{count}}Å¾inuÄiÅ³, jÅ«sÅ³ {{group_name}} pato dÄÅ¾utÄje","other":"{{count}} Å¾inutÄs, jÅ«sÅ³ {{group_name}} paÅ¡to dÄÅ¾utÄje"},"popup":{"mentioned":"{{username}} paminÄjo tave \"{{topic}}\" - {{site_title}}","group_mentioned":"{{username}} paminÄjo tave \"{{topic}}\" - {{site_title}}","quoted":"{{username}} pacitavo tave \"{{topic}}\" - {{site_title}}","replied":"{{username}} atsakÄ tau \"{{topic}}\" - {{site_title}}","posted":"{{username}} paskelbÄ \"{{topic}}\" - {{site_title}}","private_message":"{{username}} atsiuntÄ privaÄiÄ Å¾inutÄ \"{{topic}}\" - {{site_title}}","linked":"{{username}} panaudojo tavo Ä¯raÅ¡Ä \"{{topic}}\" - {{site_title}}","confirm_title":"PraneÅ¡imai Ä¯galinti - %{site_title}","confirm_body":"Pavyko! PraneÅ¡imai buvo Ä¯galinti."},"titles":{"watching_first_post":"nauja tema"}},"upload_selector":{"title":"PridÄti nuotraukÄ","title_with_attachments":"PridÄti nautraukÄ arba dokumentÄ","from_my_computer":"IÅ¡ Ä¯renginio","from_the_web":"IÅ¡ narÅ¡yklÄs","remote_tip":"nuoroda Ä¯ nuotraukÄ","remote_tip_with_attachments":"nuoroda Ä¯ nuotraukÄ ar failÄ {{authorized_extensions}}","local_tip":"Pasirinkti nuotraukas iÅ¡ Ä¯renginio","local_tip_with_attachments":"pasirinkti nuotraukas ar failus iÅ¡ Ä¯renginio {{authorized_extensions}}","hint":"(taip pat gali perstumti ir Ä¯mesti Ä¯ redagavimo skydÄ)","hint_for_supported_browsers":"gali perstumti, numesti ir kopijuoti nuotraukas Ä¯ redagavimo skydÄ","uploading":"Ä®keliama","select_file":"Pasirinkti failus","default_image_alt_text":"pveikslÄlis"},"search":{"sort_by":"RÅ«Å¡iuoti pagal","relevance":"Tinkamumas","latest_post":"Paskutiniai Ä¯raÅ¡ai","latest_topic":"Naujausios temos","most_viewed":"Labiausiai Å½iÅ«rimos","most_liked":"Labiausiai MÄgstamos","select_all":"PaÅ¾ymÄti visus","clear_all":"IÅ¡trinti viskÄ","too_short":"JÅ«sÅ³ paieÅ¡kos frazÄ, per trumpa.","result_count":{"one":"\u003cspan\u003e%{count} rezultatas iÅ¡\u003c/span\u003e\u003cspan class='term'\u003e{{term}}\u003c/span\u003e","few":"\u003cspan\u003e{{count}}{{plus}}rezultatÅ³ iÅ¡\u003c/span\u003e\u003cspan class='term'\u003e{{term}}\u003c/span\u003e","many":"\u003cspan\u003e{{count}}{{plus}} rezultatai iÅ¡\u003c/span\u003e\u003cspan class='term'\u003e{{term}}\u003c/span\u003e","other":"\u003cspan\u003e{{count}}{{plus}} rezultatai iÅ¡ \u003c/span\u003e\u003cspan class='term'\u003e{{term}}\u003c/span\u003e"},"title":"temÅ³, Ä¯raÅ¡Å³, vartotojÅ³ ar kategorijÅ³ paieÅ¡ka","full_page_title":"ieÅ¡koti temÅ³ arba Ä¯raÅ¡Å³","no_results":"Nerasta jokiÅ³ rezultatÅ³.","no_more_results":"Nerasta jokiÅ³ rezultatÅ³.","searching":"IeÅ¡koma...","post_format":"#{{post_number}} nuo {{username}}","results_page":"PaieÅ¡kos rezultatai ir '{{term}}'","start_new_topic":"GalbÅ«t pradÄkite naujÄ temÄ?","search_google_button":"Google","search_google_title":"IeÅ¡koti Å¡ioje svetainÄje","context":{"user":"IeÅ¡koti Ä¯raÅ¡Å³ nuo @{{username}}","category":"IeÅ¡koti #{{category}}kategorijoje","topic":"IeÅ¡koti Å¡ioje temoje","private_messages":"IeÅ¡koti Å¾inuÄiÅ³"},"advanced":{"title":"IÅ¡plÄstinÄ paieÅ¡ka","posted_by":{"label":"PaskelbÄ"},"in_category":{"label":"Kategorija"},"in_group":{"label":"GrupÄje"},"with_badge":{"label":"Su Å½enkleliu"},"with_tags":{"label":"PaÅ¾ymÄtas"},"filters":{"likes":"Man patiko","watching":"AÅ¡ stebiu","tracking":"AÅ¡ seku","private":"Mano Å¾inutÄse","bookmarks":"AÅ¡ iÅ¡saugojes","pinned":"yra prisegtas","unpinned":"neprisegtas","seen":"AÅ¡ skaitau","unseen":"AÅ¡ neskaitau","wiki":"yra wiki","images":"Ä®traukti nuotraukÄ(as)"},"statuses":{"label":"Kur temos","open":"atvira","closed":"uÅ¾daryta","archived":"archyvuota","noreplies":"neturi atsakymÅ³"},"post":{"time":{"label":"Paskelbta","before":"anksÄiau","after":"po to"}}}},"hamburger_menu":"Eiti Ä¯ kitÄ temÅ³ sÄraÅ¡Ä ar kategorijÄ","new_item":"Nauja","go_back":"grÄ¯Å¾ti atgal","not_logged_in_user":"Vartotojo puslapis su veiksmÅ³ ir nustatymÅ³ apraÅ¡ymu","current_user":"eitÄ¯ i savo vartotojo puslapÄ¯","topics":{"new_messages_marker":"paskutinis apsilankymas","bulk":{"select_all":"Pasirinkti viskÄ","clear_all":"IÅ¡valyti viskÄ","unlist_topics":"AtÅ¾ymÄti temas","reset_read":"Atkurti, kaip perskaityta","delete":"IÅ¡trinti temas","dismiss":"Praleisti","dismiss_read":"Praleisti visas neperskaitytas","dismiss_button":"Praleisti...","dismiss_tooltip":"Praleisti tik naujus Ä¯raÅ¡us ar nebesekti temos","also_dismiss_topics":"Nebesekti Å¡iÅ³ temÅ³, kad jos niekada nebÅ«tÅ³ rodomos, kaip neperskaitytos","dismiss_new":"Praleisti Naujas","toggle":"perjungti temÅ³ pasirinkimus","actions":"Veiksmai","change_category":"Nustatyti kategorijÄ","close_topics":"UÅ¾daryti temas","archive_topics":"Archyvuoti temas","notification_level":"PraneÅ¡imai","choose_new_category":"Pasirinkti naujÄ kategorijÄ temoms:","selected":{"one":"JÅ«s pasirinkote \u003cb\u003e{{count}}\u003c/b\u003e temÄ.","few":"JÅ«s pasirinkote \u003cb\u003e{{count}}\u003c/b\u003e temas.","many":"JÅ«s pasirinkote \u003cb\u003e{{count}}\u003c/b\u003e temÅ³.","other":"JÅ«s pasirinkote \u003cb\u003e{{count}}\u003c/b\u003e temÅ³."}},"none":{"unread":"JÅ«s neturite neperskaitytÅ³ temÅ³.","new":"JÅ«s neturite naujÅ³ temÅ³.","read":"JÅ«s dar neperskaitÄte jokiÅ³ temÅ³.","posted":"JÅ«s dar neraÅ¡Äte jokiose temose.","latest":"NÄra jokiÅ³ paskutiniÅ³ temÅ³. Tai liÅ«dina.","bookmarks":"JÅ«s dar neturite paÅ¾ymÄtÅ³ temÅ³.","category":"NÄra jokiÅ³ temÅ³ kategorijoje {{category}}.","top":"NÄra jokiÅ³ TOP temÅ³."},"bottom":{"latest":"Daugiau nÄra jokiÅ³ naujausiÅ³ temÅ³.","posted":"Daugiau nÄra jokiÅ³ paskelbtÅ³ temÅ³.","read":"Daugiau nÄra jokiÅ³ perskaitytÅ³ temÅ³.","new":"Daugiau nÄra jokiÅ³ naujÅ³ temÅ³.","unread":"Daugiau nÄra jokiÅ³ neperskaitytÅ³ temÅ³.","category":"Daugiau nÄra jokiÅ³ temÅ³ kategorijoje {{category}}.","top":"Daugiau nÄra jokiÅ³ populiariÅ³ temÅ³.","bookmarks":"Daugiau paÅ¾ymÄtÅ³ temÅ³ nÄra"}},"topic":{"filter_to":{"one":"temoje %{count} Ä¯raÅ¡as","few":"temoje {{count}} Ä¯raÅ¡ai","many":"teoje {{count}} Ä¯raÅ¡Å³","other":"temoje {{count}} Ä¯raÅ¡ai"},"create":"Nauja Tema","create_long":"Sukurti naujÄ temÄ","open_draft":"Atviras juodraÅ¡tis","private_message":"RaÅ¡yti Å¾inutÄ","archive_message":{"help":"Perkelti Å¾inutes Ä¯ archyvÄ","title":"Archyvuoti"},"move_to_inbox":{"title":"Perkelti Ä¯ PraneÅ¡imÅ³ dÄÅ¾utÄ","help":"Perkelti Å¾inutes atgal Ä¯ PraneÅ¡imÅ³ dÄÅ¾utÄ"},"edit_message":{"title":"Redaguoti Å¾inutÄ"},"defer":{"title":"AtidÄti"},"list":"Temos","new":"nauja tema","unread":"Neperskaitytos","new_topics":{"one":"{{count}} nauja tema","few":"{{count}} naujos temos","many":"{{count}} naujÅ³ temÅ³","other":"{{count}} naujÅ³ temÅ³"},"unread_topics":{"one":"{{count}} neperskaityta tema","few":"{{count}} neperskaitytos temos","many":"{{count}} neperskaitytÅ³ temÅ³","other":"{{count}} neperskaitytÅ³ temÅ³"},"title":"Tema","invalid_access":{"title":"Tema yra privati","description":"AtsipraÅ¡ome, bet jÅ«s neturite teisiÅ³ Å¡iai temai!","login_required":"Jums reikia prisijungti, norint perÅ¾iÅ«rÄti Å¡iÄ temÄ."},"server_error":{"title":"Nepavyko uÅ¾krauti temos","description":"AtsipraÅ¡ome, Ä¯vyko klaida. PraÅ¡ome pameginti vÄl po keliÅ³ minuÄiÅ³. Jei problema pasikartos, praÅ¡ome mums praneÅ¡ti"},"not_found":{"title":"Tema nerasta","description":"AtsipraÅ¡ome, bet mes negalÄjome rasti jÅ«sÅ³ temos. Gal ji buvo iÅ¡trinta moderatoriaus?"},"total_unread_posts":{"one":"Å¡ioje temoje turi %{count} neperskaitytÄ Ä¯raÅ¡Ä","few":"Å¡ioje temoje tu turi {{count}} neperskaitytÅ³ Ä¯raÅ¡Å³","many":"Å¡ioje temoje tu turi {{count}} neperskaitytÅ³ Ä¯raÅ¡Å³","other":"Å¡ioje temoje tu turi {{count}} neperskaitytÅ³ Ä¯raÅ¡Å³"},"unread_posts":{"one":"Å¡ioje temoje tu turi %{count} neperskaitytÄ senÄ Ä¯raÅ¡Ä","few":"Å¡ioje temoje tu turi {{count}} neperskaitytÅ³ senÅ³ Ä¯raÅ¡Å³","many":"Å¡ioje temoje tu turi {{count}} neperskaitytÅ³ senÅ³ Ä¯raÅ¡Å³","other":"Å¡ioje temoje tu turi {{count}} neperskaitytÅ³ senÅ³ Ä¯raÅ¡Å³"},"new_posts":{"one":"Å¡ioje temoje yra %{count} naujas Ä¯raÅ¡as nuo paskutinio tavo skaitymo","few":"Å¡ioje temoje yra {{count}} naujÅ³ Ä¯raÅ¡Å³ nuo paskutinio tavo skaitymo","many":"Å¡ioje temoje yra {{count}} naujÅ³ Ä¯raÅ¡Å³ nuo paskutinio tavo skaitymo","other":"Å¡ioje temoje yra {{count}} naujÅ³ Ä¯raÅ¡Å³ nuo paskutinio tavo skaitymo"},"likes":{"one":"Å iuo metu temÄ mÄgsta %{count} vartotojas","few":"Å iuo metu temÄ mÄgsta {{count}} vartotojÅ³","many":"Å iuo metu temÄ mÄgsta {{count}} vartotojÅ³","other":"Å iuo metu temÄ mÄgsta {{count}} vartotojÅ³"},"back_to_list":"GrÄ¯Å¾ti Ä¯ temÅ³ sÄraÅ¡Ä","options":"Nustatymai","show_links":"Rodyti Å¡ios temos nuorodas","toggle_information":"perjungti temos detales","read_more_in_category":"Nori skaityti daugiau? IeÅ¡kok kitÅ³ temÅ³ {{catLink}} arba {{latestLink}}.","read_more":"Norite skaityti daugiau? {{catLink}} arba {{latestLink}}.","browse_all_categories":"Å½iÅ«rÄkite visas kategorijas","view_latest_topics":"perÅ¾iÅ«rÄkite paskutines temas","suggest_create_topic":"KodÄl gi nesukÅ«rus naujos temos?","jump_reply_up":"Pereiti Ä¯ ankstesnÄ¯ atsakymÄ","jump_reply_down":"PereitÄ¯ Ä¯ sekantÄ¯ atsakymÄ","deleted":"Tema buvo iÅ¡trinta","topic_status_update":{"title":"Temos laikmatis","save":"Nustatyti laikmatÄ¯","num_of_hours":"ValandÅ³ kiekis:","remove":"PaÅ¡alinti laikmatÄ¯","publish_to":"Publikuoki Ä¯:","when":"Kada:","public_timer_types":"Temos laikmaÄiai"},"auto_update_input":{"later_today":"Å iandien vÄliau","tomorrow":"Rytoj","later_this_week":"Å ia savaitÄ vÄliau","this_weekend":"Å Ä¯ savaitgalÄ¯","next_week":"KitÄ savaitÄ","two_weeks":"Dvi savaitÄs","next_month":"KitÄ mÄnesÄ¯","three_months":"Trys mÄnesiai","six_months":"PusÄ metÅ³","one_year":"Metai","forever":"Am-inai","pick_date_and_time":"Pasirinkite datÄ ir laikÄ"},"temp_open":{"title":"Laikinai atidaryti"},"temp_close":{"title":"Laikinai u-daryti"},"auto_close":{"error":"PraÅ¡ome Ä¯raÅ¡yti tinkamÄ reikÅ¡mÄ.","based_on_last_post":"NeiÅ¡jungti kol paskutinis Ä¯raÅ¡as temoje nebus tokio senumo."},"reminder":{"title":"Man priminti"},"status_update_notice":{"auto_open":"Å i tema automatiÅ¡kai atsidarys po %{timeLeft} .","auto_close":"Å i tema automatiÅ¡kai uÅ¾sidarys po %{timeLeft}.","auto_close_based_on_last_post":"Å i tema uÅ¾sidarys po %{duration} po paskutinio atsakymo."},"auto_close_title":"Automatinio uÅ¾darymo nustatymai","timeline":{"back":"Atgal","replies_short":"%{current} / %{total}"},"progress":{"title":"temos progresas","go_top":"eiti Ä¯ virÅ¡Å³","go_bottom":"eiti Ä¯ apaÄiÄ","go":"eiti","jump_bottom":"Pereiti Ä¯ sekantÄ¯ Ä¯raÅ¡Ä","jump_prompt":"perÅ¡okti Ä¯...","jump_prompt_of":"iÅ¡ %{count} Ä¯raÅ¡Å³","jump_bottom_with_number":"pereiti Ä¯ Ä¯raÅ¡Ä %{post_number}","jump_prompt_or":"arba","total":"visi Ä¯raÅ¡ai","current":"Dabartinis Ä¯raÅ¡as"},"notifications":{"reasons":{"3_6":"Gausite praneÅ¡imus nes Stebite Å¡iÄ kategorijÄ.","3_5":"Gausite praneÅ¡imus, nes pradÄjote StebÄti Å¡iÄ temÄ.","3_2":"Gausite praneÅ¡imus, nes Stebite Å¡iÄ temÄ.","3_1":"Gausite praneÅ¡imus, nes sukÅ«rÄte Å¡iÄ temÄ.","3":"Gausite praneÅ¡imus, nes Stebite Å¡iÄ temÄ.","1_2":"BÅ«si perspÄtas kai kaÅ¾kas paminÄs tavo @vardÄ ar tau atsakys.","1":"BÅ«si perspÄtas kai kaÅ¾kas paminÄs tavo @vardÄ ar tau atsakys.","0_7":"JÅ«s ignoruojate visus Å¡ios temos praneÅ¡imus","0_2":"JÅ«s ignoruojate visus praneÅ¡imus Å¡ioje temoje.","0":"JÅ«s ignoruojate visus praneÅ¡imus Å¡ioje temoje."},"watching_pm":{"title":"Stebimos","description":"BÅ«site perspÄtas dÄl kiekvieno naujo atsakymo Å¡ioje Å¾inutÄje."},"watching":{"title":"Stebimos","description":"BÅ«site perspÄtas dÄl kiekvieno naujo atsakymo Å¡ioje temoje."},"tracking_pm":{"title":"Sekamos","description":"Bus rodomas Å¡ios Å¾inutÄs naujÅ³ atsakymÅ³ skaiÄius. BÅ«si perspÄtas kai kaÅ¾kas paminÄs tavo @vardÄ ar tau atsakys."},"tracking":{"title":"Sekamos","description":"Bus rodomas Å¡ios temos naujÅ³ atsakymÅ³ skaiÄius. BÅ«si perspÄtas kai kaÅ¾kas paminÄs tavo @vardÄ ar tau atsakys."},"regular":{"title":"Ä®prastas","description":"BÅ«si perspÄtas kai kaÅ¾kas paminÄs tavo @vardÄ ar tau atsakys."},"regular_pm":{"title":"Ä®prastas","description":"BÅ«si perspÄtas kai kaÅ¾kas paminÄs tavo @vardÄ ar tau atsakys."},"muted_pm":{"title":"Nutyldita","description":"Tau nebus siunÄiami praneÅ¡imai susijÄ su Å¡ia Å¾inute."},"muted":{"title":"Nutildytos","description":"Tau nebus siunÄiami praneÅ¡imai susijÄ su Å¡ia Å¾inute."}},"actions":{"title":"Veiksmai","recover":"Atstatyti iÅ¡trintÄ TemÄ","delete":"IÅ¡trinti temÄ","open":"Atidaryti temÄ","close":"UÅ¾daryti temÄ","multi_select":"Pasirinkti Ä®raÅ¡ai...","pin":"Prisegti TemÄ...","unpin":"Atsegti TemÄ...","unarchive":"Atstatyti archyvuotÄ Tema","archive":"Archyvuoti temÄ","invisible":"IÅ¡imti iÅ¡ SÄraÅ¡o","visible":"Ä®kelti Ä¯ SÄraÅ¡Ä","reset_read":"Atkurti Perskaitymo Duomenis"},"feature":{"pin":"Prisegti TemÄ","unpin":"Atsegti TemÄ","pin_globally":"Prisegti TemÄ Globaliai","make_banner":"ParyÅ¡kinta Tema","remove_banner":"IÅ¡jungti ParyÅ¡kintÄ TemÄ"},"reply":{"title":"Atsakyti","help":"PradÄk raÅ¡yti atsakymÄ Ä¯ Å¡iÄ temÄ"},"clear_pin":{"title":"IÅ¡strinti PrisegimÄ","help":"IÅ¡trinti PrisegimÄ Å¡ioje temoje, kad tema daugiau nebÅ«tÅ³ rodoma virÅ¡uje."},"share":{"title":"Pasidalinti","help":"Pasidalink Å¡ios temos nuoroda"},"print":{"title":"Spausdinti","help":"Atverti spausdinimui draugiÅ¡kÄ Å¡ios temos versijÄ"},"flag_topic":{"title":"UÅ¾dÄk vÄliavÄ","help":"UÅ¾dÄk temai vÄliavÄ privaÄiai arba iÅ¡siÅ³sk privatÅ³ praneÅ¡imÄ apie tai","success_message":"Tu sÄkmingai uÅ¾dÄjai temai vÄliavÄ."},"feature_topic":{"title":"Charakterizuok Å¡iÄ temÄ","pin":"Nustatyk Å¡iÄ temÄ, kad laikytÅ³si kategorijos {{categoryLink}} virÅ¡uje","confirm_pin":"Tu jau turi {{count}} prisegtÅ³ temÅ³. Per daug prisegtÅ³ temÅ³ gali atstumti anoniminius ir naujus vartotojus. Ar esi tikras, jog nori prisegti Å¡iÄ temÄ?","unpin":"PaÅ¡alink Å¡iÄ temÄ iÅ¡ {{categoryLink}} kategorijos sÄraÅ¡o virÅ¡aus.","unpin_until":"PaÅ¡alinti temÄ iÅ¡ {{categoryLink}} kategorijos virÅ¡aus arba palaukti iki \u003cstrong\u003e%{until}\u003c/strong\u003e.","pin_note":"Vartotojai gali Atsegti temÄ nuo virÅ¡aus individualiai sau.","pin_validation":"Terminas reikalauja Prisegti Å¡iÄ temÄ.","not_pinned":"{{categoryLink}} nÄra prisegtÅ³ temÅ³ ","already_pinned":{"one":"Tema prisegta Å¡ioje kategorijoje {{categoryLink}}: \u003cstrong class='badge badge-notification unread'\u003e%{count}\u003c/strong\u003e","few":"Prisegtos temos Å¡ioje kategorijoje {{categoryLink}}: \u003cstrong class='badge badge-notification unread'\u003e{{count}}\u003c/strong\u003e","many":"Prisegtos temos Å¡ioje kategorijoje {{categoryLink}}: \u003cstrong class='badge badge-notification unread'\u003e{{count}}\u003c/strong\u003e","other":"Prisegtos temos Å¡ioje kategorijoje {{categoryLink}}: \u003cstrong class='badge badge-notification unread'\u003e{{count}}\u003c/strong\u003e"},"pin_globally":"IÅ¡kelti temÄ virÅ¡ visÅ³ kitÅ³ temÅ³ sÄraÅ¡o iki ","confirm_pin_globally":"JÅ«s jau turite {{count}} globaliai Prisegtas temas. Per daug prisegtÅ³ temÅ³ gali atbaidyti naujus ir anoniminius vartotojus. Ar tikrai to norite?","unpin_globally":"PaÅ¡alinti Å¡iÄ temÄ iÅ¡ visÅ³ temÅ³ sÄraÅ¡o virÅ¡aus.","unpin_globally_until":"PaÅ¡alinti temÄ iÅ¡ visÅ³ temÅ³ sÄraÅ¡o virÅ¡aus arba palaukti iki \u003cstrong\u003e%{until}\u003c/strong\u003e.","global_pin_note":"Vartotojai gali Atsegti temÄ nuo sÄraÅ¡o virÅ¡aus individualiai.","not_pinned_globally":"NÄra jokiÅ³ globaliai PrisegtÅ³ temÅ³.","already_pinned_globally":{"one":"Å iuo metu globaliai prisegta tema: \u003cstrong class='badge badge-notification unread'\u003e%{count}\u003c/strong\u003e","few":"Å iuo metu globaliai Prisegtos temos: \u003cstrong class='badge badge-notification unread'\u003e{{count}}\u003c/strong\u003e","many":"Å iuo metu globaliai Prisegtos temos: \u003cstrong class='badge badge-notification unread'\u003e{{count}}\u003c/strong\u003e","other":"Å iuo metu globaliai Prisegtos temos: \u003cstrong class='badge badge-notification unread'\u003e{{count}}\u003c/strong\u003e"},"make_banner":"ParyÅ¡kink Å¡iÄ temÄ, kad ji atsidurtÅ³ visÅ³ puslapiÅ³ sÄraÅ¡o virÅ¡uje.","remove_banner":"PaÅ¡alinti paryÅ¡kintÄ temÄ, kuri yra visÅ³ puslapiÅ³ virÅ¡uje.","banner_note":"Vartotojai gali uÅ¾daryti paryÅ¡kiuntÄ temÄ. Tik viena tema gali bÅ«ti paryÅ¡kinta tam tikru metu","no_banner_exists":"Å iuo metu nÄra jokiÅ³ ParyÅ¡kintÅ³ (baneriniÅ³) temÅ³","banner_exists":"Å iuo metu \u003cstrong class='badge badge-notification unread'\u003eyra\u003c/strong\u003e ParyÅ¡kinta tema."},"inviting":"KvieÄiama...","invite_private":{"title":"Pakviesti Ä¯ Å½inutÄ","email_or_username":"KviÄiamojo el. paÅ¡tas arba slapyvardis","email_or_username_placeholder":"el. paÅ¡tas arba slapyvardis","action":"Kviesti","success":"Mes pakvietÄme vartotojÄ atsakyti Ä¯ Å¡iÄ Å¾inutÄ.","error":"AtsipraÅ¡ome, Ä¯vyko klaida pakvieÄiant vartotojÄ.","group_name":"grupÄs pavadinimas"},"controls":"TemÅ³ Nustatymai","invite_reply":{"title":"Pakviesti","username_placeholder":"Slapyvardis","action":"SiÅ³sti pakvietimÄ","help":"pakviesk kitus Ä¯ Å¡iÄ temÄ el. laiÅ¡ku ar praneÅ¡imu","to_forum":"Mes iÅ¡siÅ³sime trumpÄ el. laiÅ¡kÄ leidÅ¾iantÄ¯ tavo draugui iÅ¡ karto prisijungti tiesiog paspaudÅ¾iant nuorodÄ. Jokia registracija nebÅ«tina.","sso_enabled":"Ä®veskite vartotojo vardÄ Å¾mogaus, kurÄ¯ norite pakviesti Ä¯ Å¡iÄ temÄ.","to_topic_blank":"Ä®raÅ¡ykite vartotojo vardÄ ar el. paÅ¡tÄ Å¾mogaus, kurÄ¯ norite pakviesti Ä¯ Å¡iÄ temÄ.","to_topic_email":"El. paÅ¡tas Ä¯vestas. Mes iÅ¡siÅ³sime trumpÄ el. laiÅ¡kÄ, kuris suteiks galimybÄ iÅ¡ karto atsakyti Ä¯ temÄ.","to_topic_username":"Vartotojo vardas Ä¯vestas. Mes iÅ¡siÅ³sime praneÅ¡imÄ su nuoroda Ä¯ Å¡iÄ temÄ.","to_username":"Ä®veskite vartotojo vardÄ Å¾mogaus, kurÄ¯ norite pakviesti. Mes iÅ¡siÅ³sime praneÅ¡ima su nuoroda Ä¯ Å¡iÄ temÄ.","email_placeholder":"vardas@pavizdys.lt","success_email":"Mes iÅ¡siuntÄme pakvietimÄ Ä¯ \u003cb\u003e{{emailOrUsername}}\u003c/b\u003e. Mes praneÅ¡ime, kai pakvietimas bus patvirtintas. StebÄk pakvietimÅ³ kortelÄ savo paskyroje, kad Å¾inotum pakvietimo statusÄ.","success_username":"Vartotojas buvo pakviestas dalyvauti temoje.","error":"AtsipraÅ¡ome, taÄiau nepavyko pakviesti Å¡io Å¾mogaus. Gal bÅ«t jis jau buvo pakviestas?"},"login_reply":"Prisijunk, kad atsakytum","filters":{"n_posts":{"one":"%{count} Ä¯raÅ¡as","few":"{{count}} Ä¯raÅ¡ai","many":"{{count}}Ä¯raÅ¡Å³","other":"{{count}}Ä¯raÅ¡ai"},"cancel":"IÅ¡jungti filtrus"},"split_topic":{"title":"Perkelti Ä¯ naujÄ temÄ","action":"perkelti Ä¯ naujÄ temÄ","radio_label":"Nauja tema","error":"Ä®vyko klaida perkeliant Ä¯raÅ¡us Ä¯ naujÄ temÄ.","instructions":{"one":"JÅ«s tuoj sukursite naujÄ temÄ ir Ä¯kesite Ä¯raÅ¡Ä, kurÄ¯ paÅ¾ymÄjote.","few":"JÅ«s tuoj sukursite naujÄ temÄ ir Ä¯kesite \u003cb\u003e{{count}}\u003c/b\u003e Ä¯raÅ¡us, kuriuos paÅ¾ymÄjote.","many":"JÅ«s tuoj sukursite naujÄ temÄ ir Ä¯kesite \u003cb\u003e{{count}}\u003c/b\u003e Ä¯raÅ¡us, kuriuos paÅ¾ymÄjote.","other":"JÅ«s tuoj sukursite naujÄ temÄ ir Ä¯kesite \u003cb\u003e{{count}}\u003c/b\u003e Ä¯raÅ¡us, kuriuos paÅ¾ymÄjote."}},"merge_topic":{"title":"Perkelti Ä¯ esamÄ temÄ","action":"perkelti Ä¯ esamÄ temÄ","error":"Ä®vyko klaida perkeliant Ä¯raÅ¡us Ä¯ Å¡iÄ temÄ.","instructions":{"one":"PraÅ¡ome pasirinkti temÄ, Ä¯ kuriÄ norÄtumÄte perkelti Å¡Ä¯ Ä¯raÅ¡Ä.","few":"PraÅ¡ome pasirinkti temÄ, Ä¯ kuriÄ norÄtumÄte perkelti Å¡iuos \u003cb\u003e{{count}}\u003c/b\u003e Ä¯raÅ¡us.","many":"PraÅ¡ome pasirinkti temÄ, Ä¯ kuriÄ norÄtumÄte perkelti Å¡iuos \u003cb\u003e{{count}}\u003c/b\u003e Ä¯raÅ¡us.","other":"PraÅ¡ome pasirinkti temÄ, Ä¯ kuriÄ norÄtumÄte perkelti Å¡iuos \u003cb\u003e{{count}}\u003c/b\u003e Ä¯raÅ¡us."}},"move_to_new_message":{"radio_label":"Nauja Å¾inutÄ"},"merge_posts":{"title":"Sulieti pasirinktus Ä¯raÅ¡us","action":"sulieti pasirinktus Ä¯raÅ¡us"},"change_owner":{"action":"pakeisti valdymo teises","error":"Ä®vyko klaida keiÄiant Ä¯raÅ¡Å³ valdymo teisÄ.","placeholder":"naujojo valdytojo vartotojo vardas"},"change_timestamp":{"action":"pakeisti laiko formatÄ","invalid_timestamp":"Laiko formatas negali bÅ«ti ateityje.","error":"Ä®vyko klaida keiÄiant Å¡ios temos laiko formatÄ.","instructions":"PraÅ¡ome Ä¯vesti naujÄ Å¡ios temos laiko formatÄ. Visi Å¡ios temos Ä¯raÅ¡ai bus atnaujinti pagal nustatytÄ datÄ."},"multi_select":{"select":"pasirinkti","selected":"pasirinkta ({{count}})","select_post":{"label":"pasirinkti","title":"PridÄti Ä¯raÅ¡Ä prie pasirinktÅ³"},"selected_post":{"label":"pasirinktas","title":"Spustelk kad paÅ¡alinti Ä¯raÅ¡Ä iÅ¡ pasirinktÅ³"},"select_replies":{"label":"pasirink +atsakyti"},"select_below":{"label":"pasirink +Å¾emiau"},"delete":"iÅ¡trinti pasirinktus","cancel":"atÅ¡aukti pasirinkimus","select_all":"paÅ¾ymÄti visus","deselect_all":"nieko nepasirinkti","description":{"one":"JÅ«s pasirinkote \u003cb\u003e%{count}\u003c/b\u003e Ä¯raÅ¡Ä.","few":"JÅ«s pasirinkote \u003cb\u003e{{count}}\u003c/b\u003e Ä¯raÅ¡us.","many":"JÅ«s pasirinkote \u003cb\u003e{{count}}\u003c/b\u003e Ä¯raÅ¡us.","other":"JÅ«s pasirinkote \u003cb\u003e{{count}}\u003c/b\u003e Ä¯raÅ¡us."}}},"post":{"quote_reply":"Citata","edit_reason":"PrieÅ¾astis:","post_number":"Ä¯raÅ¡as {{number}}","wiki_last_edited_on":"wiki paskutinÄ¯ kartÄ redaguota ","last_edited_on":"Ä¯raÅ¡as paskutinÄ¯ kartÄ atnaujintas","reply_as_new_topic":"Atsakyti naujoje temoje","continue_discussion":"TÄsiama {{postLink}} diskusija:","follow_quote":"eiti Ä¯ cituotÄ Ä¯raÅ¡Ä","show_full":"Rodyti PilnÄ Ä®raÅ¡Ä","deleted_by_author":{"one":"(autoriaus iÅ¡imtas Ä¯raÅ¡as automatiÅ¡kai bus iÅ¡trintas per %{count} valandÄ, nebent turÄjo vÄliavÄ)","few":"(autoriaus iÅ¡imtas Ä¯raÅ¡as automatiÅ¡kai bus iÅ¡trintas per %{count} valandas, nebent turÄjo vÄliavÄ)","many":"(autoriaus iÅ¡imtas Ä¯raÅ¡as automatiÅ¡kai bus iÅ¡trintas per %{count} valandas, nebent turÄjo vÄliavÄ)","other":"(autoriaus iÅ¡imtas Ä¯raÅ¡as automatiÅ¡kai bus iÅ¡trintas per %{count} valandas, nebent turÄjo vÄliavÄ)"},"expand_collapse":"iÅ¡skleisti/suskleisti","gap":{"one":"PerÅ¾iÅ«rÄti %{count} paslÄptÄ atsakymÄ","few":"perÅ¾iÅ«rÄti {{count}} paslÄptus atsakymus","many":"perÅ¾iÅ«rÄti {{count}} paslÄptus atsakymus","other":"perÅ¾iÅ«rÄti {{count}} paslÄptus atsakymus"},"unread":"Ä®raÅ¡as yra neperskaitytas","has_replies":{"one":"{{count}} Atsakymas","few":"{{count}} Atsakymai","many":"{{count}} Atsakymai","other":"{{count}} Atsakymai"},"has_likes_title":{"one":"%{count} Å¾mogui patiko Å¡is Ä¯raÅ¡as","few":"{{count}} Å¾monÄms patinka Å¡is Ä¯raÅ¡as","many":"{{count}} Å¾monÄms patinka Å¡is Ä¯raÅ¡as","other":"{{count}} Å¾monÄms patinka Å¡is Ä¯raÅ¡as"},"has_likes_title_only_you":"tau patiko Å¡is Ä¯raÅ¡as","has_likes_title_you":{"one":"tau ir %{count} Å¾mogui patiko Å¡is Ä¯raÅ¡as","few":"tau ir {{count}} Å¾monÄms patiko Å¡is Ä¯raÅ¡as","many":"tau ir {{count}} Å¾monÄms patiko Å¡is Ä¯raÅ¡as","other":"tau ir {{count}} Å¾monÄms patiko Å¡is Ä¯raÅ¡as"},"errors":{"create":"AtsipraÅ¡ome, Ä¯vyko klaida kuriant Ä¯raÅ¡Ä. PraÅ¡ome pamÄginti dar kartÄ.","edit":"AtsipraÅ¡ome, Ä¯vyko klaida redaguojant Ä¯raÅ¡Ä. PraÅ¡ome pamÄginti dar kartÄ.","upload":"AtsipraÅ¡ome, Ä¯vyko klaida Ä¯keliant Å¡Ä¯ dokumentÄ. PraÅ¡ome pamÄginti dar kartÄ.","too_many_uploads":"AtsipraÅ¡ome, bet jÅ«s galite Ä¯kelti tik vienÄ failÄ vienu metu.","image_upload_not_allowed_for_new_user":"AtsipraÅ¡ome, bet nauji vartotojai negali Ä¯kelti nuotraukÅ³.","attachment_upload_not_allowed_for_new_user":"AtsipraÅ¡ome, bet nauji vartotojai negali Ä¯kelti priedÅ³.","attachment_download_requires_login":"AtsipraÅ¡ome, bet jÅ«s turite bÅ«ti prisijungÄs, kad galÄtumÄt atsisiÅ³sti priedus."},"abandon_edit":{"no_value":"Ne, palikti"},"abandon":{"confirm":"Ar tikrai norite atÅ¡aukti savo Ä¯raÅ¡Ä?","no_value":"Ne, palikti","yes_value":"Taip, atÅ¡aukti"},"via_email":"Å is Ä¯raÅ¡as buvo gautas per el. paÅ¡tÄ","whisper":"Å is Ä¯raÅ¡as yra privatus Å¡nabÅ¾desys moderatoriams","wiki":{"about":"Å¡is Ä¯raÅ¡as yra wiki"},"archetypes":{"save":"IÅ¡saugoti nustatymus"},"controls":{"reply":"PradÄk raÅ¡yti atsakymÄ Å¡iam Ä¯raÅ¡ui","like":"Ä¯raÅ¡as man patinka","has_liked":"tau patinka Å¡is Ä¯raÅ¡as","undo_like":"nepatinka","edit":"redaguoti Ä¯raÅ¡Ä","edit_action":"Redaguoti","edit_anonymous":"Apgailestaujame, bet jÅ«s turite bÅ«ti prisijungÄs, kad redaguotumÄte Å¡Ä¯ Ä¯raÅ¡Ä.","flag":"UÅ¾dÄk Ä¯raÅ¡ui privaÄiÄ vÄliavÄ arba iÅ¡siÅ³sk privatÅ³ praneÅ¡imÄ","delete":"iÅ¡trinti Ä¯raÅ¡Ä","undelete":"anuliuoti Ä¯raÅ¡o iÅ¡trinimÄ","share":"pasidalinti nuoroda Ä¯ Å¡Ä¯ Ä¯raÅ¡Ä","more":"Daugiau","delete_replies":{"direct_replies":{"one":"Taip, ir %{count} tiesioginÄ¯ atsakymÄ","few":"Taip, ir {{count}}tiesioginius atsakymus","many":"Taip, ir {{count}}tiesioginiÅ³ atsakymÅ³","other":"Taip, ir {{count}} tiesioginius atsakymus"},"all_replies":{"one":"Taip, ir %{count} atsakymÄ","few":"Taip, ir visus {{count}} atsakymus","many":"Taip, ir visus {{count}}atsakymÅ³","other":"Taip, ir visus {{count}} atsakymus"},"just_the_post":"Ne, tik Å¡Ä¯ Ä¯raÅ¡Ä"},"admin":"Ä¯raÅ¡o administravimas","wiki":"Sukurti Wiki","unwiki":"IÅ¡trinti Wiki","convert_to_moderator":"PridÄk Komandos spalvÄ","revert_to_regular":"PaÅ¡alink Komandos spalvÄ","rebake":"Perkurti HTML","unhide":"Panaikinti slÄpimo bÅ«sena","change_owner":"Pakeisti ValdytojÄ","grant_badge":"Suteikti Å¾enklelÄ¯","lock_post":"UÅ¾rakinti Ä¯raÅ¡Ä","unlock_post":"Atrakinti Ä¯raÅ¡Ä","delete_topic":"iÅ¡trinti temÄ"},"actions":{"flag":"UÅ¾dÄk vÄliavÄ","undo":{"off_topic":"Nuimti vÄliavÄ","spam":"Nuimti vÄliavÄ","inappropriate":"Nuimti vÄliavÄ","bookmark":"Anuliuoti Å¾ymÄ","like":"Anuliuoti Patinka"},"people":{"spam":"paÅ¾ymÄtas kaip Å¡lamÅ¡tas","like_capped":{"one":"ir {{count}}kitas mÄgsta tai","few":"ir {{count}}kitÅ³ mÄgsta tai","many":"ir {{count}}kitÅ³ mÄgsta tai ","other":"ir {{count}} kitÅ³ mÄgsta tai"}},"by_you":{"off_topic":"Tu paÅ¾ymÄjai tai kaip \"ne Ä¯ temÄ\".","spam":"Tu paÅ¾ymÄjai tai, kaip Å¡iukÅ¡lÄ","inappropriate":"Tu paÅ¾ymÄjai tai, kaip nepriimtinÄ","notify_moderators":"Tu pasiÅ«lei moderavimÄ.","notify_user":"JÅ«s iÅ¡siuntÄt Å¾inutÄ Å¡iam vartotojui","bookmark":"JÅ«s uÅ¾dÄjot Å¾ymÄ ant Å¡io Ä¯raÅ¡o","like":"JÅ«s tai mÄgstate"}},"revisions":{"controls":{"first":"Pirmoji perÅ¾iÅ«ra","previous":"PrieÅ¡ tai buvusi perÅ¾iÅ«ra","next":"Sekanti perÅ¾iÅ«ra","last":"PaskutinÄ perÅ¾iÅ«ra","hide":"SlÄpti perÅ¾iÅ«ras","show":"Rodyti perÅ¾iÅ«ras","edit_wiki":"Redaguoti Wiki","edit_post":"Redaguoti Ä®raÅ¡Ä"},"displays":{"inline":{"title":"Rodyti suteiktas paslaugas su priedais ir panaikinimais","button":"HTML"},"side_by_side":{"title":"Rodyti suteiktas paslaugas su tarpusavio skirtumais","button":"HTML"},"side_by_side_markdown":{"title":"Rodyti pirminÄ¯ Å¡altinÄ¯ su tarpusavio skirtumais"}}},"raw_email":{"displays":{"text_part":{"button":"Tekstas"},"html_part":{"button":"HTML"}}},"bookmarks":{"created":"Sukurta","name":"Vardas"}},"category":{"can":"galimas\u0026hellip;","none":"(jokia kategorija)","all":"Visos kategorijos","choose":"category\u0026hellip;","edit":"Redaguoti","view":"PerÅ¾iÅ«rÄti temas kategorijoje","general":"Bendriniai","settings":"Nustatymai","topic_template":"Temos Å¡ablonas","tags":"Å½ymos","delete":"IÅ¡trinti kategorijÄ","create":"Nauja Kategorija","create_long":"Sukurti naujÄ kategorijÄ","save":"IÅ¡saugoti kategorijÄ","slug":"Kategorijos Stabdis","slug_placeholder":"(Pasirinktinai) brÅ«kÅ¡niniai Å¾odÅ¾iai skirti URL","creation_error":"Ä®vyko klaida kuriant kategorijÄ.","save_error":"Ä®vyko klaida iÅ¡saugant kategorijÄ.","name":"Kategorijos pavadinimas","description":"ApraÅ¡ymas","topic":"kategorijos tema","logo":"Kategorijos logotipo paveiksliukas","background_image":"Kategorijos fono paveiksliukas","badge_colors":"Å½enkliukÅ³ spalvos","background_color":"Fono spalva","foreground_color":"Priekinio plano spalva","name_placeholder":"Daugiausiai vienas arba du Å¾odÅ¾iai","color_placeholder":"Bet kokia internetinÄ spalva","delete_confirm":"Ar tikrai norite iÅ¡trinti Å¡iÄ kategorijÄ?","delete_error":"Ä®vyko klaida iÅ¡trinant kategorijÄ.","list":"Visos kategorijos","no_description":"PraÅ¡ome pridÄti apraÅ¡ymÄ Å¡iai kategorijai.","change_in_category_topic":"Redaguoti apraÅ¡yma","already_used":"Å i spalva jau priskirta prie kitos kategorijos","security":"Saugumo","special_warning":"Ä®spÄjimas: Å i kategorija yra iÅ¡ anksto numatyta kategorija ir saugumo nustatymai negali bÅ«ti keiÄiami. Jeigu nenorite naudoti Å¡ios kategorijos, iÅ¡trinkie jÄ vietoj pakartotino naudojimo.","images":"Paveiksliukai","email_in":" papildomas naujas el. paÅ¡to adresas:","email_in_allow_strangers":"Gauti el. laiÅ¡kus iÅ¡ anoniminiÅ³ paskyrÅ³ neturinÄiÅ³ vartotojÅ³ ","email_in_disabled":"NaujÅ³ temÅ³ kÅ«rimas per el. paÅ¡tÄ yra negalimas Puslapio Nustatymuose. Jei nori skelbti naujas temas per el. paÅ¡tÄ,","email_in_disabled_click":"nustatykite \"email in\" nustatymus.","sort_order":"TemÅ³ sÄrasÄ rÅ«Å¡iuoti oagal\"","allow_badges_label":"Leisti trofÄjÅ³ apdovanojimus Å¡ioje kategorijoje","edit_permissions":"Redaguoti leidimus","review_group_name":"grupÄs pavadinimas","this_year":"Å¡iais metais","default_position":"Numatyta pozicija","position_disabled":"Kategorijos bus rodomos pagal aktyvumÄ. Tam, kad nustatytum kategorijÅ³ rodymo tvarkÄ,","position_disabled_click":"nueik Ä¯ \"fixed category positions\" nustatymus.","parent":"TÄvinÄ kategorijÄ","notifications":{"watching":{"title":"Stebimos"},"watching_first_post":{"title":"Stebiu pirmÄ Ä¯raÅ¡Ä"},"tracking":{"title":"Sekamos"},"regular":{"title":"Ä®prastas","description":"BÅ«si perspÄtas kai kaÅ¾kas paminÄs tavo @vardÄ ar tau atsakys."},"muted":{"title":"Nutildytos","description":"Tau nebus siunÄiami praneÅ¡imai susijÄ su Å¡ia kategorijos tema."}},"search_priority":{"options":{"normal":"Ä®prastas","ignore":"Ignoruoti"}},"sort_options":{"default":"numatytasis","likes":"MÄgsta","views":"PerÅ¾iÅ«ros","posts":"Ä¯raÅ¡ai","activity":"Veikla","posters":"Komentatoriai","category":"Kategorija","created":"Sukurta"},"subcategory_list_styles":{"boxes":"DÄÅ¾utÄs","boxes_with_featured_topics":"DÄÅ¾utÄs su iÅ¡skirtinÄm temom"},"settings_sections":{"general":"Bendrieji","moderation":"Moderavimas","email":"EpaÅ¡tas"}},"flagging":{"title":"AÄiÅ«, kad padedi padedi iÅ¡laikyti forumÄ civilizuotu!","action":"UÅ¾dÄti Ä®raÅ¡ui VÄliavÄ","take_action":"Imtis VeiksmÅ³","notify_action":"Å½inutÄs","official_warning":"Oficialus Ä¯spÄjimas","delete_spammer":"IÅ¡trinti VartotojÄ","yes_delete_spammer":"Taip, iÅ¡trinti Å¡Ä¯ kenkÄjÄ","ip_address_missing":"(N/A)","hidden_email_address":"(paslÄptas)","submit_tooltip":"Patvirtinti privaÄiÄ vÄliavÄ","take_action_tooltip":"Prieiti prie vÄliavÅ³ ribos tuoj pat, o ne laukti daugiau vartotojÅ³ vÄliavÅ³","cant":"Apgailestaujame, taÄiau Å¡iuo metu negalite uÅ¾dÄti Å¡iam Ä¯raÅ¡ui vÄliavos. ","notify_staff":"Ä®spÄti moderatorius privaÄiai","formatted_name":{"off_topic":"Tai yra ne Ä¯ temÄ","inappropriate":"Tai yra nepriimtina","spam":"Tai yra Å¡iukÅ¡lÄ"},"custom_placeholder_notify_user":"Buk konkretesnis, buk konstruktyvus ir visada bÅ«k malonus.","custom_placeholder_notify_moderators":"Leiskite mums suÅ¾inoti kuo bÅ«tent esate susirÅ«pinÄs. Pateikite nuorodas ir pavyzdÅ¾ius jei tik Ä¯manoma.","custom_message":{"at_least":{"one":"Ä¯veskite bent jau %{count} simbolÄ¯","few":"Ä¯veskite bent jau {{count}} simbolius","many":"Ä¯veskite bent jau {{count}}simboliÅ³","other":"Ä¯veskite bent jau {{count}}simbolius"},"more":{"one":"liko %{count}...","few":"liko {{count}}...","many":"liko {{count}}...","other":"liko {{count}}..."}}},"flagging_topic":{"title":"AÄiÅ«, kad padedi padedi iÅ¡laikyti forumÄ civilizuotu!","action":"Temos su vÄliavomis","notify_action":"Å½inutÄs"},"topic_map":{"title":"Temos ApraÅ¡ymas","participants_title":"DaÅ¾ni Poster'iai","links_title":"Populiarios nuorodos","links_shown":"rodyti daugiau nuorodÅ³...","clicks":{"one":"%{count} paspaudimas","few":"%{count} paspaudimai","many":"%{count} paspaudimÅ³","other":"%{count} paspaudimÅ³"}},"post_links":{"title":{"one":"%{count} daugiau","few":"%{count}daugiau","many":"%{count}daugiau","other":"%{count}daugiau"}},"topic_statuses":{"warning":{"help":"Tai Oficialus IspÄjimas"},"bookmarked":{"help":"JÅ«s uÅ¾dÄjot Å¾ymÄ ant Å¡ios temos"},"locked":{"help":"Å i tema yra uÅ¾daryta, todÄl joje nebegalima raÅ¡yti"},"archived":{"help":"Å i tema yra archyvuota, todÄl jos negalima keisti"},"locked_and_archived":{"help":"Å i tema yra uÅ¾daryta, todÄl joje nebegalima raÅ¡yti"},"unpinned":{"title":"Atsegta","help":"Å i tema yra AtÅ¾ymÄta tik tau. Ji bus rodoma normalia tvarka."},"pinned_globally":{"title":"Prisegta globaliai","help":"Å i tema yra globaliai Prisegta. Ji bus rodoma kategorijÅ³ sÄraÅ¡o virÅ¡uje."},"pinned":{"title":"Prisegta","help":"Å i tema yra PaÅ¾ymÄta tik tau. Ji bus rodoma sÄraÅ¡o kategorijos sÄraÅ¡o virÅ¡uje."},"unlisted":{"help":"Å i tema yra iÅ¡imta iÅ¡ sÄraÅ¡o. Ji daugiau nebebus rodoma temÅ³ sÄraÅ¡e ir jÄ galima pasiekti tik su tiesiogine nuoroda."}},"posts":"Ä®raÅ¡ai","posts_long":"Å iuo metu yra {{number}} Ä¯raÅ¡Å³ Å¡ioje temoje","original_post":"Originalus Ä¯raÅ¡as","views":"PerÅ¾iÅ«ros","views_lowercase":{"one":"perÅ¾iÅ«ra","few":"perÅ¾iÅ«ros","many":"perÅ¾iÅ«ros","other":"perÅ¾iÅ«ros"},"replies":"Atsakymai","views_long":{"one":"Å¡i tema buvo perÅ¾iÅ«rÄta %{count} kartÄ","few":"Å¡i tema buvo perÅ¾iÅ«rÄta {{number}} kartus","many":"Å¡i tema buvo perÅ¾iÅ«rÄta {{number}}kartÅ³","other":"Å¡i tema buvo perÅ¾iÅ«rÄta {{number}} kartus"},"activity":"Aktyvumas","likes":"Patikimai","likes_lowercase":{"one":"patikimas","few":"patikimai","many":"patikimai","other":"patikimai"},"likes_long":"Å iuo metu temoje yra {{number}} PatikimÅ³","users":"Vartotojai","users_lowercase":{"one":"vartotojas","few":"vartotojai","many":"vartotojai","other":"vartotojai"},"category_title":"Kategorija","history":"Istorija","changed_by":"pagal {{author}}","raw_email":{"title":"Ä®einantis paÅ¡tas","not_available":"NÄra galimybiÅ³!"},"categories_list":"KategorijÅ³ sÄraÅ¡as","filters":{"with_topics":"%{filter} temos","with_category":"%{filter} %{category} temos","latest":{"title":"PaskutinÄs","title_with_count":{"one":"Paskutinis (%{count})","few":"PaskutinÄs ({{count}})","many":"PaskutinÄs ({{count}})","other":"PaskutinÄs ({{count}})"},"help":"temos su paskutiniais Ä¯raÅ¡ais"},"read":{"title":"Perskaityti","help":"Temos, kurias perskaitei, pagal paskutiniÅ³ perskaitytÅ³ temÅ³ tvarkÄ"},"categories":{"title":"Kategorijos","title_in":"Kategorija - {{categoryName}}","help":"Visos temos sugrupuotos pagal kategorijÄ"},"unread":{"title":"Neperskaitytos","title_with_count":{"one":"Neperskaitytas (%{count})","few":"Neperskaitytos ({{count}})","many":"Neperskaitytos ({{count}})","other":"Neperskaitytos ({{count}})"},"help":"temos, kurias stebide ar sekate su neperskaitytais Ä¯raÅ¡ais","lower_title_with_count":{"one":"%{count} neperskaitytas","few":"{{count}} neperskaitytÅ³","many":"{{count}} neperskaitytÅ³","other":"{{count}} neperskaitytÅ³"}},"new":{"lower_title_with_count":{"one":"%{count} nauja","few":"{{count}} nauji","many":"{{count}} nauji","other":"{{count}} nauji"},"lower_title":"Nauja","title":"Naujos","title_with_count":{"one":"Naujas (%{count})","few":"Naujos ({{count}})","many":"Naujos ({{count}})","other":"Naujos ({{count}})"},"help":"Per paskutines dienas sukurtos temos"},"posted":{"title":"Mano Ä®raÅ¡ai","help":"temos, kuriose yra tavo Ä¯raÅ¡as"},"bookmarks":{"title":"Å½ymÄs","help":"Temos, kurias paÅ¾ymÄjai"},"category":{"title":"{{categoryName}}","title_with_count":{"one":"{{categoryName}} (%{count})","few":"{{categoryName}} ({{count}})","many":"{{categoryName}} ({{count}})","other":"{{categoryName}} ({{count}})"},"help":"paskutinÄs temos kategorijoje {{categoryName}} "},"top":{"title":"Populiarios","help":"paÄios aktyviausios temos paskutiniaisiais metais, mÄnesÄ¯, savaitÄ ar dienÄ","all":{"title":"Per visÄ laikÄ"},"yearly":{"title":"Kasmet"},"quarterly":{"title":"Kas ketvirtÄ¯"},"monthly":{"title":"Kas mÄnesÄ¯"},"weekly":{"title":"Kas savaitÄ"},"daily":{"title":"Kasdien"},"all_time":"Per visÄ laikÄ","this_year":"Metai","this_quarter":"Per ketvirtÄ¯","this_month":"Per mÄnesÄ¯","this_week":"Per savaitÄ","today":"Å andien","other_periods":"skaityk TOP"}},"permission_types":{"full":"Kurti / Atsakyti / PerÅ¾iÅ«rÄti","create_post":"Atsakyti / PerÅ¾iÅ«rÄti","readonly":"PerÅ¾iÅ«rÄti"},"lightbox":{"download":"atsisiÅ³sti"},"keyboard_shortcuts_help":{"title":"KlaviatÅ«ros trumpiniai","jump_to":{"title":"PerÅ¡okti Ä¯","home":"%{shortcut} PradinÄ¯","latest":"%{shortcut} Naujasi","new":"%{shortcut} Nauji","unread":"%{shortcut} Neperskaityti","categories":"%{shortcut} Kategorijos","top":"%{shortcut} Top","bookmarks":"%{shortcut} IÅ¡saugoti","profile":"%{shortcut} Profilis","messages":"%{shortcut} Å½inutÄs","drafts":"%{shortcut} JuodraÅ¡Äiai"},"navigation":{"title":"Navigacija","jump":"%{shortcut}Eiti Ä¯ Ä¯rÅ¡Ä#","back":"%{shortcut} Atgal","up_down":"%{shortcut} Perkelti pasirinkimus \u0026uarr; \u0026darr;","open":"%{shortcut} Atidaryti paÅ¾ymetÄ temÄ","next_prev":"%{shortcut} Kitas/sekantis skyrius"},"application":{"title":"Aplikacija","create":"%{shortcut} Sukurti naujÄ temÄ","notifications":"Atidaryti praneÅ¡imus","hamburger_menu":"%{shortcut} Atidaryti pagrindinÄ¯ meniu","user_profile_menu":"%{shortcut} Atidaryti vartotojo meniu","show_incoming_updated_topics":"%{shortcut} Rodyti atnaujintas temas","help":"%{shortcut} Atidaryti klavieturos pagalbÄ","dismiss_new_posts":"%{shortcut} Praleisti Naujas/Å½inutes","dismiss_topics":"%{shortcut} Praleisti Temas","log_out":"%{shortcut} Atsijungti"},"actions":{"title":"Veiksmai","bookmark_topic":"%{shortcut} Perjungti paÅ¾ymÄtÄ temÄ","pin_unpin_topic":"%{shortcut} Prisegti temÄ","share_topic":"%{shortcut} Pasidalinti tema","share_post":"%{shortcut} Pasidalinti praneÅ¡imu","reply_as_new_topic":"%{shortcut} Atsakyti naujoje temoje","reply_topic":"%{shortcut} Atsakyti Ä¯ temÄ","reply_post":"%{shortcut} Atsakyti Ä¯ praneÅ¡imÄ","quote_post":"%{shortcut} Cituoti Ä¯raÅ¡Ä","like":"%{shortcut} PamÄgti praneÅ¡imÄ","flag":"%{shortcut} PaÅ¾ymÄti praneÅ¡imÄ","bookmark":"%{shortcut} PridÄti praneÅ¡imÄ prie Å¾ymiÅ³","edit":"%{shortcut} Redaguoti praneÅ¡imÄ","delete":"%{shortcut} IÅ¡trinti praneÅ¡imÄ","mark_muted":"%{shortcut} Nutildyti praneÅ¡imÄ","mark_regular":"%{shortcut} NuolatinÄs (default) temos","mark_tracking":"%{shortcut} Sekti temÄ","mark_watching":"%{shortcut} StebÄti temÄ"}},"badges":{"title":"Å½enkleliai","badge_count":{"one":"%{count} _enklelis","few":"%{count}Å½enkleliai","many":"%{count} Å½enkleliÅ³","other":"%{count}Å½enkleliai"},"more_badges":{"one":"+%{count} Daugiau","few":"+%{count}Daugiau","many":"+%{count}Daugiau","other":"+%{count}Daugiau"},"select_badge_for_title":"Pasirinkti trofÄjÅ³ ir naudoti, kaip antraÅ¡tÄ","none":"(nieko)","badge_grouping":{"getting_started":{"name":"PradÅ¾ia"},"community":{"name":"BendruomenÄ"},"trust_level":{"name":"Patikimumo lygis"},"other":{"name":"Kita"},"posting":{"name":"Publikuojama"}}},"tagging":{"all_tags":"Visos Å¾ymos","other_tags":"Kitos Å¾ymos","selector_all_tags":"visos Å¾ymos","selector_no_tags":"nÄra Å¾ymÅ³","tags":"Å½ymos","add_synonyms":"PridÄti","delete_tag":"IÅ¡trinti Å¾ymÄ","rename_tag":"Pervadinti Å¾ymÄ","sort_by":"RÅ«Å¡iuoti pagal:","sort_by_count":"skaiÄiÅ³","sort_by_name":"vardÄ","cancel_delete_unused":"AtÅ¡aukti","filters":{"without_category":"%{filter}%{tag} temos","with_category":"%{filter}%{tag}temos, %{category}kategorijoje"},"notifications":{"watching":{"title":"Stebiu"},"watching_first_post":{"title":"Stebiu pirmÄ Ä¯raÅ¡Ä"},"tracking":{"title":"Seku"},"regular":{"title":"NuolatinÄs"},"muted":{"title":"Nutildyta"}},"groups":{"title":"Å½ymos grupÄs","new":"Nauja grupÄ","tags_label":"Å½ymos Å¡ioje grupÄje","parent_tag_label":"PanaÅ¡ios Å¾ymos:","parent_tag_placeholder":"Pasirinktinai","new_name":"Nauja Å¾ymos grupÄ","save":"Saugoti","delete":"PaÅ¡alinti"},"topics":{"none":{"unread":"JÅ«s neturite neperskaitytÅ³ temÅ³.","new":"JÅ«s neturite naujÅ³ temÅ³.","read":"JÅ«s dar neperskaitÄte jokiÅ³ temÅ³.","posted":"JÅ«s dar neraÅ¡Äte jokiose temose.","bookmarks":"JÅ«s dar neturite paÅ¾ymÄtÅ³ temÅ³.","top":"NÄra jokiÅ³ TOP temÅ³."},"bottom":{"latest":"Daugiau nÄra jokiÅ³ naujausiÅ³ temÅ³.","posted":"Daugiau nÄra jokiÅ³ paskelbtÅ³ temÅ³.","read":"Daugiau nÄra jokiÅ³ perskaitytÅ³ temÅ³.","new":"Daugiau nÄra jokiÅ³ naujÅ³ temÅ³.","unread":"Daugiau nÄra jokiÅ³ neperskaitytÅ³ temÅ³.","top":"Daugiau nÄra jokiÅ³ populiariÅ³ temÅ³.","bookmarks":"Daugiau paÅ¾ymÄtÅ³ temÅ³ nÄra"}}},"invite":{"custom_message_placeholder":"Ä®veskite savo pasirinktinÄ Å¾inutÄ","custom_message_template_forum":"Labas, uÅ¾siregistruok ir tu!\nÄia bus vienas geriausiÅ³ forumÅ³..."},"poll":{"voters":{"one":"balsuotojas","few":"balsuotojai","many":"balsuotojÅ³","other":"balsuotojÅ³"},"total_votes":{"one":"balsas iÅ¡ viso","few":"balsai iÅ¡ viso","many":"balsÅ³ iÅ¡ viso","other":"balsÅ³ iÅ¡ viso"},"average_rating":"Vidutinis reitingas: \u003cstrong\u003e%{average}\u003c/strong\u003e.","cast-votes":{"title":"ApskaiÄiuoti tavo balsus","label":"Balsuoti dabar!"},"show-results":{"title":"Rodyti balsavimo rezultatus","label":"Rodyti rezultatus"},"hide-results":{"title":"GrÄ¯Å¾ti Ä¯ balsavimus"},"export-results":{"label":"Eksportuoti"},"open":{"title":"Atidaryti balsavimÄ","label":"Atidaryti","confirm":"Ar tikrai norite atidaryti Å¡Ä¯ balsavimÄ?"},"close":{"title":"UÅ¾daryti balsavimÄ","label":"UÅ¾daryti","confirm":"Ar tikrai norite uÅ¾daryti Å¡Ä¯ balsavimÄ?"},"ui_builder":{"poll_type":{"label":"Tipas"},"poll_result":{"label":"Rezultatai"}}},"discourse_narrative_bot":{"welcome_post_type":{"new_user_track":"PradÄkite naujÄ naudotojo mokymÄ visiems naujiems vartotojams","welcome_message":"SiÅ³skite visiems naujiems vartotojams sveikinimo praneÅ¡imÄ su greitu pradÅ¾ios vadovu"}},"discourse_local_dates":{"create":{"form":{"insert":"Ä®terpti","advanced_mode":"IÅ¡plÄstinis reÅ¾imas","simple_mode":"Paprastas reÅ¾imas","timezones_title":"Rodyti laiko zonas","recurring_title":"Pasikartojimas","recurring_none":"NÄra pasikartojimo","invalid_date":"Netinkama data, Ä¯sitikinkite, kad data ir laikas yra teisingi","date_title":"Data","time_title":"Laikas","format_title":"Datos formatas"}}},"details":{"title":"PaslÄpti detales"},"presence":{"replying":"atsakoma","editing":"redaguojama"},"voting":{"vote_title":"Balsuoti","voting_closed_title":"UÅ¾daryta"},"adplugin":{"advertisement_label":"REKLAMA"}}},"zh_CN":{"js":{"dates":{"time_short_day":"ddd, HH:mm","long_no_year":"M[æ]D[æ¥] HH:mm","medium_with_ago":{"x_months":{"other":"%{count} ä¸ªæå"},"x_years":{"other":"%{count} å¹´å"}}},"share":{"email":"éè¿çµå­é®ä»¶åäº«æ­¤é¾æ¥"},"action_codes":{"forwarded":"è½¬åä¸è¿°é®ä»¶"},"topic_admin_menu":"ç®¡çä¸»é¢","themes":{"broken_theme_alert":"å ä¸ºä¸»é¢æç»ä»¶%{theme}æéè¯¯ï¼ä½ çç½ç«å¯è½æ æ³æ­£å¸¸è¿è¡ã å¨%{path}ç¦ç¨å®ã"},"s3":{"regions":{"ca_central_1":"å æ¿å¤§ï¼ä¸­é¨ï¼","cn_northwest_1":"ä¸­å½ï¼å®å¤ï¼","eu_north_1":"æ¬§æ´²ï¼æ¯å¾·å¥å°æ©ï¼","sa_east_1":"åç¾ï¼å£ä¿ç½ï¼","us_gov_east_1":"AWS æ¿åºäºï¼US-Eastï¼","us_gov_west_1":"AWS æ¿åºäºï¼US-Westï¼"}},"go_ahead":"ç»§ç»­","conduct":"è¡ä¸ºåå","every_month":"æ¯æ","every_six_months":"æ¯6ä¸ªæ","related_messages":{"see_all":"æ¥çæ¥èª @%{username} ç\u003ca href=\"%{path}\"\u003eæææ¶æ¯\u003c/a\u003e ..."},"bookmarked":{"help":{"unbookmark_with_reminder":"ç¹å»ä»¥ç§»é¤è¯¥ä¸»é¢ä¸çæææ¶èåæéãä½ å¨è¯¥ä¸»é¢ä¸­è®¾å®äºä¸ä¸ªäº%{reminder_at}çæéã"}},"bookmarks":{"not_bookmarked":"æ¶èæ­¤å¸","created_with_reminder":"ä½ å·²ç»æ¶èè¯¥å¸å¹¶ä¸è®¾å®äºä¸ä¸ªäº%{date}çæé","created_with_at_desktop_reminder":"ä½ ææ¶èçæ­¤å¸å°ä¼å¨ä½ ä¸æ¬¡ä½¿ç¨æ¡é¢è®¾å¤æ¶è¢«æéã","delete":"å é¤æ¶è","confirm_delete":"ä½ ç¡®å®è¦å é¤è¯¥æ¶èåï¼ä½ æè®¾ç½®çæéä¹ä¼è¢«ä¸å¹¶å é¤ã","confirm_clear":"ä½ ç¡®å®è¦æ¸ç©ºè¿ä¸ªä¸»é¢ä¸­çæææ¶èï¼","no_timezone":"ä½ å°æªè®¾ç½®æ¶åºãæ¨å°æ æ³è®¾ç½®æéãå¨ \u003ca href=\"%{basePath}/my/preferences/profile\"\u003eä½ çä¸ªäººèµæä¸­\u003c/a\u003eè®¾ç½®ã","invalid_custom_datetime":"ä½ ææä¾çæ¥æåæ¶é´æ æï¼è¯·éè¯ã","list_permission_denied":"ä½ æ²¡ææéæ¥çè¯¥ç¨æ·çæ¶èã","reminders":{"at_desktop":"ä¸æ¬¡æä½¿ç¨æ¡é¢è®¾å¤æ¶","next_business_day":"ä¸ä¸ä¸ªå·¥ä½æ¥","start_of_next_business_week":"ä¸å¨ä¸","custom":"èªå®ä¹æ¥æåæ¶é´","last_custom":"æè¿","none":"æ éæé","today_with_time":"ä»å¤©%{time}","tomorrow_with_time":"æå¤©%{time}","at_time":"äº%{date_time}","existing_reminder":"ä½ ä¸ºè¯¥æ¶èæè®¾å®çæéå°è¢«ååº"}},"drafts":{"abandon":{"confirm":"ä½ å·²å¨æ­¤ä¸»é¢ä¸­æå¼äºå¦ä¸ä¸ªèç¨¿ã ä½ ç¡®å®è¦èå¼å®åï¼"}},"topic_count_latest":{"other":"æ {{count}} ä¸ªæ´æ°ææ°ä¸»é¢"},"topic_count_unread":{"other":"æ {{count}} ä¸ªæªè¯»ä¸»é¢"},"uploading_filename":"ä¸ä¼ ä¸­ï¼{{filename}}...","clipboard":"åªè´´æ¿","pwa":{"install_banner":"ä½ æ³è¦\u003ca href\u003eå®è£%{title}å¨æ­¤è®¾å¤ä¸åï¼\u003c/a\u003e"},"choose_topic":{"title":{"search":"æç´¢ä¸»é¢","placeholder":"å¨æ­¤å¤è¾å¥ä¸»é¢æ é¢ãURL æ ID"}},"choose_message":{"title":{"search":"æç´¢ç§ä¿¡","placeholder":"å¨æ­¤å¤è¾å¥ç§ä¿¡çæ é¢ãURLæID"}},"review":{"order_by":"æåºä¾æ®","in_reply_to":"åå¤ç»","explain":{"why":"è§£éä¸ºä»ä¹è¯¥é¡¹ç®æç»è¿å¥éå","title":"éå®¡æ ¸è¯å","formula":"å¬å¼","subtotal":"å°è®¡","min_score_visibility":"å¯è§çæä½åæ°","score_to_hide":"éèå¸å­çåæ°","take_action_bonus":{"name":"ç«å³æ§è¡","title":"å½å·¥ä½äººåéæ©éåè¡å¨æ¶ï¼ä¼ç»æ è®°å åã"},"user_accuracy_bonus":{"name":"ç¨æ·åç¡®æ§","title":"ååå·²åæå¶æ è®°çç¨æ·å°è·å¾å¥å±ã"},"trust_level_bonus":{"name":"ä¿¡ä»»ç­çº§","title":"å¾å®¡éé¡¹ç®ç±è¾é«ä¿¡ä»»çº§å«ä¸å·æè¾é«åæ°çç¨æ·åå»ºçã"},"type_bonus":{"name":"å¥å±ç±»å","title":"æäºå¯å®¡æ ¸ç±»åå¯ä»¥ç±ç®¡çäººåå æï¼ä»¥ä½¿å¶å·ææ´é«çä¼åçº§ã"}},"claim_help":{"optional":"ä½ å¯ä»¥è®¤é¢æ­¤æ¡ç®ä»¥é¿åè¢«ä»äººå®¡æ ¸ã","required":"å¨ä½ å®¡æ ¸ä¹åä½ å¿é¡»è®¤é¢æ­¤æ¡ç®ã","claimed_by_you":"ä½ å·²è®¤é¢æ­¤æ¡ç®ç°å¨å¯ä»¥å®¡æ ¸äºã","claimed_by_other":"æ­¤æ¡ç®ä»å¯è¢«\u003cb\u003e{{username}}\u003c/b\u003eå®¡æ ¸ã"},"claim":{"title":"è®¤é¢è¯¥ä¸»é¢"},"unclaim":{"help":"ç§»é¤è¯¥è®¤é¢"},"awaiting_approval":"éè¦å®¡æ ¸","settings":{"saved":"å·²ä¿å­ï¼","priorities":{"title":"éå®¡æ ¸ä¼åçº§"}},"view_all":"æ¥çå¨é¨","grouped_by_topic":"ä¾æ®ä¸»é¢åç»","none":"æ²¡æé¡¹ç®éè¦å®¡æ ¸","view_pending":"æ¥çå¾å®¡æ ¸","topic_has_pending":{"other":"è¯¥ä¸»é¢ä¸­æ \u003cb\u003e{{count}}\u003c/b\u003e ä¸ªå¸ç­å¾å®¡æ ¸ä¸­"},"title":"å®¡æ ¸","filtered_topic":"æ¨æ­£å¨éæ©æ§å°æ¥çè¿ä¸ä¸»é¢ä¸­çå¯å®¡æ ¸åå®¹ã","show_all_topics":"æ¾ç¤ºææä¸»é¢","deleted_post":"(å·²å é¤çå¸å­)","deleted_user":"(å·²å é¤çç¨æ·)","user":{"bio":"ç®ä»","website":"ç½ç«","fields":"å­æ®µ"},"user_percentage":{"summary":{"other":"{{agreed}}ï¼{{disagreed}}ï¼{{ignored}}ï¼å±{{count}}ä¸ªæ è®°ï¼"},"agreed":{"other":"{{count}}%åæ"},"disagreed":{"other":"{{count}}%ä¸åæ"},"ignored":{"other":"{{count}}%å¿½ç¥"}},"topics":{"reviewable_count":"è®¡æ°","reported_by":"æ¥åäºº","deleted":"[å·²å é¤çä¸»é¢]","original":"ï¼åä¸»é¢ï¼","unique_users":{"other":"{{count}} ä½ç¨æ·"}},"replies":{"other":"{{count}} ä¸ªåå¤"},"new_topic":"æ¹åæ­¤æ¡ç®å°ä¼åå»ºä¸ä¸ªæ°çä¸»é¢","filters":{"all_categories":"ï¼ææåç±»ï¼","type":{"all":"(å¨é¨ç±»å)"},"minimum_score":"æä½åï¼","status":"ç¶æ","orders":{"priority":"ä¼åçº§","priority_asc":"ä¼åçº§ï¼ååºï¼","created_at":"åå»ºæ¶é´","created_at_asc":"åå»ºæ¶é´ï¼ååºï¼"},"priority":{"title":"æä½ä¼åçº§","low":"ï¼ææï¼","medium":"ä¸­","high":"é«"}},"conversation":{"view_full":"æ¥çå®æ´å¯¹è¯"},"scores":{"about":"è¯¥åæ°æ¯æ ¹æ®æ¥åèçä¿¡ä»»ç­çº§ãè¯¥ç¨æ·ä»¥å¾ä¸¾æ¥çåç¡®æ§ä»¥åè¢«ä¸¾æ¥æ¡ç®çä¼åçº§è®¡ç®å¾åºçã","score":"è¯å","status":"ç¶æ","submitted_by":"æäº¤äºº","reviewed_by":"å®¡æ ¸è"},"statuses":{"approved":{"title":"å·²æ¹å"},"ignored":{"title":"å¿½ç¥"},"deleted":{"title":"å·²å é¤"},"reviewed":{"title":"ï¼ææå·²å®¡æ ¸ï¼"},"all":{"title":"ï¼å¨é¨ï¼"}},"types":{"reviewable_flagged_post":{"title":"è¢«æ è®°çå¸å­","flagged_by":"æ è®°è"},"reviewable_queued_topic":{"title":"éåä¸­å°ä¸»é¢"},"reviewable_queued_post":{"title":"éåä¸­çå¸å­"}},"approval":{"pending_posts":{"other":"ä½ æ \u003cstrong\u003e{{count}}\u003c/strong\u003e ä¸ªå¸å­å¨ç­å¾å®¡æ ¸ä¸­ã"}}},"directory":{"last_updated":"æè¿æ´æ°ï¼"},"groups":{"member_requested":"è¯·æ±äº","requests":{"title":"è¯·æ±","accept":"æ¥å","deny":"æç»","denied":"å·²æç»","undone":"æ¤éè¯·æ±","handle":"å¤çæåè¯·æ±"},"empty":{"requests":"æ²¡æè¯·æ±å å¥æ­¤ç¾¤ç»çè¯·æ±ã","messages":"ç¾¤ç»ä»æªåéè¿ç§ä¿¡ã","topics":"ç¾¤ç»çæåä»æªåè¡¨ä¸»é¢ã","logs":"æ²¡æå³äºç¾¤ç»çæ¥å¿ã"},"confirm_leave":"ä½ ç¡®å®è¦ç¦»å¼è¿ä¸ªç¾¤ç»åï¼","allow_membership_requests":"åè®¸ç¨æ·åç¾¤ç»ææèåéæåèµæ ¼è¯·æ±ï¼éè¦å¬å¼å¯è§çç¾¤ç»ï¼","membership_request_template":"ç¨æ·åéä¼åè¯·æ±æ¶åå¶æ¾ç¤ºçèªå®ä¹æ¨¡æ¿","membership_request":{"reason":"åç¾¤ç»æ¥æèè¯´æä½ ä¸ºä½å±äºè¿ä¸ªç¾¤ç»"},"index":{"empty":"æ²¡æå¯è§çç¾¤ç»ã","owner_groups":"æ¥æçç¾¤ç»","automatic_groups":"èªå¨ç¾¤ç»","automatic_group":"èªå¨ç¾¤ç»"},"members":{"forbidden":"ä½ ä¸å¯ä»¥æ¥çæååè¡¨ã"},"notification_level":"ç¾¤ç»ç§ä¿¡çé»è®¤éç¥ç­çº§","alias_levels":{"owners_mods_and_admins":"ä»ç¾¤ç»æåãçä¸»ä¸ç®¡çå"},"notifications":{"watching_first_post":{"description":"ä½ å°æ¶å°æå³æ­¤ç»ä¸­æ°æ¶æ¯çéç¥ï¼ä½ä¸ä¼åå¤æ¶æ¯ã"},"muted":{"description":"ä½ ä¸ä¼æ¶å°æå³æ­¤ç»ä¸­æ¶æ¯çä»»ä½éç¥ã"}},"flair_url_description":"ä½¿ç¨ä¸å°äº20px Ã 20pxçæ¹å½¢å¾åæFontAwesomeå¾æ ï¼å¯æ¥åçæ ¼å¼ï¼âfa-iconâï¼âfar fa-iconâæâfab fa-iconâï¼ã"},"categories":{"topic_stat_sentence_week":{"other":"è¿å»ä¸å¨æ%{count}ä¸ªæ°ä¸»é¢ã"},"topic_stat_sentence_month":{"other":"è¿å»ä¸ä¸ªææ%{count}ä¸ªæ°ä¸»é¢ã"},"n_more":"åç±» (è¿æ%{count}ä¸ªåç±») ..."},"ip_lookup":{"powered_by":"ä½¿ç¨\u003ca href='https://maxmind.com'\u003eMaxMindDB\u003c/a\u003e"},"user":{"user_notifications":{"ignore_duration_title":"å¿½ç¥è®¡æ¶å¨","ignore_duration_when":"æç»­æ¶é´ï¼","ignore_duration_note":"è¯·æ³¨æææå¿½ç¥çé¡¹ç®ä¼å¨å¿½ç¥çæ¶é´æ®µè¿å»åè¢«èªå¨ç§»é¤","ignore_duration_time_frame_required":"è¯·éæ©æ¶é´èå´","ignore_no_users":"ä½ æ²¡æå¿½è§ä»»ä½ç¨æ·","ignore_option":"å¿½ç¥","ignore_option_title":"ä½ å°ä¸ä¼æ¶å°å³äºæ­¤ç¨æ·çéç¥å¹¶ä¸éèå¶ææå¸å­ååå¤ã","add_ignored_user":"æ·»å ...","mute_option_title":"ä½ ä¸ä¼æ¶å°ä»»ä½å³äºæ­¤ç¨æ·çéç¥","normal_option_title":"å¦æç¨æ·åå¤ãå¼ç¨ææå°ä½ ï¼ä½ å°ä¼æ¶å°æ¶æ¯ã"},"feature_topic_on_profile":{"open_search":"éæ©ä¸ä¸ªæ°ä¸»é¢","title":"éæ©ä¸ä¸ªä¸»é¢","search_label":"éè¿æ é¢æç´¢ä¸»é¢","clear":{"warning":"ä½ ç¡®å®è¦æ¸é¤ç²¾éä¸»é¢åï¼"}},"use_current_timezone":"ä½¿ç¨ç°å¨çæ¶åº","profile_hidden":"æ­¤ç¨æ·å¬å±ä¿¡æ¯å·²è¢«éèã","timezone":"æ¶åº","dynamic_favicon":"å¨æµè§å¨å¾æ ä¸æ¾ç¤ºè®¡æ°","theme_default_on_all_devices":"å°å¶è®¾ä¸ºæææè®¾å¤ä¸çé»è®¤ä¸»é¢","text_size_default_on_all_devices":"å°å¶è®¾ä¸ºæææè®¾å¤ä¸çé»è®¤å­ä½å¤§å°","enable_defer":"å¯ç¨å»¶è¿ä»¥æ è®°æªè¯»ä¸»é¢","featured_topic":"ç²¾éä¸»é¢","mailing_list_mode":{"warning":"é®ä»¶åè¡¨æ¨¡å¼å¯ç¨ãé®ä»¶éç¥è®¾ç½®è¢«è¦çã"},"muted_categories_instructions":"ä½ ä¸ä¼æ¶å°æå³è¿äºåç±»ä¸­æ°ä¸»é¢çä»»ä½éç¥ï¼ä¹ä¸ä¼åºç°å¨ç±»å«æææ°é¡µé¢ä¸ã","muted_categories_instructions_dont_hide":"ä½ å°ä¸ä¼æ¶å°å¨è¿äºåç±»ä¸­çæ°ä¸»é¢éç¥ã","no_category_access":"æ æ³ä¿å­ï¼ä½ä¸ºå®¡æ ¸äººä½ ä»å·æåéç åç±» è®¿é®æé","delete_yourself_not_allowed":"æ³å é¤è´¦æ·è¯·èç³»ç®¡çäººåã","ignored_users":"å¿½è§","ignored_users_instructions":"å°ç¦æææ¥èªè¿äºç¨æ·çå¸å­åéç¥ã","api_last_used_at":"æåä½¿ç¨äºï¼","staged":"æå­","staff_counters":{"rejected_posts":"è¢«é©³åçå¸å­"},"second_factor_backup":{"title":"ä¸¤æ­¥å¤ä»½ç ","enable_long":"å¯ç¨å¤ä»½ç ","manage":"ç®¡çå¤ä»½ç ãä½ è¿å©ä¸\u003cstrong\u003e{{count}}\u003c/strong\u003eä¸ªå¤ä»½ç ã","use":"ä½¿ç¨å¤ä»½ç ","enable_prerequisites":"ä½ å¿é¡»å¨çæå¤ä»½ä»£ç ä¹åå¯ç¨ä¸»è¦ç¬¬äºå ç´ ã","codes":{"description":"æ¯ä¸ªå¤ä»½ç åªè½ä½¿ç¨ä¸æ¬¡ãè¯·å­æ¾äºå®å¨å¯è¯»çå°æ¹ã"}},"second_factor":{"enable":"ç®¡çä¸¤æ­¥éªè¯","forgot_password":"å¿è®°å¯ç ï¼","rate_limit":"è¯·ç­å¾å¦ä¸ä¸ªéªè¯ç ã","enable_description":"ä½¿ç¨æä»¬æ¯æçåºç¨ (\u003ca href=\"https://www.google.com/search?q=authenticator+apps+for+android\" target=\"_blank\"\u003eAndroid\u003c/a\u003e â \u003ca href=\"https://www.google.com/search?q=authenticator+apps+for+ios\" target=\"_blank\"\u003eiOS\u003c/a\u003e) æ«ææ­¤äºç»´ç å¹¶è¾å¥æ¨çææç ã\n","disable_description":"è¯·è¾å¥æ¥èª app çéªè¯ç ","short_description":"ä½¿ç¨ä¸æ¬¡æ§å®å¨ç ä¿æ¤ä½ çè´¦æ·ã\n","extended_description":"åééªè¯è¦æ±ä½ çå¯ç ä¹å¤çä¸æ¬¡æ§ä»¤çï¼ä»èä¸ºä½ çè´¦æ·å¢å äºé¢å¤çå®å¨æ§ãå¯ä»¥å¨\u003ca href=\"https://www.google.com/search?q=authenticator+apps+for+android\" target='_blank'\u003eAndroid\u003c/a\u003eå\u003ca href=\"https://www.google.com/search?q=authenticator+apps+for+ios\"\u003eiOS\u003c/a\u003eè®¾å¤ä¸çæä»¤çã\n","oauth_enabled_warning":"è¯·æ³¨æï¼ä¸æ¦ä½ çè´¦æ·å¯ç¨äºåééªè¯ï¼ç¤¾äº¤ç»å½å°è¢«åç¨ã","use":"ä½¿ç¨èº«ä»½éªè¯å¨åºç¨","enforced_notice":"å¨è®¿é®æ­¤ç«ç¹ä¹åï¼ä½ éè¦å¯ç¨åéèº«ä»½éªè¯ã","disable":"åç¨","disable_title":"ç¦ç¨æ¬¡è¦èº«ä»½éªè¯å¨","disable_confirm":"ç¡®å®ç¦ç¨ææçä¸¤æ­¥éªè¯åï¼","edit_title":"ç¼è¾æ¬¡è¦èº«ä»½éªè¯å¨","edit_description":"æ¬¡è¦èº«ä»½éªè¯å¨åç§°","enable_security_key_description":"å½ä½ åå¤å¥½ç©çå®å¨å¯é¥åï¼è¯·æä¸é¢çâæ³¨åâæé®ã","totp":{"title":"åºäºå­è¯çèº«ä»½éªè¯å¨","add":"æ°å¢èº«ä»½éªè¯å¨","default_name":"æçèº«ä»½éªè¯å¨","name_and_code_required_error":"ä½ å¿é¡»æä¾ä½ çèº«ä»½éªè¯å¨åºç¨çåç§°åä»£ç ã"},"security_key":{"title":"å®å¨å¯é¥","add":"æ³¨åå®å¨å¯é¥","default_name":"ä¸»è¦å®å¨å¯é¥","not_allowed_error":"å®å¨å¯é¥æ³¨åè¿ç¨å·²è¶æ¶æè¢«åæ¶ã","already_added_error":"ä½ å·²æ³¨åæ­¤å®å¨å¯é¥ï¼æ éåæ¬¡æ³¨åã","edit":"ç¼è¾å®å¨å¯é¥","edit_description":"å®å¨å¯é¥åç§°","name_required_error":"ä½ å¿é¡»æä¾å®å¨å¯é¥çåç§°ã"}},"change_username":{"confirm":"ä½ ç¡®å®è¦æ´æ¹ç¨æ·ååï¼"},"change_email":{"success_staff":"æä»¬å·²ç»åéäºä¸å°ç¡®è®¤ä¿¡å°ä½ ç°å¨çé®ç®±ï¼è¯·æç§é®ä»¶åæç¤ºå®æç¡®è®¤ã"},"change_avatar":{"gravatar":"\u003ca href='//{{gravatarBaseUrl}}{{gravatarLoginUrl}}' target='_blank'\u003e{{gravatarName}}\u003c/a\u003eï¼åºäº","gravatar_title":"å¨{{gravatarName}}ç½ç«ä¿®æ¹ä½ çå¤´å","gravatar_failed":"æä»¬æ æ³æ¾å°æ­¤çµå­é®ä»¶ç{{gravatarName}}ã","refresh_gravatar_title":"å·æ°ä½ ç{{gravatarName}}"},"change_profile_background":{"title":"ä¸ªäººæ¡£å¤´é¨","instructions":"ä¸ªäººèµæçé¡µå¤´ä¼è¢«å±ä¸­æ¾ç¤ºä¸é»è®¤å®½åº¦ä¸º1110pxã"},"change_featured_topic":{"title":"ç²¾éä¸»é¢","instructions":"æ­¤ä¸»é¢çé¾æ¥ä¼æ¾ç¤ºå¨ä½ çç¨æ·å¡çåèµæä¸­ã"},"email":{"sso_override_instructions":"çµå­é®ä»¶å°åå¯ä»¥éè¿SSOç»å½æ¥æ´æ°ã"},"associated_accounts":{"title":"å³èè´¦æ·","confirm_modal_title":"è¿æ¥%{provider}å¸å·","confirm_description":{"account_specific":"ä½ ç%{provider}å¸å·â%{account_description}âä¼è¢«ç¨ä½è®¤è¯ã","generic":"ä½ ç%{provider}å¸å·ä¼è¢«ç¨ä½è®¤è¯ã"}},"invite_code":{"title":"éè¯·ç ","instructions":"è´¦æ·æ³¨åéè¦éè¯·ç "},"auth_tokens":{"title":"æè¿ä½¿ç¨çè®¾å¤","log_out_all":"å¨é¨ç»åº","active":"ç°å¨æ´»è·","not_you":"ä¸æ¯ä½ ï¼","show_all":"æ¾ç¤ºææï¼{{count}}ï¼","show_few":"æ¾ç¤ºé¨å","was_this_you":"è¿æ¯ä½ åï¼","was_this_you_description":"å¦æä¸æ¯ä½ ï¼æä»¬å»ºè®®ä½ æ´æ¹å¯ç å¹¶å¨ä»»ä½å°æ¹æ³¨éã","browser_and_device":"{{browser}}å¨{{device}}","secure_account":"ä¿æ¤æçè´¦æ·","latest_post":"ä½ ä¸æ¬¡åå¸äº......"},"hide_profile_and_presence":"éèæçå¬å¼ä¸ªäººèµæåç¶æåè½","enable_physical_keyboard":"å¨iPadä¸å¯ç¨ç©çé®çæ¯æ","text_size":{"title":"ææ¬å¤§å°","smaller":"æ´å°","larger":"æ´å¤§","largest":"æå¤§"},"title_count_mode":{"title":"èæ¯é¡µé¢æ é¢æ¾ç¤ºè®¡æ°ï¼","notifications":"æ°éç¥","contextual":"æ°å»ºé¡µé¢åå®¹"},"email_digests":{"title":"é¿ææªè®¿é®æ¶åéç­é¨ä¸»é¢ååå¤çæè¦é®ä»¶","every_month":"æ¯æ","every_six_months":"æ¯6ä¸ªæ"},"email_level":{"only_when_away":"åªå¨ç¦»å¼æ¶"},"invited":{"sent":"ä¸æ¬¡åé","none":"æ éè¯·æ¾ç¤ºã","rescind_all":"ç§»é¤ææè¿æéè¯·","rescinded_all":"ææè¿æéè¯·å·²å é¤ï¼","rescind_all_confirm":"ä½ ç¡®å®ä½ æ³è¦ç§»é¤ææè¿æéè¯·ä¹ï¼","bulk_invite":{"none":"ä½ è¿æ²¡æéè¯·ä»»ä½äººãä½ å¯ä»¥åç¬éè¯·ç¨æ·ï¼ä¹å¯ä»¥éè¿\u003ca href='https://meta.discourse.org/t/send-bulk-invites/16468'\u003eä¸ä¼ CSVæä»¶\u003c/a\u003eæ¹ééè¯·ã","confirmation_message":"ä½ å°éè¿çµå­é®ä»¶å°éè¯·åéç»å¨ä¸ä¼ çæä»¶ä¸­çæ¯ä¸ä¸ªäººã"}},"summary":{"recent_time_read":"æè¿éè¯»æ¶é´","topic_count":{"other":"åå»ºä¸»é¢"},"post_count":{"other":"åè¡¨å¸å­"},"likes_given":{"other":"éåº"},"likes_received":{"other":"æ¶å°"},"days_visited":{"other":"è®¿é®å¤©æ°"},"topics_entered":{"other":"å·²éä¸»é¢"},"posts_read":{"other":"éè¯»å¸å­"},"bookmark_count":{"other":"æ¶è"},"top_categories":"ç­é¨åç±»"}},"modal":{"dismiss_error":"å¿½ç¥éè¯¯"},"logs_error_rate_notice":{},"time_read_recently_tooltip":"æ»éè¯»æ¶é´ %{time_read}ï¼æè¿60å¤© %{recent_time_read}ï¼","signup_cta":{"intro":"ä½ å¥½ï¼çèµ·æ¥ä½ æ­£å¨äº«åè®¨è®ºï¼ä½è¿æ²¡ææ³¨åä¸ä¸ªè´¦æ·ã","value_prop":"å½ä½ åå»ºäºè´¦æ·ï¼æä»¬å°±å¯ä»¥åç¡®å°è®°å½ä½ çéè¯»è¿åº¦ï¼ä½ åæ¬¡è®¿é®æ¶å°±å¯ä»¥åå°ä¹åç¦»å¼çå°æ¹ãå½æäººåå¤ä½ ï¼ä½ å¯ä»¥éè¿è¿éæçµå­é®ä»¶æ¶å°éç¥ãå¹¶ä¸ä½ è¿å¯ä»¥éè¿ç¹èµå¸å­åä»äººåäº«ä½ çåç±ä¹æã:heartbeat:"},"private_message_info":{"invite":"éè¯·å¶ä»äºº...","edit":"æ·»å æç§»é¤...","leave_message":"ä½ ççæ³è¦åéæ¶æ¯ä¹ï¼"},"create_account":{"disclaimer":"æ³¨åå³è¡¨ç¤ºä½ åæ\u003ca href='{{privacy_link}}' target='blank'\u003eéç§ç­ç¥\u003c/a\u003eå\u003ca href='{{tos_link}}' target='blank'\u003eæå¡æ¡æ¬¾\u003c/a\u003eã"},"forgot_password":{"complete_username_found":"æä»¬æ¾å°ä¸ä¸ªä¸ç¨æ·å\u003cb\u003e%{username}\u003c/b\u003eå¹éçè´¦æ·ãä½ åºè¯¥ä¼æ¶å°ä¸å°è¯´æå¦ä½éè®¾å¯ç ççµå­é®ä»¶ã","complete_email_found":"æä»¬æ¾å°ä¸ä¸ªä¸\u003cb\u003e%{email}\u003c/b\u003eç¸å¹éçè´¦æ·ãä½ åºè¯¥ä¼æ¶å°ä¸å°è¯´æå¦ä½éè®¾å¯ç ççµå­é®ä»¶ã","help":"æ²¡æ¶å°é®ä»¶ï¼è¯·åæ¥çä½ çåå¾é®ä»¶æä»¶å¤¹ã\u003cp\u003eä¸ç¡®å®ä½¿ç¨äºåªä¸ªé®ç®±å°åï¼è¾å¥é®ç®±å°åæ¥æ¥çæ¯å¦å­å¨ã\u003c/p\u003e\u003cp\u003eå¦æä½ å·²æ æ³è¿å¥ä½ è´¦æ·çé®ç®±ï¼è¯·èç³»\u003ca href='%{basePath}/about'\u003eæä»¬çå·¥ä½äººåã\u003c/a\u003e\u003c/p\u003e"},"email_login":{"link_label":"ç»æéè¿é®ä»¶åéä¸ä¸ªç»å½é¾æ¥","button_label":"éè¿é®ä»¶","complete_username":"å¦ææä¸ä¸ªä¸ç¨æ·å\u003cb\u003e%{username}\u003c/b\u003eç¸å¹éçè´¦æ·ï¼ä½ å¾å¿«å°±ä¼æ¶å°ä¸å°å¸¦æç»å½é¾æ¥ççµå­é®ä»¶ã","complete_email":"å¦æ\u003cb\u003e%{email}\u003c/b\u003eä¸è´¦æ·ç¸å¹éï¼ä½ å¾å¿«å°±ä¼æ¶å°ä¸å°å¸¦æç»å½é¾æ¥ççµå­é®ä»¶ã","complete_username_found":"æä»¬æ¾å°äºä¸ä¸ªä¸ç¨æ·å\u003cb\u003e%{username}\u003c/b\u003eç¸å¹éçè´¦æ·ï¼ä½ å¾å¿«å°±ä¼æ¶å°ä¸å°å¸¦æç»å½é¾æ¥ççµå­é®ä»¶ã","complete_email_found":"æä»¬åç°äºä¸ä¸ªä¸\u003cb\u003e%{email}\u003c/b\u003eç¸å¹éçè´¦æ·ï¼ä½ å¾å¿«å°±ä¼æ¶å°ä¸å°å¸¦æç»å½é¾æ¥ççµå­é®ä»¶ã","logging_in_as":"ç¨%{email}ç»å½","confirm_button":"ç»å½å®æ"},"login":{"second_factor_description":"è¯·è¾å¥æ¥èª app çéªè¯ç ï¼","second_factor_backup":"ä½¿ç¨å¤ç¨ç ç»å½","second_factor_backup_title":"ä¸¤æ­¥éªè¯å¤ä»½","second_factor_backup_description":"è¯·è¾å¥ä½ çå¤ä»½ç ï¼","second_factor":"ä½¿ç¨èº«ä»½éªè¯å¨appç»å½","security_key_description":"å½ä½ åå¤å¥½ç©çå®å¨å¯é¥åï¼è¯·æä¸é¢çâä½¿ç¨å®å¨å¯é¥è¿è¡èº«ä»½éªè¯âæé®ã","security_key_alternative":"å°è¯å¦ä¸ç§æ¹å¼","security_key_authenticate":"ä½¿ç¨å®å¨å¯é¥è¿è¡èº«ä»½éªè¯","security_key_not_allowed_error":"å®å¨å¯é¥éªè¯è¶æ¶æè¢«åæ¶ã","security_key_no_matching_credential_error":"å¨æä¾çå®å¨å¯é¥ä¸­æ¾ä¸å°å¹éçå­æ®ã","security_key_support_missing_error":"æ¨å½åçè®¾å¤ææµè§å¨ä¸æ¯æä½¿ç¨å®å¨å¯é¥ãè¯·ä½¿ç¨å¶ä»æ¹æ³ã","cookies_error":"ä½ çæµè§å¨ä¼¼ä¹ç¦ç¨äºCookieãå¦æä¸åå¯ç¨å®ä»¬ï¼ä½ å¯è½æ æ³ç»å½ã","blank_username":"è¯·è¾å¥ä½ çé®ä»¶å°åæç¨æ·åã","omniauth_disallow_totp":"ä½ çè´¦æ·å·²å¯ç¨åééªè¯ï¼è¯·ä½¿ç¨å¯ç ç»å½ã","change_email":"æ´æ¹é®ä»¶å°å","provide_new_email":"ç»ä¸ªæ°å°åï¼ç¶åæä»¬ä¼åç»ä½ åä¸å°ç¡®è®¤é®ä»¶ã","submit_new_email":"æ´æ°é®ä»¶å°å","sent_activation_email_again_generic":"æä»¬åéäºå¦ä¸å°æ¿æ´»é®ä»¶ãå®å¯è½éè¦å åéæè½å°è¾¾ï¼è®°å¾æ£æ¥ä½ çåå¾é®ä»¶æä»¶å¤¹ã","not_approved":"ä½ çè´¦æ·è¿æªéè¿å®¡æ ¸ãä¸æ¦å®¡æ ¸éè¿ï¼æä»¬å°é®ä»¶éç¥ä½ ã","discord":{"name":"Discord","title":"with Discord"},"second_factor_toggle":{"totp":"æ¹ç¨èº«ä»½éªè¯APP","backup_code":"ä½¿ç¨å¤ä»½ç "}},"invites":{"accept_title":"éè¯·","social_login_available":"ä½ ä¹å¯ä»¥éè¿ä»»ä½ä½¿ç¨è¿ä¸ªé®ç®±çç¤¾äº¤ç½ç«ç»å½ã","your_email":"ä½ çè´¦æ·çé®ç®±å°åä¸º\u003cb\u003e%{email}\u003c/b\u003eã","success":"å·²åå»ºä½ çè´¦æ·ï¼ä½ ç°å¨å¯ä»¥ç»å½äºã"},"emoji_set":{"emoji_one":"JoyPixels ï¼æ¾ç¨åEmojiOneï¼"},"category_page_style":{"categories_boxes":"å¸¦å­åç±»çæ¡","categories_boxes_with_topics":"æç¹è²ä¸»é¢çæ¡"},"shortcut_modifier_key":{"enter":"åè½¦"},"category_row":{"topic_count":"{{count}}ä¸ªä¸»é¢å¨æ­¤åç±»ä¸­"},"select_kit":{"invalid_selection_length":"éæ©çå­ç¬¦è³å°ä¸º{{count}}ä¸ªå­ç¬¦ã"},"date_time_picker":{"errors":{"to_before_from":"æªè³æ¥æå¿é¡»æäºå¼å§æ¥æã"}},"emoji_picker":{"filter_placeholder":"æ¥æ¾è¡¨æç¬¦å·","smileys_\u0026_emotion":"ç¬è¸ä¸ææ","people_\u0026_body":"äººä¸èº«ä½","animals_\u0026_nature":"å¨ç©ä¸èªç¶","food_\u0026_drink":"é¥®é£","travel_\u0026_places":"æè¡ä¸å°ç¹","activities":"æ´»å¨","symbols":"ç¬¦å·","default_tone":"æ è¤è²","light_tone":"æµè¤è²","medium_light_tone":"ä¸­æµè¤è²","medium_tone":"ä¸­é´è¤è²","medium_dark_tone":"ä¸­æ·±è¤è²","dark_tone":"æ·±è¤è²","default":"èªå®ä¹è¡¨æç¬¦å·"},"shared_drafts":{"title":"å±äº«èç¨¿","notice":"åªæé£äºå¯ä»¥çå°\u003cb\u003e{{category}}\u003c/b\u003eåç±»çäººæè½çå°æ­¤ä¸»é¢ã","destination_category":"ç®æ åç±»"},"composer":{"edit_conflict":"ç¼è¾å²çª","group_mentioned_limit":"\u003cb\u003eè­¦åï¼\u003c/b\u003eä½ æå°äº\u003ca href='{{group_link}}'\u003e {{group}} \u003c/a\u003eï¼ä½è¯¥ç¾¤ç»çæåæ°è¶è¿äºçç®¡çåéç½®çæå¤§{{max}}äººæ°ãæ²¡äººä¼æ¶å°éç¥ã","group_mentioned":{"other":"æå {{group}} æ¶ï¼ä½ å°éç¥ \u003ca href='{{group_link}}'\u003e{{count}} äºº\u003c/a\u003e ï¼ ç¡®å®åï¼"},"cannot_see_mention":{"category":"ä½ æå°äº {{username}} ï¼ç¶èä»ä»¬ä¸è½è®¿é®è¯¥åç±»ï¼æä»¥ä»ä»¬ä¸ä¼è¢«éç¥ãä½ éè¦æä»ä»¬å å¥å°è½è®¿é®è¯¥åç±»çç¾¤ç»ä¸­ã","private":"ä½ æå°äº{{userrname}}ï¼ç¶èä»ä»¬ä¸è½è®¿é®è¯¥ç§ä¿¡ï¼æä»¥ä»ä»¬ä¸ä¼è¢«éç¥ãä½ éè¦éè¯·ä»ä»¬è³ç§ä¿¡ä¸­ã"},"duplicate_link":"å¥½å\u003cb\u003e@{{username}}\u003c/b\u003eå¨\u003ca href='{{post_url}}'\u003e{{ago}}\u003c/a\u003eä¸­åçåå¤ä¸­å·²ç»åäºä½ çé¾æ¥ \u003cb\u003e{{domain}}\u003c/b\u003e ï¼ ä½ æ³åæ¬¡åè¡¨é¾æ¥åï¼","reference_topic_title":"åå¤ï¼{{title}}","error":{"post_missing":"å¸å­ä¸è½ä¸ºç©º","try_like":"è¯è¯{{heart}}æé®ï¼","topic_template_not_modified":"è¯·éè¿ç¼è¾ä¸»é¢æ¨¡æ¿æ¥ä¸ºä¸»é¢æ·»å è¯¦æã"},"overwrite_edit":"è¦çç¼è¾","create_shared_draft":"åå»ºå±äº«èç¨¿","edit_shared_draft":"ç¼è¾å±äº«èç¨¿","topic_featured_link_placeholder":"å¨æ é¢éè¾å¥é¾æ¥","remove_featured_link":"ä»ä¸»é¢ä¸­ç§»é¤é¾æ¥ã","reply_placeholder_no_images":"å¨æ­¤è¾å¥ã ä½¿ç¨ Markdownï¼BBCode æ HTML æ ¼å¼ã","reply_placeholder_choose_category":"è¾å¥åè¯·éæ©ä¸ä¸ªåç±»ã","saved_draft":"æ­£å¨åå¸èç¨¿ãç¹å»ä»¥ç»§ç»­ã","bold_label":"B","italic_label":"I","link_url_placeholder":"ç²è´´ URL æé®å¥ä»¥æç´¢ä¸»é¢","toggle_direction":"åæ¢æ¹å","collapse":"æå°åç¼è¾é¢æ¿","open":"æå¼ç¼è¾é¢æ¿","abandon":"å³é­ç¼è¾é¢æ¿å¹¶æ¾å¼èç¨¿","enter_fullscreen":"è¿å¥å¨å±ç¼è¾æ¨¡å¼","exit_fullscreen":"éåºå¨å±ç¼è¾æ¨¡å¼","yourself_confirm":{"title":"ä½ å¿è®°æ·»å æ¶ä¿¡äººäºåï¼","body":"ç®åè¯¥ç§ä¿¡åªåç»äºä½ èªå·±ï¼"},"composer_actions":{"reply_to_post":{"desc":"åå¤ç¹å®å¸å­"},"reply_as_new_topic":{"label":"åå¤ä¸ºèç»ä¸»é¢","desc":"åå»ºä¸ä¸ªæ°ä¸»é¢é¾æ¥å°è¿ä¸ä¸»é¢","confirm":"æ¨ä¿å­äºæ°çä¸»é¢èç¨¿ï¼å¦ææ¨åå»ºé¾æ¥ä¸»é¢è¯¥èç¨¿å°è¢«è¦çã"},"reply_to_topic":{"desc":"åå¤ä¸»é¢ï¼ä¸æ¯ä»»ä½ç¹å®çå¸å­"},"shared_draft":{"desc":"èµ·èä¸ä¸ªåªå¯¹ç®¡çäººåå¯è§çä¸»é¢"},"toggle_topic_bump":{"label":"åæ¢ä¸»é¢ç½®é¡¶","desc":"åå¤èä¸æ´æ¹ææ°åå¤æ¥æ"}}},"notifications":{"tooltip":{"high_priority":{"other":"%{count}ä¸ªæªè¯»çé«ä¼åçº§éç¥"}},"post_approved":"ä½ çå¸å­å·²è¢«å®¡æ ¸","reviewable_items":"å¾å®¡æ ¸å¸å­","liked_consolidated_description":{"other":"ä½ çå¸å­æ{{count}}ä¸ªèµ"},"membership_request_accepted":"æ¥åæ¥èªâ{{group_name}}âçéè¯·","membership_request_consolidated":"{{count}}ä¸ªå å¥â{{group_name}}âç¾¤ç»çè¯·æ±","popup":{"watching_first_post":"{{username}}åå¸äºæ°ä¸»é¢â{{topic}}â - {{site_title}}","custom":"æ¥èª{{username}}å¨%{site_title}çéç¥"},"titles":{"mentioned":"æåå°","replied":"æ°åå¤","quoted":"å¼ç¨","edited":"ç¼è¾","liked":"æ°å°èµ","private_message":"æ°ç§ä¿¡","invited_to_private_message":"éè¯·è¿è¡ç§ä¸äº¤æµ","invitee_accepted":"éè¯·å·²æ¥å","posted":"æ°å¸å­","moved_post":"å¸å­å·²ç§»å¨","linked":"é¾æ¥","bookmark_reminder":"æ¶èæé","bookmark_reminder_with_name":"æ¶èæé - %{name}","granted_badge":"åç« æäº","invited_to_topic":"éè¯·å°ä¸»é¢","group_mentioned":"ç¾¤ç»æå","group_message_summary":"æ°å»ºç¾¤ç»æ¶æ¯","topic_reminder":"ä¸»é¢æé","liked_consolidated":"æ°çèµ","post_approved":"å¸å­å·²å®¡æ¹","membership_request_consolidated":"æ°çæåç³è¯·"}},"search":{"more_results":"è¿ææ´å¤ç»æãè¯·å¢å ä½ çæç´¢æ¡ä»¶ã","cant_find":"æ¾ä¸å°ä½ è¦æ¾çåå®¹ï¼","or_search_google":"æèå°è¯ä½¿ç¨Googleè¿è¡æç´¢ï¼","search_google":"å°è¯ä½¿ç¨Googleè¿è¡æç´¢ï¼","context":{"tag":"æç´¢ï¼{{tag}}æ ç­¾"},"advanced":{"filters":{"label":"åªè¿åä¸»é¢/å¸å­â¦â¦","title":"ä»å¨æ é¢ä¸­å¹é","posted":"æåä¸åå¸","created":"æåå»ºç","first":"æ¯ç¬¬ä¸å¸","all_tags":"ä¸è¿°æææ ç­¾"},"statuses":{"public":"æ¯å¬å¼ç","single_user":"åªæä¸ä¸ªç¨æ·åä¸"},"post":{"count":{"label":"æå°å¸å­æ°"}}}},"view_all":"æ¥çå¨é¨","topics":{"bulk":{"relist_topics":"æä¸»é¢éæ°ç½®äºä¸»é¢åè¡¨ä¸­","change_tags":"æ¿æ¢æ ç­¾","append_tags":"æ·»å æ ç­¾","choose_new_tags":"ä¸ºä¸»é¢éæ©æ°æ ç­¾ï¼","choose_append_tags":"ä¸ºè¿äºä¸»é¢æ·»å æ°æ ç­¾ï¼","changed_tags":"ä¸»é¢çæ ç­¾è¢«ä¿®æ¹"},"none":{"educate":{"new":"\u003cp\u003eè¿éæ¾ç¤ºäºè¿æä¸»é¢åè¡¨ã\u003c/p\u003e\u003cp\u003eé»è®¤æåµä¸ï¼æè¿ 2 å¤©ååå»ºçä¸»é¢å°æ¾ç¤ºå¨è¿æåè¡¨ï¼è¿ä¼æ¾ç¤ºä¸ä¸ª\u003cspan class=\"badge new-topic badge-notification\" style=\"vertical-align:middle;line-height:inherit;\"\u003eè¿æ\u003c/span\u003eæ å¿ã\u003cp\u003eä½ å¯ä»¥å¨\u003ca href=\"%{userPrefsUrl}\"\u003eç¨æ·è®¾ç½®\u003c/a\u003eä¸­æ´æ¹è¦æ¾ç¤ºåªäºåå®¹ã\u003c/p\u003e","unread":"\u003cp\u003eè¿éæ¾ç¤ºä½ çæªè¯»ä¸»é¢ã\u003c/p\u003e\u003cp\u003eé»è®¤æåµä¸ï¼ä¸è¿°ä¸»é¢ä¼è¢«æ¾å¨æªè¯»ä¸­ãå¹¶ä¸ä¼å¨æè¾¹æ¾ç¤ºæªè¯»çæ°é\u003cspan class=\"badge new-posts badge-notification\"\u003e1\u003c/span\u003eãå¦æä½ ï¼\u003c/p\u003e\u003cul\u003e\u003cli\u003eåå»ºäºè¯¥ä¸»é¢\u003c/li\u003e\u003cli\u003eåå¤äºè¯¥ä¸»é¢\u003c/li\u003e\u003cli\u003eéè¯»è¯¥ä¸»é¢è¶è¿ 4 åé\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eæèä½ å¨ä¸»é¢åºé¨çéç¥æ§å¶ä¸­éæ©äºè·éæå³æ³¨ã\u003c/p\u003e\u003cp\u003eä½ å¯ä»¥å¨\u003ca href=\"%{userPrefsUrl}\"\u003eç¨æ·è®¾ç½®\u003c/a\u003eä¸­ä¿®æ¹æªè¯»è®¾ç½®ã\u003c/p\u003e"}}},"topic":{"edit_message":{"help":"ç¼è¾æ¶æ¯ä¸­çç¬¬ä¸å¸"},"defer":{"help":"æ è®°ä¸ºæªè¯»"},"feature_on_profile":{"help":"æ·»å æ­¤ä¸»é¢çé¾æ¥å°ä½ çç¨æ·å¡çåèµæä¸­ã","title":"ç²¾éå°ä¸ªäººèµæ"},"remove_from_profile":{"warning":"ä½ çä¸ªäººèµæä¸­å·²å­å¨ç²¾éä¸»é¢ãå¦æç»§ç»­ï¼æ­¤ä¸»é¢ä¼æ¿æ¢å­å¨çä¸»é¢ã","help":"å¨ä½ çä¸ªäººèµæä¸­ç§»é¤æåè¯¥ä¸»é¢çé¾æ¥","title":"ä»ä¸ªäººèµæä¸­ç§»é¤"},"group_request":"ä½ éè¦è¯·æ±å å¥`{{name}}`ç¾¤ç»æè½æ¥çæ­¤ä¸»é¢ã","group_join":"ä½ éè¦å å¥`{{name}}`ç¾¤ç»ä»¥æ¥çæ­¤ä¸»é¢","group_request_sent":"ä½ å å¥ç¾¤ç»çè¯·æ±å·²åéãå½è¢«æ¥åæ¶ä½ ä¼æ¶å°éç¥ã","unread_indicator":"è¿æ²¡ææåè¯»è¿æ­¤ä¸»é¢çææ°å¸å­ã","topic_status_update":{"num_of_days":"å¤©æ°","private_timer_types":"ç¨æ·ä¸»é¢è®¡æ¶å¨","time_frame_required":"è¯·éæ©ä¸ä¸ªæ¶é´èå´"},"auto_update_input":{"none":"éæ©æ¶é´èå´","two_months":"ä¸¤ä¸ªæ","four_months":"åä¸ªæ","set_based_on_last_post":"æç§ææ°å¸å­å³é­"},"publish_to_category":{"title":"è®¡ååå¸"},"auto_reopen":{"title":"èªå¨å¼å¯ä¸»é¢"},"auto_close":{"title":"èªå¨å³é­ä¸»é¢","label":"èªå¨å³é­äºå å°æ¶åï¼"},"auto_delete":{"title":"èªå¨å é¤ä¸»é¢"},"auto_bump":{"title":"èªå¨é¡¶å¸"},"auto_delete_replies":{"title":"èªå¨å é¤åå¤"},"status_update_notice":{"auto_publish_to_category":"ä¸»é¢%{timeLeft}å°åå¸å°\u003ca href=%{categoryUrl}\u003e#%{categoryName}\u003c/a\u003e ã","auto_delete":"ä¸»é¢å¨%{timeLeft}åå°è¢«èªå¨å é¤ã","auto_bump":"æ­¤ä¸»é¢å°å¨%{timeLeft}åèªå¨é¡¶èµ·ã","auto_reminder":"ä½ å°å¨%{timeLeft}åæ¶å°è¯¥ä¸»é¢çæéã","auto_delete_replies":"æ­¤ä¸»é¢çåå¤ä¼å¨%{duration}åèªå¨å é¤ã"},"auto_close_immediate":{"other":"ä¸»é¢ä¸­çæåä¸å¸æ¯ %{hours} å°æ¶åååºçï¼æä»¥ä¸»é¢å°ä¼ç«å³å³é­ã"},"timeline":{"back_description":"åå°æåä¸ä¸ªæªè¯»å¸å­"},"progress":{"jump_prompt_long":"è·³å°â¦â¦","jump_prompt_to_date":"è³ä»"},"notifications":{"title":"æ¹åä½ æ¶å°è¯¥ä¸»é¢éç¥çé¢ç","reasons":{"mailing_list_mode":"é®ä»¶åè¡¨æ¨¡å¼å·²å¯ç¨ï¼å°ä»¥é®ä»¶éç¥ä½ å³äºè¯¥ä¸»é¢çåå¤ã","3_10":"å ä¸ºä½ æ­£ççè¯¥ä¸»é¢ä¸çæ ç­¾ï¼ä½ å°ä¼æ¶å°éç¥ã","2_8":"å ä¸ºä½ è¿½è¸ªäºè¯¥åç±»ï¼æä»¥ä½ ä¼çå°æ°åå¤çæ°éã","2_4":"ä½ ä¼çå°æ°åå¤çæ°éçåå æ¯ä½ æ¾ç»åå¤è¿è¯¥ä¸»é¢ã","2_2":"ä½ ä¼çå°æ°åå¤æ°éçåå æ¯ä½ æ­£å¨è¿½è¸ªè¯¥ä¸»é¢ã","2":"ä½ ä¼çå°æ°åå¤æ°éçåå æ¯ä½ \u003ca href=\"{{basePath}}/u/{{username}}/preferences\"\u003eéè¯»è¿è¯¥ä¸»é¢\u003c/a\u003eã"}},"actions":{"timed_update":"è®¾ç½®ä¸»é¢è®¡æ¶å¨â¦","make_public":"è®¾ç½®ä¸ºå¬å±ä¸»é¢","make_private":"è®¾ç½®ä¸ºç§ä¿¡","reset_bump_date":"éç½®é¡¶å¸æ¥æ"},"share":{"extended_title":"åäº«ä¸ä¸ªé¾æ¥"},"make_public":{"title":"è½¬æ¢å°å¬å¼ä¸»é¢","choose_category":"è¯·éæ©å¬å±ä¸»é¢åç±»ï¼"},"automatically_add_to_groups":"éè¯·å°æç¨æ·å å¥ç¾¤ç»ï¼","invite_private":{"success_group":"æåéè¯·äºç¾¤ç»è³è¯¥ç§ä¿¡ã"},"invite_reply":{"success_existing_email":"ç¨æ·\u003cb\u003e{{emailOrUsername}}\u003c/b\u003eå·²å­å¨ãæä»¬å·²ç»éè¯·äºè¯¥ç¨æ·åä¸è¯¥ä¸»é¢ã"},"move_to":{"title":"ç§»å¨å°","action":"ç§»å¨å°","error":"ç§»å¨å¸å­æ¶åçäºéè¯¯ã"},"split_topic":{"topic_name":"æ°ä¸»é¢çæ é¢"},"merge_topic":{"radio_label":"ç°å­çä¸»é¢"},"move_to_new_message":{"title":"ç§»å¨å°æ°çå³æ¶ä¿¡æ¯","action":"ç§»å¨å°æ°çç§ä¿¡","message_title":"æ°ç§ä¿¡çæ é¢","participants":"åä¸è","instructions":{"other":"ä½ æ­£å¨åé\u003cb\u003e{{count}}\u003c/b\u003eç¯å¸å­å°ä¸æ¡æ°çç§ä¿¡/æ¶æ¯ã"}},"move_to_existing_message":{"title":"ç§»å¨å°ç°å­çç§ä¿¡","action":"ç§»å¨å°å·²å­å¨çç§ä¿¡","radio_label":"ç°å­çç§ä¿¡","participants":"åä¸è","instructions":{"other":"è¯·éæ©ä½ è¦å°\u003cb\u003e{{count}}\u003c/b\u003eä¸ªå¸å­æç§»å¨å°çç§ä¿¡ã"}},"merge_posts":{"error":"åå¹¶å¸å­æ¶åçäºéè¯¯ã"},"publish_page":{"publish":"åºç","description":"å½ä¸ä¸ªä¸»é¢è¢«åºçä¸ºä¸ä¸ªé¡µé¢æ¶ï¼å¶é¾æ¥æ¯å±äº«çï¼å¹¶ä¸ä¼ä»¥èªå®ä¹çæ ·å¼æ¾ç¤ºã","slug":"Slug","publish_url":"ä½ çé¡µé¢å·²åºçäºï¼","topic_published":"ä½ çä¸»é¢å·²åºçäºï¼","preview_url":"ä½ çé¡µé¢å°åºçäºï¼","invalid_slug":"æ±æ­ï¼æ¨ä¸è½åºçæ­¤é¡µé¢ã","unpublish":"åæ¶åºç","unpublished":"ä½ çé¡µé¢å·²ç»åæ¶åºçå¹¶ä¸ä¸åå¯ç¨ã","publishing_settings":"åºçè®¾ç½®"},"change_owner":{"title":"æ´æ¹ææè","instructions":{"other":"è¯·éæ©\u003cb\u003e@{{old_user}}\u003c/b\u003eåå»ºç{{count}}ä¸ªå¸å­çæ°ä½èã"},"instructions_without_old_user":{"other":"è¯·ä¸ºæ­¤{{count}}ä¸ªå¸å­éæ©ä¸ä¸ªæ°çæ¥æèã"}},"change_timestamp":{"title":"ä¿®æ¹æ¶é´"},"multi_select":{"select_replies":{"title":"éæ©å¸å­åå¶ææåå¤"},"select_below":{"title":"éæ©å¸å­åå¶åçææåå®¹"}},"deleted_by_author":{"other":"ï¼ä¸»é¢è¢«ä½èæ¤åï¼é¤éè¢«æ è®°ï¼ä¸ç¶å°å¨%{count}å°æ¶åèªå¨å é¤ï¼"}},"post":{"ignored":"å¿½è§çåå®¹","reply_as_new_private_message":"åç¸åçæ¶ä»¶äººåå¤æ°ç§ä¿¡","show_hidden":"æ¾ç¤ºå·²å¿½ç¥åå®¹ã","collapse":"æå ","locked":"ä¸ç®¡çäººåéå®äºè¯¥å¸çç¼è¾","notice":{"new_user":"è¿æ¯ {{user}} åçç¬¬ä¸ä¸ªå¸å­ - è®©æä»¬æ¬¢è¿ä»å å¥ç¤¾åºï¼","returning_user":"ä»æä»¬ä¸ä¸æ¬¡çå° {{user}} æä¸éµå­äº â ä»ä¸æ¬¡åå¸æ¯ {{time}}."},"errors":{"file_too_large":"æ±æ­ï¼è¯¥æä»¶å¤ªå¤§ï¼æå¤§å¤§å°ä¸º {{max_size_kb}}KBï¼ãä¸ºä»ä¹ä¸å°æ¨çå¤§æä»¶ä¸ä¼ å°äºå±äº«æå¡ï¼ç¶åç²è´´é¾æ¥ï¼","too_many_dragged_and_dropped_files":"æ±æ­ï¼ä½ ä¸æ¬¡åªè½ä¸ä¼ æå¤{{max}}ä¸ªæä»¶ã","upload_not_authorized":"æ±æ­ï¼ä½ æ²¡æä¸ä¼ æä»¶çæéï¼éªè¯æ©å±ï¼{{authorized_extensions}}ï¼ã"},"abandon_edit":{"confirm":"æ¨ç¡®å®è¦æ¾å¼æåçæ´æ¹åï¼","no_save_draft":"ä¸ï¼ä¿å­èç¨¿","yes_value":"æ¯çï¼å¿½ç¥ç¼è¾"},"abandon":{"no_save_draft":"ä¸ï¼ä¿å­èç¨¿"},"via_auto_generated_email":"éè¿èªå¨çæé®ä»¶åè¡¨çå¸å­","few_likes_left":"è°¢è°¢ä½ çç­æï¼ä½ ä»å¤©çèµå¿«ç¨å®äºã","controls":{"read_indicator":"éè¯»äºå¸å­çç¨æ·","delete_replies":{"confirm":"ä½ ä¹æ³å é¤è¯¥è´´çåå¤ï¼"},"lock_post_description":"ç¦æ­¢åå¸èç¼è¾è¿ç¯å¸å­","unlock_post_description":"åè®¸åå¸èç¼è¾å¸å­","delete_topic_disallowed_modal":"ä½ æ æå é¤è¯¥è´´ãå¦æä½ çæ³å é¤ï¼åçä¸»æäº¤åå å¹¶æ è®°ã","delete_topic_disallowed":"ä½ æ æå é¤æ­¤ä¸»é¢","add_post_notice":"æ·»å ç®¡çäººåéç¥","remove_post_notice":"ç§»é¤ç®¡çäººåéç¥","remove_timer":"ç§»é¤è®¡æ¶å¨"},"actions":{"defer_flags":{"other":"å¿½ç¥æ è®°"},"people":{"off_topic":"æ è®°ä¸ºåç¦»ä¸»é¢","inappropriate":"ä¸æ°å½çè¨è¾","notify_moderators":"éç¥çä¸»","notify_user":"åéç§ä¿¡","bookmark":"æ¶è","like":{"other":"ç¹èµ"},"read":{"other":"çè¿"},"read_capped":{"other":"è¿æ{{count}}ä¸ªå¶ä»ç¨æ·çè¿"}}},"delete":{"confirm":{"other":"ä½ ç¡®å®è¦å é¤{{count}}ä¸ªå¸å­åï¼"}},"merge":{"confirm":{"other":"ç¡®å®è¦åå¹¶è¿ {{count}} ä¸ªå¸å­åï¼"}},"revisions":{"controls":{"revert":"è¿åè³è¯¥çæ¬","comparing_previous_to_current_out_of_total":"\u003cstrong\u003e{{previous}}\u003c/strong\u003e {{icon}} \u003cstrong\u003e{{current}}\u003c/strong\u003e / {{total}}"},"displays":{"side_by_side_markdown":{"button":"åå§"}}},"raw_email":{"displays":{"raw":{"title":"æ¾ç¤ºåå§é®ä»¶å°å","button":"åå§"},"text_part":{"title":"æ¾ç¤ºé®ä»¶çæå­é¨å"},"html_part":{"title":"æ¾ç¤ºé®ä»¶ç HTML é¨å"}}},"bookmarks":{"create":"åå»ºæ¶èå¤¹","edit":"ç¼è¾æ¶è","name_placeholder":"è¿ä¸ªæ¶èæ¯åä»ä¹ç¨çï¼","set_reminder":"æéæ","actions":{"delete_bookmark":{"name":"å é¤æ¶è","description":"ä»ä½ çä¸ªäººèµæä¸­å é¤æ¶èå¹¶åæ­¢æææå³è¯¥æ¶èçæé"},"edit_bookmark":{"name":"ç¼è¾æ¶è","description":"ç¼è¾æ¶èåç§°æä¿®æ¹æéçæ¥æåæ¶é´"}}}},"category":{"edit_dialog_title":"ç¼è¾: %{categoryName}","tags_allowed_tags":"éå¶è¿äºæ ç­¾åªè½ç¨å¨æ­¤åç±»","tags_allowed_tag_groups":"éå¶è¿äºæ ç­¾ç»åªè½ç¨å¨æ­¤åç±»","tags_placeholder":"ï¼å¯éï¼åè®¸ä½¿ç¨çæ ç­¾åè¡¨","tags_tab_description":"ä¸é¢ææå®çæ ç­¾åæ ç­¾ç»ä»å¨æ­¤åç±»ä»¥åå¶å®ä¹æå®äºå®ä»¬çåç±»ä¸­å¯ç¨ãå®ä»¬å°æ æ³å¨å¶å®åç±»ä¸­ä½¿ç¨ã","tag_groups_placeholder":"ï¼å¯éï¼åè®¸ä½¿ç¨çæ ç­¾ç»åè¡¨","manage_tag_groups_link":"ç®¡çè¿éçæ ç­¾ç»ã","allow_global_tags_label":"ä¹åè®¸å¶å®æ ç­¾","tag_group_selector_placeholder":"ï¼å¯éï¼æ ç­¾ç»","required_tag_group_description":"è¦æ±æ°ä¸»é¢åå«æ ç­¾ç»ä¸­çæ ç­¾ï¼","min_tags_from_required_group_label":"æ ç­¾æ°éï¼","required_tag_group_label":"æ ç­¾ç»ï¼","topic_featured_link_allowed":"åè®¸å¨è¯¥åç±»ä¸­åå¸ç¹è²é¾æ¥æ é¢","uncategorized_security_warning":"è¿æ¯ä¸ªç¹æ®çåç±»ãå¦æä¸ç¥éåºè¯¥è¯é¢å±äºåªä¸ªåç±»ï¼é£ä¹è¯·ä½¿ç¨è¿ä¸ªåç±»ãè¿ä¸ªåç±»æ²¡æå®å¨è®¾ç½®ã","uncategorized_general_warning":"è¿ä¸ªåç±»æ¯ç¹æ®çãå®ç¨ä½æªéæ©åç±»çæ°ä¸»é¢çé»è®¤åç±»ãå¦æä½ æ³è¦é¿åæ­¤è¡ä¸ºå¹¶å¼ºå¶éæ©åç±»ï¼\u003ca href=\"%{settingLink}\"\u003eè¯·å¨æ­¤å¤ç¦ç¨è¯¥è®¾ç½®\u003c/a\u003eãå¦æä½ è¦ä¿®æ¹å¶åç§°ææè¿°ï¼è¯·è½¬å°\u003ca href=\"%{customizeLink}\"\u003eèªå®ä¹/ææ¬åå®¹\u003c/a\u003eã","pending_permission_change_alert":"ä½ è¿æ²¡ææ·»å %{group}å°æ­¤åç±»ï¼ç¹å»æ­¤æé®æ·»å ã","mailinglist_mirror":"åç±»éåäºä¸ä¸ªé®ä»¶åè¡¨","show_subcategory_list":"å¨è¿ä¸ªåç±»ä¸­æå­åç±»åè¡¨æ¾ç¤ºå¨ä¸»é¢çä¸é¢","num_featured_topics":"åç±»é¡µé¢ä¸æ¾ç¤ºçä¸»é¢æ°éï¼","subcategory_num_featured_topics":"ç¶åç±»é¡µé¢ä¸çæ¨èä¸»é¢æ°éï¼","all_topics_wiki":"é»è®¤å°æ°ä¸»é¢è®¾ä¸ºç»´åºä¸»é¢","subcategory_list_style":"å­åç±»åè¡¨æ ·å¼ï¼","default_view":"é»è®¤ä¸»é¢åè¡¨ï¼","default_top_period":"é»è®¤ç­é¨æ¶é¿ï¼","reviewable_by_group":"ç®¡çäººåä¹å¤ï¼å¯ä»¥å®¡æ ¸è¯¥åç±»ä¸­çå¸å­åæ è®°çäººï¼","require_topic_approval":"æææ°ä¸»é¢éè¦çä¸»å®¡æ¹","require_reply_approval":"æææ°åå¤éè¦çä¸»å®¡æ¹","position":"åç±»é¡µé¢ä½ç½®ï¼","minimum_required_tags":"å¨ä¸ä¸ªä¸»é¢ä¸­è³å°å«æå¤å°ä¸ªæ ç­¾ï¼","num_auto_bump_daily":"æ¯å¤©èªå¨ç¢°æçä¸»é¢çæ°é","navigate_to_first_post_after_read":"éè¯»ä¸»é¢åå¯¼èªå°ç¬¬ä¸ä¸ªå¸å­","notifications":{"watching":{"description":"ä½ å°èªå¨å³æ³¨è¿äºåç±»ä¸­çææä¸»é¢ãä½ ä¼æ¶å°æææ°ä¸»é¢ä¸­çæ¯ä¸ä¸ªæ°å¸çéç¥ï¼è¿ä¼æ¾ç¤ºæ°åå¤çæ°éã"},"watching_first_post":{"description":"ä½ å°æ¶å°æ­¤åç±»ä¸­çæ°ä¸»é¢éç¥ï¼ä¸åæ¬åå¤ã"},"tracking":{"description":"ä½ å°èªå¨è·è¸ªè¿äºåç±»ä¸­çææä¸»é¢ãå¦ææäºº@ä½ æåå¤ä½ ï¼å°éç¥ä½ ï¼è¿å°æ¾ç¤ºæ°åå¤çæ°éã"}},"search_priority":{"label":"æç´¢ä¼åçº§","options":{"very_low":"éå¸¸ä½","low":"ä½","high":"é«","very_high":"éå¸¸é«"}},"sort_options":{"op_likes":"åå§å¸å­èµ","votes":"æç¥¨"},"sort_ascending":"ååº","sort_descending":"éåº","subcategory_list_styles":{"rows":"è¡","rows_with_featured_topics":"ææ¨èä¸»é¢çè¡"},"settings_sections":{"appearance":"ä¸»é¢"}},"flagging":{"custom_message":{"left":{"other":"å©ä½ {{count}}"}}},"post_links":{"about":"ä¸ºæ¬å¸å±å¼æ´å¤é¾æ¥"},"topic_statuses":{"personal_message":{"title":"æ­¤ä¸»é¢æ¯ä¸æ¡ç§ä¿¡","help":"æ­¤ä¸»é¢æ¯ä¸æ¡ç§ä¿¡"}},"filters":{"votes":{"title":"æ¨è","help":"éç¥¨æå¤çä¸»é¢"}},"browser_update":"æ±æ­ï¼\u003ca href=\"http://www.discourse.com/faq/#browser\"\u003eä½ çæµè§å¨çæ¬å¤ªä½ï¼æ æ³æ­£å¸¸è®¿é®è¯¥ç«ç¹\u003c/a\u003eãè¯·\u003ca href=\"http://browsehappy.com\"\u003eåçº§ä½ çæµè§å¨\u003c/a\u003eã","lightbox":{"previous":"ä¸ä¸ä¸ªï¼å·¦æ¹åé®ï¼","next":"ä¸ä¸ä¸ªï¼å³æ¹åé®ï¼","counter":"%curr% / %total%","close":"å³é­(Esc)","content_load_error":"\u003ca href=\"%url%\"\u003eåå®¹\u003c/a\u003eæ æ³å è½½","image_load_error":"\u003ca href=\"%url%\"\u003eå¾å\u003c/a\u003eæ æ³å è½½"},"keyboard_shortcuts_help":{"shortcut_key_delimiter_comma":"ï¼","shortcut_key_delimiter_plus":"+","shortcut_delimiter_or":"%{shortcut1}æ%{shortcut2}","shortcut_delimiter_slash":"%{shortcut1}/%{shortcut2}","shortcut_delimiter_space":"%{shortcut1}%{shortcut2}","navigation":{"go_to_unread_post":"%{shortcut}åå¾ç¬¬ä¸ä¸ªæªè¯»å¸å­"},"application":{"search":"%{shortcut} æç´¢"},"composing":{"title":"ç¼è¾","return":"%{shortcut}è¿åç¼è¾å¨","fullscreen":"%{shortcut}å¨å±ç¼è¾å¨"},"bookmarks":{"title":"æ¶è","enter":"%{shortcut} ä¿å­å¹¶å³é­","later_today":"%{shortcut} ä»å¤©æäºæ¶å","later_this_week":"%{shortcut} æ¬å¨çæäºæ¶å","tomorrow":"%{shortcut} æå¤©","next_week":"%{shortcut} ä¸å¨","next_month":"%{shortcut} ä¸ä¸ªæ","next_business_week":"%{shortcut} ä¸å¨å¼å§","next_business_day":"%{shortcut} ä¸ä¸ªå·¥ä½æ¥","custom":"%{shortcut} èªå®ä¹æ¥æåæ¶é´","none":"%{shortcut} æ²¡ææé","delete":"%{shortcut} å é¤æ¶è"},"actions":{"print":"%{shortcut} æå°ä¸»é¢","defer":"%{shortcut}å»¶è¿ä¸»é¢","topic_admin_actions":"%{shortcut}æå¼ä¸»é¢ç®¡ç"},"search_menu":{"title":"æç´¢èå","prev_next":"%{shortcut}ä¸ä¸ç§»å¨æéåå®¹","insert_url":"%{shortcut}å°éå®åå®¹æå¥å°æå¼çç¼è¾å¨"}},"badges":{"earned_n_times":{"other":"å·²è·å¾æ­¤å¾½ç«  %{count} æ¬¡"},"granted_on":"æäºäº%{date}","others_count":"å¶ä»æè¯¥å¾½ç« çäººï¼%{count}ï¼","allow_title":"ä½ å¯ä»¥å°è¯¥å¾½ç« è®¾ä¸ºå¤´è¡","multiple_grant":"å¯å¤æ¬¡è·å¾","granted":{"other":"%{count} å·²æäº"},"successfully_granted":"æåå° %{badge} æäº %{username}"},"tagging":{"changed":"æ ç­¾è¢«ä¿®æ¹ï¼","choose_for_topic":"å¯éæ ç­¾","info":"è¯¦æ","default_info":"è¯¥æ ç­¾ä¸éäºä»»ä½ç±»å«ï¼å¹¶ä¸æ²¡æåä¹è¯ã","category_restricted":"æ­¤æ ç­¾ä»éäºä½ æ æè®¿é®çåç±»ã","synonyms":"åä¹è¯","synonyms_description":"ä½¿ç¨ä»¥ä¸æ ç­¾æ¶ï¼å®ä»¬å°è¢«æ¿æ¢ä¸º\u003cb\u003e%{base_tag_name}\u003c/b\u003e ã","tag_groups_info":{"other":"æ­¤æ ç­¾å±äºè¿äºæ ç­¾ç»ï¼{{tag_groups}}ã"},"category_restrictions":{"other":"åªè½å¨è¿äºåç±»ä¸­ä½¿ç¨ï¼"},"edit_synonyms":"ç®¡çåä¹è¯","add_synonyms_label":"æ·»å åä¹è¯ï¼","add_synonyms_explanation":{"other":"å½åä»»ä½ä½¿ç¨äºæ­¤æ ç­¾çå°æ¹é½å°è¢«æ¹ä¸ºä½¿ç¨\u003cb\u003e%{tag_name}\u003c/b\u003eä»£æ¿ãä½ ç¡®å®è¦åºç¨æ­¤æ´æ¹åï¼"},"add_synonyms_failed":"ä¸è½å°ä»¥ä¸æ è®°æ·»å ä¸ºåä¹è¯ï¼ \u003cb\u003e%{tag_names}\u003c/b\u003e ãç¡®ä¿å®ä»¬æ²¡æåä¹è¯å¹¶ä¸ä¸æ¯å¶ä»æ ç­¾çåä¹è¯ã","remove_synonym":"å é¤åä¹è¯","delete_synonym_confirm":"æ¨ç¡®å®è¦å é¤åä¹è¯â %{tag_name}âåï¼","delete_confirm":{"other":"ä½ ç¡®å®ä½ æ³è¦å é¤è¿ä¸ªæ ç­¾ä»¥åæ¤éå¨{{count}}ä¸ªä¸»é¢ä¸­çå³èä¹ï¼"},"delete_confirm_no_topics":"ä½ ç¡®å®ä½ æ³è¦å é¤è¿ä¸ªæ ç­¾åï¼","delete_confirm_synonyms":{"other":"å¶{{count}}ä¸ªåä¹è¯ä¹å°è¢«å é¤ã"},"rename_instructions":"æ ç­¾çæ°åç§°ï¼","manage_groups":"ç®¡çæ ç­¾ç»","manage_groups_description":"ç®¡çæ ç­¾çç¾¤ç»","upload":"ä¸ä¼ æ ç­¾","upload_description":"ä¸ä¼ csvæä»¶ä»¥æ¹éåå»ºæ ç­¾","upload_instructions":"æ¯è¡ä¸ä¸ªï¼å¯éå¸¦æ'tag_nameï¼tag_group'æ ¼å¼çæ ç­¾ç»ã","upload_successful":"æ ç­¾ä¸ä¼ æå","delete_unused_confirmation":{"other":"%{count}æ ç­¾å°è¢«å é¤ï¼%{tags}"},"delete_unused_confirmation_more_tags":{"other":"%{tags}å%{count}æ´å¤"},"delete_unused":"å é¤æªä½¿ç¨çæ ç­¾","delete_unused_description":"å é¤æææªä¸ä¸»é¢æç§ä¿¡å³èçæ ç­¾","filters":{"untagged_without_category":"æ æ ç­¾ç%{filter}ä¸»é¢","untagged_with_category":"%{category}æ æ ç­¾ç%{filter}ä¸»é¢"},"notifications":{"watching":{"description":"ä½ å°èªå¨ççææå«ææ­¤æ ç­¾çä¸»é¢ãä½ å°æ¶å°æææ°å¸å­åä¸»é¢çéç¥ï¼æ­¤å¤ï¼ä¸»é¢æè¾¹è¿ä¼æ¾ç¤ºæªè¯»åæ°å¸å­çæ°éã"},"watching_first_post":{"description":"ä½ å°ä¼æ¶å°æ­¤æ ç­¾ä¸­çæ°ä¸»é¢çéç¥ï¼ä½å¯¹ä¸»é¢çåå¤åä¸ä¼ã"},"tracking":{"description":"ä½ å°èªå¨ççææå«ææ­¤æ ç­¾çä¸»é¢ãæªè¯»åæ°å¸çè®¡æ°å°æ¾ç¤ºå¨ä¸»é¢æè¾¹ã"},"regular":{"description":"æäºº@ä½ æåå¤ä½ çå¸å­æ¶å°ä¼éç¥ä½ "},"muted":{"description":"ä½ ä¸ä¼æ¶å°ä»»ä½å«ææ­¤æ ç­¾çæ°ä¸»é¢çéç¥ï¼ä¹ä¸ä¼å¨æªè¯»æ ã"}},"groups":{"about":"å°æ ç­¾åç»ä»¥ä¾¿ç®¡çã","tags_placeholder":"æ ç­¾","parent_tag_description":"æªè®¾ç½®ä¸çº§æ ç­¾åç¾¤ç»åæ ç­¾æ æ³ä½¿ç¨ã","one_per_topic_label":"åªå¯ç»ä¸»é¢è®¾ç½®ä¸ä¸ªè¯¥ç»åçæ ç­¾","name_placeholder":"æ ç­¾ç»åç§°","confirm_delete":"ç¡®å®è¦å é¤æ­¤æ ç­¾ç»åï¼","everyone_can_use":"æ¯ä¸ªäººé½å¯ä»¥ä½¿ç¨æ ç­¾","usable_only_by_staff":"æ ç­¾å¯¹ææäººå¯è§ï¼ä½åªæç®¡çäººåå¯ä»¥ä½¿ç¨å®ä»¬","visible_only_to_staff":"æ ç­¾ä»å¯¹ç®¡çäººåå¯è§"},"topics":{"none":{"latest":"æ²¡æææ°ä¸»é¢ã"}}},"invite":{"custom_message":"éè¿ç¼å\u003ca href\u003eèªå®ä¹æ¶æ¯\u003c/a\u003eï¼ä½¿ä½ çéè¯·æ´ä¸ªæ§åã","custom_message_template_topic":"ä½ å¥½ï¼æè§å¾ä½ å¯è½ä¼åæ¬¢è¿ä¸ªä¸»é¢ï¼"},"forced_anonymous":"ç±äºæç«¯è´è½½ï¼ææ¶åææäººæ¾ç¤ºï¼å·²æ³¨éç¨æ·ä¼çå°å®ã","safe_mode":{"enabled":"å®å¨æ¨¡å¼å·²ç»å¼å¯ï¼å³é­è¯¥æµè§å¨çªå£ä»¥éåºå®å¨æ¨¡å¼"},"poll":{"public":{"title":"æç¥¨ä¸º\u003cstrong\u003eå¬å¼\u003c/strong\u003eã"},"results":{"groups":{"title":"ä½ éè¦æä¸º %{groups} çä¸åæè½æç¥¨ã"},"vote":{"title":"ç»æå°æ¾ç¤ºå¨\u003cstrong\u003eæç¥¨\u003c/strong\u003eä¸ã"},"closed":{"title":"ç»æå°æ¾ç¤ºä¸æ¬¡\u003cstrong\u003eå³é­\u003c/strong\u003eã"},"staff":{"title":"ç»æä»æ¾ç¤ºç»\u003cstrong\u003eç®¡ç\u003c/strong\u003eæåã"}},"multiple":{"help":{"at_least_min_options":{"other":"è³å°éæ© \u003cstrong\u003e%{count}\u003c/strong\u003e ä¸ªéé¡¹"},"up_to_max_options":{"other":"æå¤éæ© \u003cstrong\u003e%{count}\u003c/strong\u003e ä¸ªéé¡¹"},"x_options":{"other":"éæ© \u003cstrong\u003e%{count}\u003c/strong\u003e ä¸ªéé¡¹"},"between_min_and_max_options":"éæ© \u003cstrong\u003e%{min}\u003c/strong\u003e è³ \u003cstrong\u003e%{max}\u003c/strong\u003e ä¸ªéé¡¹"}},"hide-results":{"label":"æ¾ç¤ºæç¥¨"},"group-results":{"title":"æç¨æ·å­æ®µåç»æç¥¨","label":"æ¾ç¤ºéè¯¯"},"ungroup-results":{"title":"åå¹¶æææç¥¨","label":"éèéè¯¯"},"export-results":{"title":"å°å¤æç¥¨ç»æ"},"automatic_close":{"closes_in":"äº\u003cstrong\u003e%{timeLeft}\u003c/strong\u003eå³é­ã","age":"\u003cstrong\u003e%{age}\u003c/strong\u003eå³é­"},"error_while_toggling_status":"å¯¹ä¸èµ·ï¼æ¹åæç¥¨ç¶ææ¶åºéäºã","error_while_casting_votes":"å¯¹ä¸èµ·ï¼æç¥¨æ¶åºéäºã","error_while_fetching_voters":"å¯¹ä¸èµ·ï¼æ¾ç¤ºæç¥¨èæ¶åºéäºã","error_while_exporting_results":"æ±æ­ï¼å¯¼åºæç¥¨ç»ææ¶åºéã","ui_builder":{"title":"åå»ºæç¥¨","insert":"æå¥æç¥¨","help":{"options_count":"è³å°è¾å¥1ä¸ªéé¡¹","invalid_values":"æå°å¼å¿é¡»å°äºæå¤§å¼ã","min_step_value":"æå°æ­¥é¿ä¸º1"},"poll_type":{"regular":"åé","multiple":"å¤é","number":"è¯å"},"poll_result":{"always":"æ»æ¯å¯è§","vote":"æç¥¨","closed":"å³é­æ¶","staff":"ä»ç®¡çäººå"},"poll_groups":{"label":"åè®¸çç¾¤ç»"},"poll_chart_type":{"label":"å¾è¡¨ç±»å"},"poll_config":{"max":"æå¤§","min":"æå°","step":"æ¢¯çº§"},"poll_public":{"label":"æ¾ç¤ºæç¥¨äºº"},"poll_options":{"label":"æ¯è¡è¾å¥ä¸ä¸ªè°æ¥éé¡¹"},"automatic_close":{"label":"èªå¨å³é­æç¥¨"}}},"discourse_local_dates":{"relative_dates":{"today":"ä»å¤©%{time}","tomorrow":"æå¤©%{time}","yesterday":"æ¨å¤©%{time}","countdown":{"passed":"æ¥æå·²è¿"}},"title":"æå¥æ¥æ/æ¶é´","create":{"form":{"format_description":"åç¨æ·æ¾ç¤ºæ¥æçæ ¼å¼ã ä½¿ç¨â\\T\\Zâä»¥åè¯æ¾ç¤ºç¨æ·æ¶åºï¼æ¬§æ´²/å·´é»ï¼","timezones_description":"æ¶åºå°ç¨äºå¨é¢è§åæ¤åä¸­æ¾ç¤ºæ¥æã","recurring_description":"å®ä¹éå¤äºä»¶ãä½ è¿å¯ä»¥æå¨ç¼è¾è¡¨åçæçå¨ææ§éé¡¹ï¼å¹¶ä½¿ç¨ä»¥ä¸é®ä¹ä¸ï¼å¹´ï¼å­£ï¼æï¼å¨ï¼æ¥ï¼å°æ¶ï¼åéï¼ç§ï¼æ¯«ç§ã","timezone":"æ¶åº","until":"ç´å°......","recurring":{"every_day":"æ¯å¤©","every_week":"æ¯å¨","every_two_weeks":"æ¯ä¸¤å¨","every_month":"æ¯æ","every_two_months":"æ¯ä¸¤ä¸ªæ","every_three_months":"æ¯ä¸ä¸ªæ","every_six_months":"æ¯å­ä¸ªæ","every_year":"æ¯å¹´"}}}},"presence":{"replying_to_topic":{"other":"æ­£å¨åå¤"}},"voting":{"title":"æç¥¨","reached_limit":"ä½ æ²¡æéç¥¨äºï¼åå é¤ä¸å¼ å·²éç¥¨ï¼","list_votes":"æ¾ç¤ºä½ çæç¥¨","votes_nav_help":"éç¥¨æå¤çä¸»é¢","voted":"ä½ å¨è¯¥ä¸»é¢ä¸­å·²ç»æè¿ç¥¨äº","allow_topic_voting":"åè®¸ç¨æ·å¨æ­¤åç±»ä¸­ä¸ºä¸»å¸ç¹æ¨è","vote_title_plural":"æ¨è","voted_title":"å·²æç¥¨","voting_limit":"æ¬¡æ°éå¶","votes_left":{"other":"ä½ è¿æ {{count}} å¼ éç¥¨ï¼æ¥ç\u003ca href='{{path}}'\u003eä½ çæç¥¨\u003c/a\u003eã"},"votes":{"other":"{{count}} ç¥¨"},"anonymous_button":{"other":"æç¥¨"},"remove_vote":"ç§»é¤æç¥¨"},"docker":{"upgrade":"å½åä½¿ç¨ Discourse çæ§çæ¬ã","perform_upgrade":"ç¹å»è¿éåçº§ã"}}},"en":{"js":{"dates":{"medium_with_ago":{"x_months":{"one":"%{count} month ago"},"x_years":{"one":"%{count} year ago"}}},"topic_count_latest":{"one":"See {{count}} new or updated topic"},"topic_count_unread":{"one":"See {{count}} unread topic"},"review":{"topic_has_pending":{"one":"This topic has \u003cb\u003e%{count}\u003c/b\u003e post pending approval"},"user_percentage":{"summary":{"one":"{{agreed}}, {{disagreed}}, {{ignored}} ({{count}} total flag)"},"agreed":{"one":"{{count}}% agree"},"disagreed":{"one":"{{count}}% disagree"},"ignored":{"one":"{{count}}% ignore"}},"topics":{"unique_users":{"one":"%{count} user"}},"replies":{"one":"%{count} reply"},"approval":{"pending_posts":{"one":"You have \u003cstrong\u003e%{count}\u003c/strong\u003e post pending."}}},"categories":{"topic_stat_sentence_week":{"one":"%{count} new topic in the past week."},"topic_stat_sentence_month":{"one":"%{count} new topic in the past month."}},"user":{"change_password":{"emoji":"lock emoji"},"summary":{"topic_count":{"one":"topic created"},"post_count":{"one":"post created"},"likes_given":{"one":"given"},"likes_received":{"one":"received"},"days_visited":{"one":"day visited"},"topics_entered":{"one":"topic viewed"},"posts_read":{"one":"post read"},"bookmark_count":{"one":"bookmark"}}},"local_time":"Local Time","email_login":{"emoji":"lock emoji"},"invites":{"emoji":"envelope emoji"},"composer":{"group_mentioned":{"one":"By mentioning {{group}}, you are about to notify \u003ca href='{{group_link}}'\u003e%{count} person\u003c/a\u003e â are you sure?"}},"notifications":{"tooltip":{"high_priority":{"one":"%{count} unread high priority notification"}},"liked_consolidated_description":{"one":"liked {{count}} of your posts"}},"topic":{"auto_close_immediate":{"one":"The last post in the topic is already %{count} hour old, so the topic will be closed immediately."},"move_to_new_message":{"instructions":{"one":"You are about to create a new message and populate it with the post you've selected."}},"move_to_existing_message":{"instructions":{"one":"Please choose the message you'd like to move that post to."}},"publish_page":{"title":"Page Publishing"},"change_owner":{"instructions":{"one":"Please choose a new owner for the post by \u003cb\u003e@{{old_user}}\u003c/b\u003e"},"instructions_without_old_user":{"one":"Please choose a new owner for the post"}},"deleted_by_author":{"one":"(topic withdrawn by author, will be automatically deleted in %{count} hour unless flagged)"}},"post":{"controls":{"publish_page":"Page Publishing"},"actions":{"defer_flags":{"one":"Ignore flag"},"people":{"like":{"one":"liked this"},"read":{"one":"read this"},"read_capped":{"one":"and {{count}} other read this"}}},"delete":{"confirm":{"one":"Are you sure you want to delete that post?"}},"merge":{"confirm":{"one":"Are you sure you want to merge those posts?"}}},"flagging":{"custom_message":{"left":{"one":"%{count} remaining"}}},"badges":{"earned_n_times":{"one":"Earned this badge %{count} time"},"granted":{"one":"%{count} granted"}},"tagging":{"tag_groups_info":{"one":"This tag belongs to the group \"{{tag_groups}}\"."},"category_restrictions":{"one":"It can only be used in this category:"},"add_synonyms_explanation":{"one":"Any place that currently uses this tag will be changed to use \u003cb\u003e%{tag_name}\u003c/b\u003e instead. Are you sure you want to make this change?"},"delete_confirm":{"one":"Are you sure you want to delete this tag and remove it from %{count} topic it is assigned to?"},"delete_confirm_synonyms":{"one":"Its synonym will also be deleted."},"delete_unused_confirmation":{"one":"%{count} tag will be deleted: %{tags}"},"delete_unused_confirmation_more_tags":{"one":"%{tags} and %{count} more"}},"discourse_internet_explorer":{"deprecation_warning":"This site will soon remove support for Internet Explorer 11 - please update your browser"},"poll":{"multiple":{"help":{"at_least_min_options":{"one":"Choose at least \u003cstrong\u003e%{count}\u003c/strong\u003e option"},"up_to_max_options":{"one":"Choose up to \u003cstrong\u003e%{count}\u003c/strong\u003e option"},"x_options":{"one":"Choose \u003cstrong\u003e%{count}\u003c/strong\u003e option"}}},"ui_builder":{"poll_chart_type":{"bar":"Bar","pie":"Pie"}}},"presence":{"replying_to_topic":{"one":"replying"}},"voting":{"votes_left":{"one":"You have {{count}} vote left, see \u003ca href='{{path}}'\u003eyour votes\u003c/a\u003e."},"votes":{"one":"{{count}} vote"},"anonymous_button":{"one":"Vote"}},"admin":{"logs":{"staff_actions":{"actions":{"discourse_upgrade":"Upgrade to the Latest Version"}}}},"docker":{"link_to_upgrade":"Perform upgrades here."}}}};
I18n.locale = 'lt';
I18n.pluralizationRules.lt = MessageFormat.locale.lt;
//! moment.js

;(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, (function () { 'use strict';

    var hookCallback;

    function hooks () {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return (Object.getOwnPropertyNames(obj).length === 0);
        } else {
            var k;
            for (k in obj) {
                if (obj.hasOwnProperty(k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty           : false,
            unusedTokens    : [],
            unusedInput     : [],
            overflow        : -2,
            charsLeftOver   : 0,
            nullInput       : false,
            invalidMonth    : null,
            invalidFormat   : false,
            userInvalidated : false,
            iso             : false,
            parsedDateParts : [],
            meridiem        : null,
            rfc2822         : false,
            weekdayMismatch : false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this);
            var len = t.length >>> 0;

            for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            var parsedParts = some.call(flags.parsedDateParts, function (i) {
                return i != null;
            });
            var isNowValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.weekdayMismatch &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated &&
                (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid = isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            }
            else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid (flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        }
        else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment (obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function absFloor (number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false &&
                (typeof console !==  'undefined') && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [];
                var arg;
                for (var i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (var key in arguments[0]) {
                            arg += key + ': ' + arguments[0][key] + ', ';
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }

    function set (config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' + (/\d{1,2}/).source);
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) &&
                    !hasOwnProp(childConfig, prop) &&
                    isObject(parentConfig[prop])) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i, res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    };

    function calendar (key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS  : 'h:mm:ss A',
        LT   : 'h:mm A',
        L    : 'MM/DD/YYYY',
        LL   : 'MMMM D, YYYY',
        LLL  : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat (key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate () {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal (number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future : 'in %s',
        past   : '%s ago',
        s  : 'a few seconds',
        ss : '%d seconds',
        m  : 'a minute',
        mm : '%d minutes',
        h  : 'an hour',
        hh : '%d hours',
        d  : 'a day',
        dd : '%d days',
        M  : 'a month',
        MM : '%d months',
        y  : 'a year',
        yy : '%d years'
    };

    function relativeTime (number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (isFunction(output)) ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }

    function pastFuture (diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias (unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
            units.push({unit: u, priority: priorities[u]});
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '', i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match3to4      = /\d\d\d\d?/;     //     999 - 9999
    var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

    var regexes = {};

    function addRegexToken (token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }

    function getParseRegexForToken (token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken (token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken (token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear () {
        return isLeapYear(this.year());
    }

    function makeGetSet (unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get (mom, unit) {
        return mom.isValid() ?
            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }

    function set$1 (mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
            }
            else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet (units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }


    function stringSet (units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units);
            for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m, format) {
        if (!m) {
            return isArray(this._months) ? this._months :
                this._months['standalone'];
        }
        return isArray(this._months) ? this._months[m.month()] :
            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m, format) {
        if (!m) {
            return isArray(this._monthsShort) ? this._monthsShort :
                this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse (monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth (mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth (value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth () {
        return daysInMonth(this.year(), this.month());
    }

    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ?
                this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }

    var defaultMonthsRegex = matchWord;
    function monthsRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ?
                this._monthsStrictRegex : this._monthsRegex;
        }
    }

    function computeMonthsParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }

    function createDate (y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
    }

    function createUTCDate (y) {
        var date;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            var args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear, resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek, resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek (mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 6th is the first week of the year.
    };

    function localeFirstDayOfWeek () {
        return this._week.dow;
    }

    function localeFirstDayOfYear () {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek (input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek (input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd',   function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd',   function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays (ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m, format) {
        var weekdays = isArray(this._weekdays) ? this._weekdays :
            this._weekdays[(m && m !== true && this._weekdays.isFormat.test(format)) ? 'format' : 'standalone'];
        return (m === true) ? shiftWeekdays(weekdays, this._week.dow)
            : (m) ? weekdays[m.day()] : weekdays;
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
        return (m === true) ? shiftWeekdays(this._weekdaysShort, this._week.dow)
            : (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
        return (m === true) ? shiftWeekdays(this._weekdaysMin, this._week.dow)
            : (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse (weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    var defaultWeekdaysRegex = matchWord;
    function weekdaysRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ?
                this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }

    var defaultWeekdaysShortRegex = matchWord;
    function weekdaysShortRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ?
                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }

    var defaultWeekdaysMinRegex = matchWord;
    function weekdaysMinRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ?
                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }


    function computeWeekdaysParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = this.weekdaysMin(mom, '');
            shortp = this.weekdaysShort(mom, '');
            longp = this.weekdays(mom, '');
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('k',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour they want. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse
    };

    // internal storage for locale config files
    var locales = {};
    var localeFamilies = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && (typeof module !== 'undefined') &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                var aliasedRequire = require;
                aliasedRequire('./locale/' + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {}
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
            else {
                if ((typeof console !==  'undefined') && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn('Locale ' + key +  ' not found. Did you forget to load it?');
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale (name, config) {
        if (config !== null) {
            var locale, parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride',
                        'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);


            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale, tmpLocale, parentConfig = baseConfig;
            // MERGE
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
                parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow (m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            var curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to beginning of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
        ['YYYY-DDD', /\d{4}-\d{3}/],
        ['YYYY-MM', /\d{4}-\d\d/, false],
        ['YYYYYYMMDD', /[+-]\d{10}/],
        ['YYYYMMDD', /\d{8}/],
        // YYYYMM is NOT allowed by the standard
        ['GGGG[W]WWE', /\d{4}W\d{3}/],
        ['GGGG[W]WW', /\d{4}W\d{2}/, false],
        ['YYYYDDD', /\d{7}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
        ['HH:mm:ss', /\d\d:\d\d:\d\d/],
        ['HH:mm', /\d\d:\d\d/],
        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
        ['HHmmss', /\d\d\d\d\d\d/],
        ['HHmm', /\d\d\d\d/],
        ['HH', /\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime, dateFormat, timeFormat, tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10)
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    var obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
    };

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10);
            var m = hm % 100, h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i));
        if (match) {
            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        // Final attempt, use Input Fallback
        hooks.createFromInputFallback(config);
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
        'discouraged and will be removed in an upcoming major release. Please refer to ' +
        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            // console.log('token', token, 'parsedInput', parsedInput,
            //         'regex', getParseRegexForToken(token, config));
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                }
                else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }


    function meridiemFixWrap (locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
            return obj && parseInt(obj, 10);
        });

        configFromArray(config);
    }

    function createFromConfig (config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig (config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        }  else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC (input, format, locale, strict, isUTC) {
        var c = {};

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if ((isObject(input) && isObjectEmpty(input)) ||
                (isArray(input) && input.length === 0)) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other < this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other > this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +(new Date());
    };

    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

    function isDurationValid(m) {
        for (var key in m) {
            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                return false;
            }
        }

        var unitHasDecimal = false;
        for (var i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration (duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration (obj) {
        return obj instanceof Duration;
    }

    function absRound (number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // FORMATTING

    function offset (token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z',  matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);

        if (matches === null) {
            return null;
        }

        var chunk   = matches[matches.length - 1] || [];
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ?
          0 :
          parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset (m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone (input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC (keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal (keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset () {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            }
            else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset (input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime () {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted () {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted = this.isValid() &&
                compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal () {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset () {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc () {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    // and further modified to allow for strings containing both week and day
    var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms : input._milliseconds,
                d  : input._days,
                M  : input._months
            };
        } else if (isNumber(input)) {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y  : 0,
                d  : toInt(match[DATE])                         * sign,
                h  : toInt(match[HOUR])                         * sign,
                m  : toInt(match[MINUTE])                       * sign,
                s  : toInt(match[SECOND])                       * sign,
                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
            };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y : parseIso(match[2], sign),
                M : parseIso(match[3], sign),
                w : parseIso(match[4], sign),
                d : parseIso(match[5], sign),
                h : parseIso(match[6], sign),
                m : parseIso(match[7], sign),
                s : parseIso(match[8], sign)
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso (inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return {milliseconds: 0, months: 0};
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract (mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add      = createAdder(1, 'add');
    var subtract = createAdder(-1, 'subtract');

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
    }

    function calendar$1 (time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse';

        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }

    function clone () {
        return new Moment(this);
    }

    function isAfter (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween (from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) &&
            (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }

    function isSame (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }

    function isSameOrAfter (input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore (input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff (input, units, asFloat) {
        var that,
            zoneDelta,
            output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year': output = monthDiff(this, that) / 12; break;
            case 'month': output = monthDiff(this, that); break;
            case 'quarter': output = monthDiff(this, that) / 3; break;
            case 'second': output = (this - that) / 1e3; break; // 1000
            case 'minute': output = (this - that) / 6e4; break; // 1000 * 60
            case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60
            case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst
            case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default: output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff (a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString () {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true;
        var m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect () {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment';
        var zone = '';
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        var prefix = '[' + func + '("]';
        var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format (inputString) {
        if (!inputString) {
            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow (withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow (withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale (key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData () {
        return this._locale;
    }

    var MS_PER_SECOND = 1000;
    var MS_PER_MINUTE = 60 * MS_PER_SECOND;
    var MS_PER_HOUR = 60 * MS_PER_MINUTE;
    var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
    }

    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }

    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }

    function startOf (units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function endOf (units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function valueOf () {
        return this._d.valueOf() - ((this._offset || 0) * 60000);
    }

    function unix () {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate () {
        return new Date(this.valueOf());
    }

    function toArray () {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject () {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function toJSON () {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2 () {
        return isValid(this);
    }

    function parsingFlags () {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt () {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken (token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);


    // PARSING

    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input,
                this.week(),
                this.weekday(),
                this.localeData()._week.dow,
                this.localeData()._week.doy);
    }

    function getSetISOWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }

    function getISOWeeksInYear () {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear () {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter (input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ?
          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
          locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear (input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });


    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr () {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add               = add;
    proto.calendar          = calendar$1;
    proto.clone             = clone;
    proto.diff              = diff;
    proto.endOf             = endOf;
    proto.format            = format;
    proto.from              = from;
    proto.fromNow           = fromNow;
    proto.to                = to;
    proto.toNow             = toNow;
    proto.get               = stringGet;
    proto.invalidAt         = invalidAt;
    proto.isAfter           = isAfter;
    proto.isBefore          = isBefore;
    proto.isBetween         = isBetween;
    proto.isSame            = isSame;
    proto.isSameOrAfter     = isSameOrAfter;
    proto.isSameOrBefore    = isSameOrBefore;
    proto.isValid           = isValid$2;
    proto.lang              = lang;
    proto.locale            = locale;
    proto.localeData        = localeData;
    proto.max               = prototypeMax;
    proto.min               = prototypeMin;
    proto.parsingFlags      = parsingFlags;
    proto.set               = stringSet;
    proto.startOf           = startOf;
    proto.subtract          = subtract;
    proto.toArray           = toArray;
    proto.toObject          = toObject;
    proto.toDate            = toDate;
    proto.toISOString       = toISOString;
    proto.inspect           = inspect;
    proto.toJSON            = toJSON;
    proto.toString          = toString;
    proto.unix              = unix;
    proto.valueOf           = valueOf;
    proto.creationData      = creationData;
    proto.year       = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear    = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month       = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week           = proto.weeks        = getSetWeek;
    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
    proto.weeksInYear    = getWeeksInYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.date       = getSetDayOfMonth;
    proto.day        = proto.days             = getSetDayOfWeek;
    proto.weekday    = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear  = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset            = getSetOffset;
    proto.utc                  = setOffsetToUTC;
    proto.local                = setOffsetToLocal;
    proto.parseZone            = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST                = isDaylightSavingTime;
    proto.isLocal              = isLocal;
    proto.isUtcOffset          = isUtcOffset;
    proto.isUtc                = isUtc;
    proto.isUTC                = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

    function createUnix (input) {
        return createLocal(input * 1000);
    }

    function createInZone () {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat (string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar        = calendar;
    proto$1.longDateFormat  = longDateFormat;
    proto$1.invalidDate     = invalidDate;
    proto$1.ordinal         = ordinal;
    proto$1.preparse        = preParsePostFormat;
    proto$1.postformat      = preParsePostFormat;
    proto$1.relativeTime    = relativeTime;
    proto$1.pastFuture      = pastFuture;
    proto$1.set             = set;

    proto$1.months            =        localeMonths;
    proto$1.monthsShort       =        localeMonthsShort;
    proto$1.monthsParse       =        localeMonthsParse;
    proto$1.monthsRegex       = monthsRegex;
    proto$1.monthsShortRegex  = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays       =        localeWeekdays;
    proto$1.weekdaysMin    =        localeWeekdaysMin;
    proto$1.weekdaysShort  =        localeWeekdaysShort;
    proto$1.weekdaysParse  =        localeWeekdaysParse;

    proto$1.weekdaysRegex       =        weekdaysRegex;
    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1 (format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl (format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl (localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0;

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths (format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort (format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports

    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

    var mathAbs = Math.abs;

    function abs () {
        var data           = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days         = mathAbs(this._days);
        this._months       = mathAbs(this._months);

        data.milliseconds  = mathAbs(data.milliseconds);
        data.seconds       = mathAbs(data.seconds);
        data.minutes       = mathAbs(data.minutes);
        data.hours         = mathAbs(data.hours);
        data.months        = mathAbs(data.months);
        data.years         = mathAbs(data.years);

        return this;
    }

    function addSubtract$1 (duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days         += direction * other._days;
        duration._months       += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1 (input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1 (input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil (number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble () {
        var milliseconds = this._milliseconds;
        var days         = this._days;
        var months       = this._months;
        var data         = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds           = absFloor(milliseconds / 1000);
        data.seconds      = seconds % 60;

        minutes           = absFloor(seconds / 60);
        data.minutes      = minutes % 60;

        hours             = absFloor(minutes / 60);
        data.hours        = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days   = days;
        data.months = months;
        data.years  = years;

        return this;
    }

    function daysToMonths (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays (months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as (units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch (units) {
                case 'month':   return months;
                case 'quarter': return months / 3;
                case 'year':    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week'   : return days / 7     + milliseconds / 6048e5;
                case 'day'    : return days         + milliseconds / 864e5;
                case 'hour'   : return days * 24    + milliseconds / 36e5;
                case 'minute' : return days * 1440  + milliseconds / 6e4;
                case 'second' : return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                default: throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1 () {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs (alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asQuarters     = makeAs('Q');
    var asYears        = makeAs('y');

    function clone$1 () {
        return createDuration(this);
    }

    function get$2 (units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');

    function weeks () {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        ss: 44,         // a few seconds to seconds
        s : 45,         // seconds to minute
        m : 45,         // minutes to hour
        h : 22,         // hours to day
        d : 26,         // days to month
        M : 11          // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds  = round(duration.as('s'));
        var minutes  = round(duration.as('m'));
        var hours    = round(duration.as('h'));
        var days     = round(duration.as('d'));
        var months   = round(duration.as('M'));
        var years    = round(duration.as('y'));

        var a = seconds <= thresholds.ss && ['s', seconds]  ||
                seconds < thresholds.s   && ['ss', seconds] ||
                minutes <= 1             && ['m']           ||
                minutes < thresholds.m   && ['mm', minutes] ||
                hours   <= 1             && ['h']           ||
                hours   < thresholds.h   && ['hh', hours]   ||
                days    <= 1             && ['d']           ||
                days    < thresholds.d   && ['dd', days]    ||
                months  <= 1             && ['M']           ||
                months  < thresholds.M   && ['MM', months]  ||
                years   <= 1             && ['y']           || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding (roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof(roundingFunction) === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold (threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize (withSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return ((x > 0) - (x < 0)) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000;
        var days         = abs$1(this._days);
        var months       = abs$1(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes           = absFloor(seconds / 60);
        hours             = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years  = absFloor(months / 12);
        months %= 12;


        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        var totalSign = total < 0 ? '-' : '';
        var ymSign = sign(this._months) !== sign(total) ? '-' : '';
        var daysSign = sign(this._days) !== sign(total) ? '-' : '';
        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return totalSign + 'P' +
            (Y ? ymSign + Y + 'Y' : '') +
            (M ? ymSign + M + 'M' : '') +
            (D ? daysSign + D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? hmsSign + h + 'H' : '') +
            (m ? hmsSign + m + 'M' : '') +
            (s ? hmsSign + s + 'S' : '');
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid        = isValid$1;
    proto$2.abs            = abs;
    proto$2.add            = add$1;
    proto$2.subtract       = subtract$1;
    proto$2.as             = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds      = asSeconds;
    proto$2.asMinutes      = asMinutes;
    proto$2.asHours        = asHours;
    proto$2.asDays         = asDays;
    proto$2.asWeeks        = asWeeks;
    proto$2.asMonths       = asMonths;
    proto$2.asQuarters     = asQuarters;
    proto$2.asYears        = asYears;
    proto$2.valueOf        = valueOf$1;
    proto$2._bubble        = bubble;
    proto$2.clone          = clone$1;
    proto$2.get            = get$2;
    proto$2.milliseconds   = milliseconds;
    proto$2.seconds        = seconds;
    proto$2.minutes        = minutes;
    proto$2.hours          = hours;
    proto$2.days           = days;
    proto$2.weeks          = weeks;
    proto$2.months         = months;
    proto$2.years          = years;
    proto$2.humanize       = humanize;
    proto$2.toISOString    = toISOString$1;
    proto$2.toString       = toISOString$1;
    proto$2.toJSON         = toISOString$1;
    proto$2.locale         = locale;
    proto$2.localeData     = localeData;

    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    proto$2.lang = lang;

    // Side effect imports

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    hooks.version = '2.24.0';

    setHookCallback(createLocal);

    hooks.fn                    = proto;
    hooks.min                   = min;
    hooks.max                   = max;
    hooks.now                   = now;
    hooks.utc                   = createUTC;
    hooks.unix                  = createUnix;
    hooks.months                = listMonths;
    hooks.isDate                = isDate;
    hooks.locale                = getSetGlobalLocale;
    hooks.invalid               = createInvalid;
    hooks.duration              = createDuration;
    hooks.isMoment              = isMoment;
    hooks.weekdays              = listWeekdays;
    hooks.parseZone             = createInZone;
    hooks.localeData            = getLocale;
    hooks.isDuration            = isDuration;
    hooks.monthsShort           = listMonthsShort;
    hooks.weekdaysMin           = listWeekdaysMin;
    hooks.defineLocale          = defineLocale;
    hooks.updateLocale          = updateLocale;
    hooks.locales               = listLocales;
    hooks.weekdaysShort         = listWeekdaysShort;
    hooks.normalizeUnits        = normalizeUnits;
    hooks.relativeTimeRounding  = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat        = getCalendarFormat;
    hooks.prototype             = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD',                             // <input type="date" />
        TIME: 'HH:mm',                                  // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss',                       // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS',                        // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW',                             // <input type="week" />
        MONTH: 'YYYY-MM'                                // <input type="month" />
    };

    return hooks;

})));
//! moment-timezone.js
//! version : 0.5.25
//! Copyright (c) JS Foundation and other contributors
//! license : MIT
//! github.com/moment/moment-timezone

(function (root, factory) {
	"use strict";

	/*global define*/
	if (typeof module === 'object' && module.exports) {
		module.exports = factory(require('moment')); // Node
	} else if (typeof define === 'function' && define.amd) {
		define(['moment'], factory);                 // AMD
	} else {
		factory(root.moment);                        // Browser
	}
}(this, function (moment) {
	"use strict";

	// Do not load moment-timezone a second time.
	// if (moment.tz !== undefined) {
	// 	logError('Moment Timezone ' + moment.tz.version + ' was already loaded ' + (moment.tz.dataVersion ? 'with data from ' : 'without any data') + moment.tz.dataVersion);
	// 	return moment;
	// }

	var VERSION = "0.5.25",
		zones = {},
		links = {},
		names = {},
		guesses = {},
		cachedGuess;

	if (!moment || typeof moment.version !== 'string') {
		logError('Moment Timezone requires Moment.js. See https://momentjs.com/timezone/docs/#/use-it/browser/');
	}

	var momentVersion = moment.version.split('.'),
		major = +momentVersion[0],
		minor = +momentVersion[1];

	// Moment.js version check
	if (major < 2 || (major === 2 && minor < 6)) {
		logError('Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js ' + moment.version + '. See momentjs.com');
	}

	/************************************
		Unpacking
	************************************/

	function charCodeToInt(charCode) {
		if (charCode > 96) {
			return charCode - 87;
		} else if (charCode > 64) {
			return charCode - 29;
		}
		return charCode - 48;
	}

	function unpackBase60(string) {
		var i = 0,
			parts = string.split('.'),
			whole = parts[0],
			fractional = parts[1] || '',
			multiplier = 1,
			num,
			out = 0,
			sign = 1;

		// handle negative numbers
		if (string.charCodeAt(0) === 45) {
			i = 1;
			sign = -1;
		}

		// handle digits before the decimal
		for (i; i < whole.length; i++) {
			num = charCodeToInt(whole.charCodeAt(i));
			out = 60 * out + num;
		}

		// handle digits after the decimal
		for (i = 0; i < fractional.length; i++) {
			multiplier = multiplier / 60;
			num = charCodeToInt(fractional.charCodeAt(i));
			out += num * multiplier;
		}

		return out * sign;
	}

	function arrayToInt (array) {
		for (var i = 0; i < array.length; i++) {
			array[i] = unpackBase60(array[i]);
		}
	}

	function intToUntil (array, length) {
		for (var i = 0; i < length; i++) {
			array[i] = Math.round((array[i - 1] || 0) + (array[i] * 60000)); // minutes to milliseconds
		}

		array[length - 1] = Infinity;
	}

	function mapIndices (source, indices) {
		var out = [], i;

		for (i = 0; i < indices.length; i++) {
			out[i] = source[indices[i]];
		}

		return out;
	}

	function unpack (string) {
		var data = string.split('|'),
			offsets = data[2].split(' '),
			indices = data[3].split(''),
			untils  = data[4].split(' ');

		arrayToInt(offsets);
		arrayToInt(indices);
		arrayToInt(untils);

		intToUntil(untils, indices.length);

		return {
			name       : data[0],
			abbrs      : mapIndices(data[1].split(' '), indices),
			offsets    : mapIndices(offsets, indices),
			untils     : untils,
			population : data[5] | 0
		};
	}

	/************************************
		Zone object
	************************************/

	function Zone (packedString) {
		if (packedString) {
			this._set(unpack(packedString));
		}
	}

	Zone.prototype = {
		_set : function (unpacked) {
			this.name       = unpacked.name;
			this.abbrs      = unpacked.abbrs;
			this.untils     = unpacked.untils;
			this.offsets    = unpacked.offsets;
			this.population = unpacked.population;
		},

		_index : function (timestamp) {
			var target = +timestamp,
				untils = this.untils,
				i;

			for (i = 0; i < untils.length; i++) {
				if (target < untils[i]) {
					return i;
				}
			}
		},

		parse : function (timestamp) {
			var target  = +timestamp,
				offsets = this.offsets,
				untils  = this.untils,
				max     = untils.length - 1,
				offset, offsetNext, offsetPrev, i;

			for (i = 0; i < max; i++) {
				offset     = offsets[i];
				offsetNext = offsets[i + 1];
				offsetPrev = offsets[i ? i - 1 : i];

				if (offset < offsetNext && tz.moveAmbiguousForward) {
					offset = offsetNext;
				} else if (offset > offsetPrev && tz.moveInvalidForward) {
					offset = offsetPrev;
				}

				if (target < untils[i] - (offset * 60000)) {
					return offsets[i];
				}
			}

			return offsets[max];
		},

		abbr : function (mom) {
			return this.abbrs[this._index(mom)];
		},

		offset : function (mom) {
			logError("zone.offset has been deprecated in favor of zone.utcOffset");
			return this.offsets[this._index(mom)];
		},

		utcOffset : function (mom) {
			return this.offsets[this._index(mom)];
		}
	};

	/************************************
		Current Timezone
	************************************/

	function OffsetAt(at) {
		var timeString = at.toTimeString();
		var abbr = timeString.match(/\([a-z ]+\)/i);
		if (abbr && abbr[0]) {
			// 17:56:31 GMT-0600 (CST)
			// 17:56:31 GMT-0600 (Central Standard Time)
			abbr = abbr[0].match(/[A-Z]/g);
			abbr = abbr ? abbr.join('') : undefined;
		} else {
			// 17:56:31 CST
			// 17:56:31 GMT+0800 (å°åæ¨æºæé)
			abbr = timeString.match(/[A-Z]{3,5}/g);
			abbr = abbr ? abbr[0] : undefined;
		}

		if (abbr === 'GMT') {
			abbr = undefined;
		}

		this.at = +at;
		this.abbr = abbr;
		this.offset = at.getTimezoneOffset();
	}

	function ZoneScore(zone) {
		this.zone = zone;
		this.offsetScore = 0;
		this.abbrScore = 0;
	}

	ZoneScore.prototype.scoreOffsetAt = function (offsetAt) {
		this.offsetScore += Math.abs(this.zone.utcOffset(offsetAt.at) - offsetAt.offset);
		if (this.zone.abbr(offsetAt.at).replace(/[^A-Z]/g, '') !== offsetAt.abbr) {
			this.abbrScore++;
		}
	};

	function findChange(low, high) {
		var mid, diff;

		while ((diff = ((high.at - low.at) / 12e4 | 0) * 6e4)) {
			mid = new OffsetAt(new Date(low.at + diff));
			if (mid.offset === low.offset) {
				low = mid;
			} else {
				high = mid;
			}
		}

		return low;
	}

	function userOffsets() {
		var startYear = new Date().getFullYear() - 2,
			last = new OffsetAt(new Date(startYear, 0, 1)),
			offsets = [last],
			change, next, i;

		for (i = 1; i < 48; i++) {
			next = new OffsetAt(new Date(startYear, i, 1));
			if (next.offset !== last.offset) {
				change = findChange(last, next);
				offsets.push(change);
				offsets.push(new OffsetAt(new Date(change.at + 6e4)));
			}
			last = next;
		}

		for (i = 0; i < 4; i++) {
			offsets.push(new OffsetAt(new Date(startYear + i, 0, 1)));
			offsets.push(new OffsetAt(new Date(startYear + i, 6, 1)));
		}

		return offsets;
	}

	function sortZoneScores (a, b) {
		if (a.offsetScore !== b.offsetScore) {
			return a.offsetScore - b.offsetScore;
		}
		if (a.abbrScore !== b.abbrScore) {
			return a.abbrScore - b.abbrScore;
		}
		return b.zone.population - a.zone.population;
	}

	function addToGuesses (name, offsets) {
		var i, offset;
		arrayToInt(offsets);
		for (i = 0; i < offsets.length; i++) {
			offset = offsets[i];
			guesses[offset] = guesses[offset] || {};
			guesses[offset][name] = true;
		}
	}

	function guessesForUserOffsets (offsets) {
		var offsetsLength = offsets.length,
			filteredGuesses = {},
			out = [],
			i, j, guessesOffset;

		for (i = 0; i < offsetsLength; i++) {
			guessesOffset = guesses[offsets[i].offset] || {};
			for (j in guessesOffset) {
				if (guessesOffset.hasOwnProperty(j)) {
					filteredGuesses[j] = true;
				}
			}
		}

		for (i in filteredGuesses) {
			if (filteredGuesses.hasOwnProperty(i)) {
				out.push(names[i]);
			}
		}

		return out;
	}

	function rebuildGuess () {

		// use Intl API when available and returning valid time zone
		try {
			var intlName = Intl.DateTimeFormat().resolvedOptions().timeZone;
			if (intlName && intlName.length > 3) {
				var name = names[normalizeName(intlName)];
				if (name) {
					return name;
				}
				logError("Moment Timezone found " + intlName + " from the Intl api, but did not have that data loaded.");
			}
		} catch (e) {
			// Intl unavailable, fall back to manual guessing.
		}

		var offsets = userOffsets(),
			offsetsLength = offsets.length,
			guesses = guessesForUserOffsets(offsets),
			zoneScores = [],
			zoneScore, i, j;

		for (i = 0; i < guesses.length; i++) {
			zoneScore = new ZoneScore(getZone(guesses[i]), offsetsLength);
			for (j = 0; j < offsetsLength; j++) {
				zoneScore.scoreOffsetAt(offsets[j]);
			}
			zoneScores.push(zoneScore);
		}

		zoneScores.sort(sortZoneScores);

		return zoneScores.length > 0 ? zoneScores[0].zone.name : undefined;
	}

	function guess (ignoreCache) {
		if (!cachedGuess || ignoreCache) {
			cachedGuess = rebuildGuess();
		}
		return cachedGuess;
	}

	/************************************
		Global Methods
	************************************/

	function normalizeName (name) {
		return (name || '').toLowerCase().replace(/\//g, '_');
	}

	function addZone (packed) {
		var i, name, split, normalized;

		if (typeof packed === "string") {
			packed = [packed];
		}

		for (i = 0; i < packed.length; i++) {
			split = packed[i].split('|');
			name = split[0];
			normalized = normalizeName(name);
			zones[normalized] = packed[i];
			names[normalized] = name;
			addToGuesses(normalized, split[2].split(' '));
		}
	}

	function getZone (name, caller) {
		
		name = normalizeName(name);

		var zone = zones[name];
		var link;

		if (zone instanceof Zone) {
			return zone;
		}

		if (typeof zone === 'string') {
			zone = new Zone(zone);
			zones[name] = zone;
			return zone;
		}

		// Pass getZone to prevent recursion more than 1 level deep
		if (links[name] && caller !== getZone && (link = getZone(links[name], getZone))) {
			zone = zones[name] = new Zone();
			zone._set(link);
			zone.name = names[name];
			return zone;
		}

		return null;
	}

	function getNames () {
		var i, out = [];

		for (i in names) {
			if (names.hasOwnProperty(i) && (zones[i] || zones[links[i]]) && names[i]) {
				out.push(names[i]);
			}
		}

		return out.sort();
	}

	function addLink (aliases) {
		var i, alias, normal0, normal1;

		if (typeof aliases === "string") {
			aliases = [aliases];
		}

		for (i = 0; i < aliases.length; i++) {
			alias = aliases[i].split('|');

			normal0 = normalizeName(alias[0]);
			normal1 = normalizeName(alias[1]);

			links[normal0] = normal1;
			names[normal0] = alias[0];

			links[normal1] = normal0;
			names[normal1] = alias[1];
		}
	}

	function loadData (data) {
		addZone(data.zones);
		addLink(data.links);
		tz.dataVersion = data.version;
	}

	function zoneExists (name) {
		if (!zoneExists.didShowError) {
			zoneExists.didShowError = true;
				logError("moment.tz.zoneExists('" + name + "') has been deprecated in favor of !moment.tz.zone('" + name + "')");
		}
		return !!getZone(name);
	}

	function needsOffset (m) {
		var isUnixTimestamp = (m._f === 'X' || m._f === 'x');
		return !!(m._a && (m._tzm === undefined) && !isUnixTimestamp);
	}

	function logError (message) {
		if (typeof console !== 'undefined' && typeof console.error === 'function') {
			console.error(message);
		}
	}

	/************************************
		moment.tz namespace
	************************************/

	function tz (input) {
		var args = Array.prototype.slice.call(arguments, 0, -1),
			name = arguments[arguments.length - 1],
			zone = getZone(name),
			out  = moment.utc.apply(null, args);

		if (zone && !moment.isMoment(input) && needsOffset(out)) {
			out.add(zone.parse(out), 'minutes');
		}

		out.tz(name);

		return out;
	}

	tz.version      = VERSION;
	tz.dataVersion  = '';
	tz._zones       = zones;
	tz._links       = links;
	tz._names       = names;
	tz.add          = addZone;
	tz.link         = addLink;
	tz.load         = loadData;
	tz.zone         = getZone;
	tz.zoneExists   = zoneExists; // deprecated in 0.1.0
	tz.guess        = guess;
	tz.names        = getNames;
	tz.Zone         = Zone;
	tz.unpack       = unpack;
	tz.unpackBase60 = unpackBase60;
	tz.needsOffset  = needsOffset;
	tz.moveInvalidForward   = true;
	tz.moveAmbiguousForward = false;

	/************************************
		Interface with Moment.js
	************************************/

	var fn = moment.fn;

	moment.tz = tz;

	moment.defaultZone = null;

	moment.updateOffset = function (mom, keepTime) {
		var zone = moment.defaultZone,
			offset;

		if (mom._z === undefined) {
			if (zone && needsOffset(mom) && !mom._isUTC) {
				mom._d = moment.utc(mom._a)._d;
				mom.utc().add(zone.parse(mom), 'minutes');
			}
			mom._z = zone;
		}
		if (mom._z) {
			offset = mom._z.utcOffset(mom);
			if (Math.abs(offset) < 16) {
				offset = offset / 60;
			}
			if (mom.utcOffset !== undefined) {
				var z = mom._z;
				mom.utcOffset(-offset, keepTime);
				mom._z = z;
			} else {
				mom.zone(offset, keepTime);
			}
		}
	};

	fn.tz = function (name, keepTime) {
		if (name) {
			if (typeof name !== 'string') {
				throw new Error('Time zone name must be a string, got ' + name + ' [' + typeof name + ']');
			}
			this._z = getZone(name);
			if (this._z) {
				moment.updateOffset(this, keepTime);
			} else {
				logError("Moment Timezone has no data for " + name + ". See http://momentjs.com/timezone/docs/#/data-loading/.");
			}
			return this;
		}
		if (this._z) { return this._z.name; }
	};

	function abbrWrap (old) {
		return function () {
			if (this._z) { return this._z.abbr(this); }
			return old.call(this);
		};
	}

	function resetZoneWrap (old) {
		return function () {
			this._z = null;
			return old.apply(this, arguments);
		};
	}

	function resetZoneWrap2 (old) {
		return function () {
			if (arguments.length > 0) this._z = null;
			return old.apply(this, arguments);
		};
	}

	fn.zoneName  = abbrWrap(fn.zoneName);
	fn.zoneAbbr  = abbrWrap(fn.zoneAbbr);
	fn.utc       = resetZoneWrap(fn.utc);
	fn.local     = resetZoneWrap(fn.local);
	fn.utcOffset = resetZoneWrap2(fn.utcOffset);
	
	moment.tz.setDefault = function(name) {
		if (major < 2 || (major === 2 && minor < 9)) {
			logError('Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js ' + moment.version + '.');
		}
		moment.defaultZone = name ? getZone(name) : null;
		return moment;
	};

	// Cloning a moment should include the _z property.
	var momentProperties = moment.momentProperties;
	if (Object.prototype.toString.call(momentProperties) === '[object Array]') {
		// moment 2.8.1+
		momentProperties.push('_z');
		momentProperties.push('_a');
	} else if (momentProperties) {
		// moment 2.7.0
		momentProperties._z = null;
	}

	loadData({
		"version": "2019a",
		"zones": [
			"Africa/Abidjan|GMT|0|0||48e5",
			"Africa/Nairobi|EAT|-30|0||47e5",
			"Africa/Algiers|CET|-10|0||26e5",
			"Africa/Lagos|WAT|-10|0||17e6",
			"Africa/Maputo|CAT|-20|0||26e5",
			"Africa/Cairo|EET EEST|-20 -30|01010|1M2m0 gL0 e10 mn0|15e6",
			"Africa/Casablanca|+00 +01|0 -10|01010101010101010101010101010101|1LHC0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 28M0 e00 2600 e00 28M0 e00 2600 gM0 2600 e00 28M0 e00|32e5",
			"Europe/Paris|CET CEST|-10 -20|01010101010101010101010|1LHB0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00|11e6",
			"Africa/Johannesburg|SAST|-20|0||84e5",
			"Africa/Khartoum|EAT CAT|-30 -20|01|1Usl0|51e5",
			"Africa/Sao_Tome|GMT WAT|0 -10|010|1UQN0 2q00",
			"Africa/Tripoli|EET|-20|0||11e5",
			"Africa/Windhoek|CAT WAT|-20 -10|010101010|1LKo0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0|32e4",
			"America/Adak|HST HDT|a0 90|01010101010101010101010|1Lzo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|326",
			"America/Anchorage|AKST AKDT|90 80|01010101010101010101010|1Lzn0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|30e4",
			"America/Santo_Domingo|AST|40|0||29e5",
			"America/Fortaleza|-03|30|0||34e5",
			"America/Asuncion|-03 -04|30 40|01010101010101010101010|1LEP0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0|28e5",
			"America/Panama|EST|50|0||15e5",
			"America/Mexico_City|CST CDT|60 50|01010101010101010101010|1LKw0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0|20e6",
			"America/Managua|CST|60|0||22e5",
			"America/La_Paz|-04|40|0||19e5",
			"America/Lima|-05|50|0||11e6",
			"America/Denver|MST MDT|70 60|01010101010101010101010|1Lzl0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e5",
			"America/Campo_Grande|-03 -04|30 40|01010101010101010101010|1LqP0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0 1HB0 FX0 1HB0 IL0 1HB0 FX0 1HB0 IL0 1EN0 FX0 1HB0|77e4",
			"America/Cancun|CST CDT EST|60 50 50|0102|1LKw0 1lb0 Dd0|63e4",
			"America/Caracas|-0430 -04|4u 40|01|1QMT0|29e5",
			"America/Chicago|CST CDT|60 50|01010101010101010101010|1Lzk0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|92e5",
			"America/Chihuahua|MST MDT|70 60|01010101010101010101010|1LKx0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0|81e4",
			"America/Phoenix|MST|70|0||42e5",
			"America/Los_Angeles|PST PDT|80 70|01010101010101010101010|1Lzm0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e6",
			"America/New_York|EST EDT|50 40|01010101010101010101010|1Lzj0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e6",
			"America/Fort_Nelson|PST PDT MST|80 70 70|0102|1Lzm0 1zb0 Op0|39e2",
			"America/Halifax|AST ADT|40 30|01010101010101010101010|1Lzi0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|39e4",
			"America/Godthab|-03 -02|30 20|01010101010101010101010|1LHB0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00|17e3",
			"America/Grand_Turk|EST EDT AST|50 40 40|0101210101010101010|1Lzj0 1zb0 Op0 1zb0 5Ip0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e2",
			"America/Havana|CST CDT|50 40|01010101010101010101010|1Lzh0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0|21e5",
			"America/Metlakatla|PST AKST AKDT|80 90 80|012121201212121212121|1PAa0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 uM0 jB0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2",
			"America/Miquelon|-03 -02|30 20|01010101010101010101010|1Lzh0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|61e2",
			"America/Montevideo|-02 -03|20 30|0101|1Lzg0 1o10 11z0|17e5",
			"America/Noronha|-02|20|0||30e2",
			"America/Port-au-Prince|EST EDT|50 40|010101010101010101010|1Lzj0 1zb0 Op0 1zb0 3iN0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5",
			"Antarctica/Palmer|-03 -04|30 40|01010|1LSP0 Rd0 46n0 Ap0|40",
			"America/Santiago|-03 -04|30 40|010101010101010101010|1LSP0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1zb0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0|62e5",
			"America/Sao_Paulo|-02 -03|20 30|01010101010101010101010|1LqO0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0 1HB0 FX0 1HB0 IL0 1HB0 FX0 1HB0 IL0 1EN0 FX0 1HB0|20e6",
			"Atlantic/Azores|-01 +00|10 0|01010101010101010101010|1LHB0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00|25e4",
			"America/St_Johns|NST NDT|3u 2u|01010101010101010101010|1Lzhu 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4",
			"Antarctica/Casey|+08 +11|-80 -b0|010|1RWg0 3m10|10",
			"Asia/Bangkok|+07|-70|0||15e6",
			"Pacific/Port_Moresby|+10|-a0|0||25e4",
			"Pacific/Guadalcanal|+11|-b0|0||11e4",
			"Asia/Tashkent|+05|-50|0||23e5",
			"Pacific/Auckland|NZDT NZST|-d0 -c0|01010101010101010101010|1LKe0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00|14e5",
			"Asia/Baghdad|+03|-30|0||66e5",
			"Antarctica/Troll|+00 +02|0 -20|01010101010101010101010|1LHB0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00|40",
			"Asia/Dhaka|+06|-60|0||16e6",
			"Asia/Amman|EET EEST|-20 -30|01010101010101010101010|1LGK0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00|25e5",
			"Asia/Kamchatka|+12|-c0|0||18e4",
			"Asia/Baku|+04 +05|-40 -50|01010|1LHA0 1o00 11A0 1o00|27e5",
			"Asia/Barnaul|+07 +06|-70 -60|010|1N7v0 3rd0",
			"Asia/Beirut|EET EEST|-20 -30|01010101010101010101010|1LHy0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0|22e5",
			"Asia/Kuala_Lumpur|+08|-80|0||71e5",
			"Asia/Kolkata|IST|-5u|0||15e6",
			"Asia/Chita|+10 +08 +09|-a0 -80 -90|012|1N7s0 3re0|33e4",
			"Asia/Ulaanbaatar|+08 +09|-80 -90|01010|1O8G0 1cJ0 1cP0 1cJ0|12e5",
			"Asia/Shanghai|CST|-80|0||23e6",
			"Asia/Colombo|+0530|-5u|0||22e5",
			"Asia/Damascus|EET EEST|-20 -30|01010101010101010101010|1LGK0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0|26e5",
			"Asia/Dili|+09|-90|0||19e4",
			"Asia/Dubai|+04|-40|0||39e5",
			"Asia/Famagusta|EET EEST +03|-20 -30 -30|0101012010101010101010|1LHB0 1o00 11A0 1o00 11A0 15U0 2Ks0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00",
			"Asia/Gaza|EET EEST|-20 -30|01010101010101010101010|1LGK0 1nX0 1210 1nz0 1220 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0|18e5",
			"Asia/Hong_Kong|HKT|-80|0||73e5",
			"Asia/Hovd|+07 +08|-70 -80|01010|1O8H0 1cJ0 1cP0 1cJ0|81e3",
			"Asia/Irkutsk|+09 +08|-90 -80|01|1N7t0|60e4",
			"Europe/Istanbul|EET EEST +03|-20 -30 -30|0101012|1LI10 1nA0 11A0 1tA0 U00 15w0|13e6",
			"Asia/Jakarta|WIB|-70|0||31e6",
			"Asia/Jayapura|WIT|-90|0||26e4",
			"Asia/Jerusalem|IST IDT|-20 -30|01010101010101010101010|1LGM0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0|81e4",
			"Asia/Kabul|+0430|-4u|0||46e5",
			"Asia/Karachi|PKT|-50|0||24e6",
			"Asia/Kathmandu|+0545|-5J|0||12e5",
			"Asia/Yakutsk|+10 +09|-a0 -90|01|1N7s0|28e4",
			"Asia/Krasnoyarsk|+08 +07|-80 -70|01|1N7u0|10e5",
			"Asia/Magadan|+12 +10 +11|-c0 -a0 -b0|012|1N7q0 3Cq0|95e3",
			"Asia/Makassar|WITA|-80|0||15e5",
			"Asia/Manila|PST|-80|0||24e6",
			"Europe/Athens|EET EEST|-20 -30|01010101010101010101010|1LHB0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00|35e5",
			"Asia/Novosibirsk|+07 +06|-70 -60|010|1N7v0 4eN0|15e5",
			"Asia/Omsk|+07 +06|-70 -60|01|1N7v0|12e5",
			"Asia/Pyongyang|KST KST|-90 -8u|010|1P4D0 6BA0|29e5",
			"Asia/Qyzylorda|+06 +05|-60 -50|01|1Xei0|73e4",
			"Asia/Rangoon|+0630|-6u|0||48e5",
			"Asia/Sakhalin|+11 +10|-b0 -a0|010|1N7r0 3rd0|58e4",
			"Asia/Seoul|KST|-90|0||23e6",
			"Asia/Srednekolymsk|+12 +11|-c0 -b0|01|1N7q0|35e2",
			"Asia/Tehran|+0330 +0430|-3u -4u|01010101010101010101010|1LEku 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0|14e6",
			"Asia/Tokyo|JST|-90|0||38e6",
			"Asia/Tomsk|+07 +06|-70 -60|010|1N7v0 3Qp0|10e5",
			"Asia/Vladivostok|+11 +10|-b0 -a0|01|1N7r0|60e4",
			"Asia/Yekaterinburg|+06 +05|-60 -50|01|1N7w0|14e5",
			"Europe/Lisbon|WET WEST|0 -10|01010101010101010101010|1LHB0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00|27e5",
			"Atlantic/Cape_Verde|-01|10|0||50e4",
			"Australia/Sydney|AEDT AEST|-b0 -a0|01010101010101010101010|1LKg0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0|40e5",
			"Australia/Adelaide|ACDT ACST|-au -9u|01010101010101010101010|1LKgu 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0|11e5",
			"Australia/Brisbane|AEST|-a0|0||20e5",
			"Australia/Darwin|ACST|-9u|0||12e4",
			"Australia/Eucla|+0845|-8J|0||368",
			"Australia/Lord_Howe|+11 +1030|-b0 -au|01010101010101010101010|1LKf0 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1fzu 1cMu|347",
			"Australia/Perth|AWST|-80|0||18e5",
			"Pacific/Easter|-05 -06|50 60|010101010101010101010|1LSP0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1zb0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0|30e2",
			"Europe/Dublin|GMT IST|0 -10|01010101010101010101010|1LHB0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00|12e5",
			"Etc/GMT-1|+01|-10|0|",
			"Pacific/Fakaofo|+13|-d0|0||483",
			"Pacific/Kiritimati|+14|-e0|0||51e2",
			"Etc/GMT-2|+02|-20|0|",
			"Pacific/Tahiti|-10|a0|0||18e4",
			"Pacific/Niue|-11|b0|0||12e2",
			"Etc/GMT+12|-12|c0|0|",
			"Pacific/Galapagos|-06|60|0||25e3",
			"Etc/GMT+7|-07|70|0|",
			"Pacific/Pitcairn|-08|80|0||56",
			"Pacific/Gambier|-09|90|0||125",
			"Etc/UTC|UTC|0|0|",
			"Europe/Ulyanovsk|+04 +03|-40 -30|010|1N7y0 3rd0|13e5",
			"Europe/London|GMT BST|0 -10|01010101010101010101010|1LHB0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00|10e6",
			"Europe/Chisinau|EET EEST|-20 -30|01010101010101010101010|1LHA0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00|67e4",
			"Europe/Kaliningrad|+03 EET|-30 -20|01|1N7z0|44e4",
			"Europe/Kirov|+04 +03|-40 -30|01|1N7y0|48e4",
			"Europe/Moscow|MSK MSK|-40 -30|01|1N7y0|16e6",
			"Europe/Saratov|+04 +03|-40 -30|010|1N7y0 5810",
			"Europe/Simferopol|EET MSK MSK|-20 -40 -30|012|1LHA0 1nW0|33e4",
			"Europe/Volgograd|+04 +03|-40 -30|010|1N7y0 9Jd0|10e5",
			"Pacific/Honolulu|HST|a0|0||37e4",
			"MET|MET MEST|-10 -20|01010101010101010101010|1LHB0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00",
			"Pacific/Chatham|+1345 +1245|-dJ -cJ|01010101010101010101010|1LKe0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00|600",
			"Pacific/Apia|+14 +13|-e0 -d0|01010101010101010101010|1LKe0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00|37e3",
			"Pacific/Bougainville|+10 +11|-a0 -b0|01|1NwE0|18e4",
			"Pacific/Fiji|+13 +12|-d0 -c0|01010101010101010101010|1Lfp0 1SN0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 s00 1VA0|88e4",
			"Pacific/Guam|ChST|-a0|0||17e4",
			"Pacific/Marquesas|-0930|9u|0||86e2",
			"Pacific/Pago_Pago|SST|b0|0||37e2",
			"Pacific/Norfolk|+1130 +11|-bu -b0|01|1PoCu|25e4",
			"Pacific/Tongatapu|+13 +14|-d0 -e0|010|1S4d0 s00|75e3"
		],
		"links": [
			"Africa/Abidjan|Africa/Accra",
			"Africa/Abidjan|Africa/Bamako",
			"Africa/Abidjan|Africa/Banjul",
			"Africa/Abidjan|Africa/Bissau",
			"Africa/Abidjan|Africa/Conakry",
			"Africa/Abidjan|Africa/Dakar",
			"Africa/Abidjan|Africa/Freetown",
			"Africa/Abidjan|Africa/Lome",
			"Africa/Abidjan|Africa/Monrovia",
			"Africa/Abidjan|Africa/Nouakchott",
			"Africa/Abidjan|Africa/Ouagadougou",
			"Africa/Abidjan|Africa/Timbuktu",
			"Africa/Abidjan|America/Danmarkshavn",
			"Africa/Abidjan|Atlantic/Reykjavik",
			"Africa/Abidjan|Atlantic/St_Helena",
			"Africa/Abidjan|Etc/GMT",
			"Africa/Abidjan|Etc/GMT+0",
			"Africa/Abidjan|Etc/GMT-0",
			"Africa/Abidjan|Etc/GMT0",
			"Africa/Abidjan|Etc/Greenwich",
			"Africa/Abidjan|GMT",
			"Africa/Abidjan|GMT+0",
			"Africa/Abidjan|GMT-0",
			"Africa/Abidjan|GMT0",
			"Africa/Abidjan|Greenwich",
			"Africa/Abidjan|Iceland",
			"Africa/Algiers|Africa/Tunis",
			"Africa/Cairo|Egypt",
			"Africa/Casablanca|Africa/El_Aaiun",
			"Africa/Johannesburg|Africa/Maseru",
			"Africa/Johannesburg|Africa/Mbabane",
			"Africa/Lagos|Africa/Bangui",
			"Africa/Lagos|Africa/Brazzaville",
			"Africa/Lagos|Africa/Douala",
			"Africa/Lagos|Africa/Kinshasa",
			"Africa/Lagos|Africa/Libreville",
			"Africa/Lagos|Africa/Luanda",
			"Africa/Lagos|Africa/Malabo",
			"Africa/Lagos|Africa/Ndjamena",
			"Africa/Lagos|Africa/Niamey",
			"Africa/Lagos|Africa/Porto-Novo",
			"Africa/Maputo|Africa/Blantyre",
			"Africa/Maputo|Africa/Bujumbura",
			"Africa/Maputo|Africa/Gaborone",
			"Africa/Maputo|Africa/Harare",
			"Africa/Maputo|Africa/Kigali",
			"Africa/Maputo|Africa/Lubumbashi",
			"Africa/Maputo|Africa/Lusaka",
			"Africa/Nairobi|Africa/Addis_Ababa",
			"Africa/Nairobi|Africa/Asmara",
			"Africa/Nairobi|Africa/Asmera",
			"Africa/Nairobi|Africa/Dar_es_Salaam",
			"Africa/Nairobi|Africa/Djibouti",
			"Africa/Nairobi|Africa/Juba",
			"Africa/Nairobi|Africa/Kampala",
			"Africa/Nairobi|Africa/Mogadishu",
			"Africa/Nairobi|Indian/Antananarivo",
			"Africa/Nairobi|Indian/Comoro",
			"Africa/Nairobi|Indian/Mayotte",
			"Africa/Tripoli|Libya",
			"America/Adak|America/Atka",
			"America/Adak|US/Aleutian",
			"America/Anchorage|America/Juneau",
			"America/Anchorage|America/Nome",
			"America/Anchorage|America/Sitka",
			"America/Anchorage|America/Yakutat",
			"America/Anchorage|US/Alaska",
			"America/Campo_Grande|America/Cuiaba",
			"America/Chicago|America/Indiana/Knox",
			"America/Chicago|America/Indiana/Tell_City",
			"America/Chicago|America/Knox_IN",
			"America/Chicago|America/Matamoros",
			"America/Chicago|America/Menominee",
			"America/Chicago|America/North_Dakota/Beulah",
			"America/Chicago|America/North_Dakota/Center",
			"America/Chicago|America/North_Dakota/New_Salem",
			"America/Chicago|America/Rainy_River",
			"America/Chicago|America/Rankin_Inlet",
			"America/Chicago|America/Resolute",
			"America/Chicago|America/Winnipeg",
			"America/Chicago|CST6CDT",
			"America/Chicago|Canada/Central",
			"America/Chicago|US/Central",
			"America/Chicago|US/Indiana-Starke",
			"America/Chihuahua|America/Mazatlan",
			"America/Chihuahua|Mexico/BajaSur",
			"America/Denver|America/Boise",
			"America/Denver|America/Cambridge_Bay",
			"America/Denver|America/Edmonton",
			"America/Denver|America/Inuvik",
			"America/Denver|America/Ojinaga",
			"America/Denver|America/Shiprock",
			"America/Denver|America/Yellowknife",
			"America/Denver|Canada/Mountain",
			"America/Denver|MST7MDT",
			"America/Denver|Navajo",
			"America/Denver|US/Mountain",
			"America/Fortaleza|America/Araguaina",
			"America/Fortaleza|America/Argentina/Buenos_Aires",
			"America/Fortaleza|America/Argentina/Catamarca",
			"America/Fortaleza|America/Argentina/ComodRivadavia",
			"America/Fortaleza|America/Argentina/Cordoba",
			"America/Fortaleza|America/Argentina/Jujuy",
			"America/Fortaleza|America/Argentina/La_Rioja",
			"America/Fortaleza|America/Argentina/Mendoza",
			"America/Fortaleza|America/Argentina/Rio_Gallegos",
			"America/Fortaleza|America/Argentina/Salta",
			"America/Fortaleza|America/Argentina/San_Juan",
			"America/Fortaleza|America/Argentina/San_Luis",
			"America/Fortaleza|America/Argentina/Tucuman",
			"America/Fortaleza|America/Argentina/Ushuaia",
			"America/Fortaleza|America/Bahia",
			"America/Fortaleza|America/Belem",
			"America/Fortaleza|America/Buenos_Aires",
			"America/Fortaleza|America/Catamarca",
			"America/Fortaleza|America/Cayenne",
			"America/Fortaleza|America/Cordoba",
			"America/Fortaleza|America/Jujuy",
			"America/Fortaleza|America/Maceio",
			"America/Fortaleza|America/Mendoza",
			"America/Fortaleza|America/Paramaribo",
			"America/Fortaleza|America/Recife",
			"America/Fortaleza|America/Rosario",
			"America/Fortaleza|America/Santarem",
			"America/Fortaleza|Antarctica/Rothera",
			"America/Fortaleza|Atlantic/Stanley",
			"America/Fortaleza|Etc/GMT+3",
			"America/Halifax|America/Glace_Bay",
			"America/Halifax|America/Goose_Bay",
			"America/Halifax|America/Moncton",
			"America/Halifax|America/Thule",
			"America/Halifax|Atlantic/Bermuda",
			"America/Halifax|Canada/Atlantic",
			"America/Havana|Cuba",
			"America/La_Paz|America/Boa_Vista",
			"America/La_Paz|America/Guyana",
			"America/La_Paz|America/Manaus",
			"America/La_Paz|America/Porto_Velho",
			"America/La_Paz|Brazil/West",
			"America/La_Paz|Etc/GMT+4",
			"America/Lima|America/Bogota",
			"America/Lima|America/Eirunepe",
			"America/Lima|America/Guayaquil",
			"America/Lima|America/Porto_Acre",
			"America/Lima|America/Rio_Branco",
			"America/Lima|Brazil/Acre",
			"America/Lima|Etc/GMT+5",
			"America/Los_Angeles|America/Dawson",
			"America/Los_Angeles|America/Ensenada",
			"America/Los_Angeles|America/Santa_Isabel",
			"America/Los_Angeles|America/Tijuana",
			"America/Los_Angeles|America/Vancouver",
			"America/Los_Angeles|America/Whitehorse",
			"America/Los_Angeles|Canada/Pacific",
			"America/Los_Angeles|Canada/Yukon",
			"America/Los_Angeles|Mexico/BajaNorte",
			"America/Los_Angeles|PST8PDT",
			"America/Los_Angeles|US/Pacific",
			"America/Los_Angeles|US/Pacific-New",
			"America/Managua|America/Belize",
			"America/Managua|America/Costa_Rica",
			"America/Managua|America/El_Salvador",
			"America/Managua|America/Guatemala",
			"America/Managua|America/Regina",
			"America/Managua|America/Swift_Current",
			"America/Managua|America/Tegucigalpa",
			"America/Managua|Canada/Saskatchewan",
			"America/Mexico_City|America/Bahia_Banderas",
			"America/Mexico_City|America/Merida",
			"America/Mexico_City|America/Monterrey",
			"America/Mexico_City|Mexico/General",
			"America/New_York|America/Detroit",
			"America/New_York|America/Fort_Wayne",
			"America/New_York|America/Indiana/Indianapolis",
			"America/New_York|America/Indiana/Marengo",
			"America/New_York|America/Indiana/Petersburg",
			"America/New_York|America/Indiana/Vevay",
			"America/New_York|America/Indiana/Vincennes",
			"America/New_York|America/Indiana/Winamac",
			"America/New_York|America/Indianapolis",
			"America/New_York|America/Iqaluit",
			"America/New_York|America/Kentucky/Louisville",
			"America/New_York|America/Kentucky/Monticello",
			"America/New_York|America/Louisville",
			"America/New_York|America/Montreal",
			"America/New_York|America/Nassau",
			"America/New_York|America/Nipigon",
			"America/New_York|America/Pangnirtung",
			"America/New_York|America/Thunder_Bay",
			"America/New_York|America/Toronto",
			"America/New_York|Canada/Eastern",
			"America/New_York|EST5EDT",
			"America/New_York|US/East-Indiana",
			"America/New_York|US/Eastern",
			"America/New_York|US/Michigan",
			"America/Noronha|Atlantic/South_Georgia",
			"America/Noronha|Brazil/DeNoronha",
			"America/Noronha|Etc/GMT+2",
			"America/Panama|America/Atikokan",
			"America/Panama|America/Cayman",
			"America/Panama|America/Coral_Harbour",
			"America/Panama|America/Jamaica",
			"America/Panama|EST",
			"America/Panama|Jamaica",
			"America/Phoenix|America/Creston",
			"America/Phoenix|America/Dawson_Creek",
			"America/Phoenix|America/Hermosillo",
			"America/Phoenix|MST",
			"America/Phoenix|US/Arizona",
			"America/Santiago|Chile/Continental",
			"America/Santo_Domingo|America/Anguilla",
			"America/Santo_Domingo|America/Antigua",
			"America/Santo_Domingo|America/Aruba",
			"America/Santo_Domingo|America/Barbados",
			"America/Santo_Domingo|America/Blanc-Sablon",
			"America/Santo_Domingo|America/Curacao",
			"America/Santo_Domingo|America/Dominica",
			"America/Santo_Domingo|America/Grenada",
			"America/Santo_Domingo|America/Guadeloupe",
			"America/Santo_Domingo|America/Kralendijk",
			"America/Santo_Domingo|America/Lower_Princes",
			"America/Santo_Domingo|America/Marigot",
			"America/Santo_Domingo|America/Martinique",
			"America/Santo_Domingo|America/Montserrat",
			"America/Santo_Domingo|America/Port_of_Spain",
			"America/Santo_Domingo|America/Puerto_Rico",
			"America/Santo_Domingo|America/St_Barthelemy",
			"America/Santo_Domingo|America/St_Kitts",
			"America/Santo_Domingo|America/St_Lucia",
			"America/Santo_Domingo|America/St_Thomas",
			"America/Santo_Domingo|America/St_Vincent",
			"America/Santo_Domingo|America/Tortola",
			"America/Santo_Domingo|America/Virgin",
			"America/Sao_Paulo|Brazil/East",
			"America/St_Johns|Canada/Newfoundland",
			"Antarctica/Palmer|America/Punta_Arenas",
			"Asia/Baghdad|Antarctica/Syowa",
			"Asia/Baghdad|Asia/Aden",
			"Asia/Baghdad|Asia/Bahrain",
			"Asia/Baghdad|Asia/Kuwait",
			"Asia/Baghdad|Asia/Qatar",
			"Asia/Baghdad|Asia/Riyadh",
			"Asia/Baghdad|Etc/GMT-3",
			"Asia/Baghdad|Europe/Minsk",
			"Asia/Bangkok|Antarctica/Davis",
			"Asia/Bangkok|Asia/Ho_Chi_Minh",
			"Asia/Bangkok|Asia/Novokuznetsk",
			"Asia/Bangkok|Asia/Phnom_Penh",
			"Asia/Bangkok|Asia/Saigon",
			"Asia/Bangkok|Asia/Vientiane",
			"Asia/Bangkok|Etc/GMT-7",
			"Asia/Bangkok|Indian/Christmas",
			"Asia/Dhaka|Antarctica/Vostok",
			"Asia/Dhaka|Asia/Almaty",
			"Asia/Dhaka|Asia/Bishkek",
			"Asia/Dhaka|Asia/Dacca",
			"Asia/Dhaka|Asia/Kashgar",
			"Asia/Dhaka|Asia/Qostanay",
			"Asia/Dhaka|Asia/Thimbu",
			"Asia/Dhaka|Asia/Thimphu",
			"Asia/Dhaka|Asia/Urumqi",
			"Asia/Dhaka|Etc/GMT-6",
			"Asia/Dhaka|Indian/Chagos",
			"Asia/Dili|Etc/GMT-9",
			"Asia/Dili|Pacific/Palau",
			"Asia/Dubai|Asia/Muscat",
			"Asia/Dubai|Asia/Tbilisi",
			"Asia/Dubai|Asia/Yerevan",
			"Asia/Dubai|Etc/GMT-4",
			"Asia/Dubai|Europe/Samara",
			"Asia/Dubai|Indian/Mahe",
			"Asia/Dubai|Indian/Mauritius",
			"Asia/Dubai|Indian/Reunion",
			"Asia/Gaza|Asia/Hebron",
			"Asia/Hong_Kong|Hongkong",
			"Asia/Jakarta|Asia/Pontianak",
			"Asia/Jerusalem|Asia/Tel_Aviv",
			"Asia/Jerusalem|Israel",
			"Asia/Kamchatka|Asia/Anadyr",
			"Asia/Kamchatka|Etc/GMT-12",
			"Asia/Kamchatka|Kwajalein",
			"Asia/Kamchatka|Pacific/Funafuti",
			"Asia/Kamchatka|Pacific/Kwajalein",
			"Asia/Kamchatka|Pacific/Majuro",
			"Asia/Kamchatka|Pacific/Nauru",
			"Asia/Kamchatka|Pacific/Tarawa",
			"Asia/Kamchatka|Pacific/Wake",
			"Asia/Kamchatka|Pacific/Wallis",
			"Asia/Kathmandu|Asia/Katmandu",
			"Asia/Kolkata|Asia/Calcutta",
			"Asia/Kuala_Lumpur|Asia/Brunei",
			"Asia/Kuala_Lumpur|Asia/Kuching",
			"Asia/Kuala_Lumpur|Asia/Singapore",
			"Asia/Kuala_Lumpur|Etc/GMT-8",
			"Asia/Kuala_Lumpur|Singapore",
			"Asia/Makassar|Asia/Ujung_Pandang",
			"Asia/Rangoon|Asia/Yangon",
			"Asia/Rangoon|Indian/Cocos",
			"Asia/Seoul|ROK",
			"Asia/Shanghai|Asia/Chongqing",
			"Asia/Shanghai|Asia/Chungking",
			"Asia/Shanghai|Asia/Harbin",
			"Asia/Shanghai|Asia/Macao",
			"Asia/Shanghai|Asia/Macau",
			"Asia/Shanghai|Asia/Taipei",
			"Asia/Shanghai|PRC",
			"Asia/Shanghai|ROC",
			"Asia/Tashkent|Antarctica/Mawson",
			"Asia/Tashkent|Asia/Aqtau",
			"Asia/Tashkent|Asia/Aqtobe",
			"Asia/Tashkent|Asia/Ashgabat",
			"Asia/Tashkent|Asia/Ashkhabad",
			"Asia/Tashkent|Asia/Atyrau",
			"Asia/Tashkent|Asia/Dushanbe",
			"Asia/Tashkent|Asia/Oral",
			"Asia/Tashkent|Asia/Samarkand",
			"Asia/Tashkent|Etc/GMT-5",
			"Asia/Tashkent|Indian/Kerguelen",
			"Asia/Tashkent|Indian/Maldives",
			"Asia/Tehran|Iran",
			"Asia/Tokyo|Japan",
			"Asia/Ulaanbaatar|Asia/Choibalsan",
			"Asia/Ulaanbaatar|Asia/Ulan_Bator",
			"Asia/Vladivostok|Asia/Ust-Nera",
			"Asia/Yakutsk|Asia/Khandyga",
			"Atlantic/Azores|America/Scoresbysund",
			"Atlantic/Cape_Verde|Etc/GMT+1",
			"Australia/Adelaide|Australia/Broken_Hill",
			"Australia/Adelaide|Australia/South",
			"Australia/Adelaide|Australia/Yancowinna",
			"Australia/Brisbane|Australia/Lindeman",
			"Australia/Brisbane|Australia/Queensland",
			"Australia/Darwin|Australia/North",
			"Australia/Lord_Howe|Australia/LHI",
			"Australia/Perth|Australia/West",
			"Australia/Sydney|Australia/ACT",
			"Australia/Sydney|Australia/Canberra",
			"Australia/Sydney|Australia/Currie",
			"Australia/Sydney|Australia/Hobart",
			"Australia/Sydney|Australia/Melbourne",
			"Australia/Sydney|Australia/NSW",
			"Australia/Sydney|Australia/Tasmania",
			"Australia/Sydney|Australia/Victoria",
			"Etc/UTC|Etc/UCT",
			"Etc/UTC|Etc/Universal",
			"Etc/UTC|Etc/Zulu",
			"Etc/UTC|UCT",
			"Etc/UTC|UTC",
			"Etc/UTC|Universal",
			"Etc/UTC|Zulu",
			"Europe/Athens|Asia/Nicosia",
			"Europe/Athens|EET",
			"Europe/Athens|Europe/Bucharest",
			"Europe/Athens|Europe/Helsinki",
			"Europe/Athens|Europe/Kiev",
			"Europe/Athens|Europe/Mariehamn",
			"Europe/Athens|Europe/Nicosia",
			"Europe/Athens|Europe/Riga",
			"Europe/Athens|Europe/Sofia",
			"Europe/Athens|Europe/Tallinn",
			"Europe/Athens|Europe/Uzhgorod",
			"Europe/Athens|Europe/Vilnius",
			"Europe/Athens|Europe/Zaporozhye",
			"Europe/Chisinau|Europe/Tiraspol",
			"Europe/Dublin|Eire",
			"Europe/Istanbul|Asia/Istanbul",
			"Europe/Istanbul|Turkey",
			"Europe/Lisbon|Atlantic/Canary",
			"Europe/Lisbon|Atlantic/Faeroe",
			"Europe/Lisbon|Atlantic/Faroe",
			"Europe/Lisbon|Atlantic/Madeira",
			"Europe/Lisbon|Portugal",
			"Europe/Lisbon|WET",
			"Europe/London|Europe/Belfast",
			"Europe/London|Europe/Guernsey",
			"Europe/London|Europe/Isle_of_Man",
			"Europe/London|Europe/Jersey",
			"Europe/London|GB",
			"Europe/London|GB-Eire",
			"Europe/Moscow|W-SU",
			"Europe/Paris|Africa/Ceuta",
			"Europe/Paris|Arctic/Longyearbyen",
			"Europe/Paris|Atlantic/Jan_Mayen",
			"Europe/Paris|CET",
			"Europe/Paris|Europe/Amsterdam",
			"Europe/Paris|Europe/Andorra",
			"Europe/Paris|Europe/Belgrade",
			"Europe/Paris|Europe/Berlin",
			"Europe/Paris|Europe/Bratislava",
			"Europe/Paris|Europe/Brussels",
			"Europe/Paris|Europe/Budapest",
			"Europe/Paris|Europe/Busingen",
			"Europe/Paris|Europe/Copenhagen",
			"Europe/Paris|Europe/Gibraltar",
			"Europe/Paris|Europe/Ljubljana",
			"Europe/Paris|Europe/Luxembourg",
			"Europe/Paris|Europe/Madrid",
			"Europe/Paris|Europe/Malta",
			"Europe/Paris|Europe/Monaco",
			"Europe/Paris|Europe/Oslo",
			"Europe/Paris|Europe/Podgorica",
			"Europe/Paris|Europe/Prague",
			"Europe/Paris|Europe/Rome",
			"Europe/Paris|Europe/San_Marino",
			"Europe/Paris|Europe/Sarajevo",
			"Europe/Paris|Europe/Skopje",
			"Europe/Paris|Europe/Stockholm",
			"Europe/Paris|Europe/Tirane",
			"Europe/Paris|Europe/Vaduz",
			"Europe/Paris|Europe/Vatican",
			"Europe/Paris|Europe/Vienna",
			"Europe/Paris|Europe/Warsaw",
			"Europe/Paris|Europe/Zagreb",
			"Europe/Paris|Europe/Zurich",
			"Europe/Paris|Poland",
			"Europe/Ulyanovsk|Europe/Astrakhan",
			"Pacific/Auckland|Antarctica/McMurdo",
			"Pacific/Auckland|Antarctica/South_Pole",
			"Pacific/Auckland|NZ",
			"Pacific/Chatham|NZ-CHAT",
			"Pacific/Easter|Chile/EasterIsland",
			"Pacific/Fakaofo|Etc/GMT-13",
			"Pacific/Fakaofo|Pacific/Enderbury",
			"Pacific/Galapagos|Etc/GMT+6",
			"Pacific/Gambier|Etc/GMT+9",
			"Pacific/Guadalcanal|Antarctica/Macquarie",
			"Pacific/Guadalcanal|Etc/GMT-11",
			"Pacific/Guadalcanal|Pacific/Efate",
			"Pacific/Guadalcanal|Pacific/Kosrae",
			"Pacific/Guadalcanal|Pacific/Noumea",
			"Pacific/Guadalcanal|Pacific/Pohnpei",
			"Pacific/Guadalcanal|Pacific/Ponape",
			"Pacific/Guam|Pacific/Saipan",
			"Pacific/Honolulu|HST",
			"Pacific/Honolulu|Pacific/Johnston",
			"Pacific/Honolulu|US/Hawaii",
			"Pacific/Kiritimati|Etc/GMT-14",
			"Pacific/Niue|Etc/GMT+11",
			"Pacific/Pago_Pago|Pacific/Midway",
			"Pacific/Pago_Pago|Pacific/Samoa",
			"Pacific/Pago_Pago|US/Samoa",
			"Pacific/Pitcairn|Etc/GMT+8",
			"Pacific/Port_Moresby|Antarctica/DumontDUrville",
			"Pacific/Port_Moresby|Etc/GMT-10",
			"Pacific/Port_Moresby|Pacific/Chuuk",
			"Pacific/Port_Moresby|Pacific/Truk",
			"Pacific/Port_Moresby|Pacific/Yap",
			"Pacific/Tahiti|Etc/GMT+10",
			"Pacific/Tahiti|Pacific/Rarotonga"
		]
	});


	return moment;
}));
//! moment.js locale configuration

;(function (global, factory) {
   typeof exports === 'object' && typeof module !== 'undefined'
       && typeof require === 'function' ? factory(require('../moment')) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var units = {
        'ss' : 'sekundÄ_sekundÅ¾iÅ³_sekundes',
        'm' : 'minutÄ_minutÄs_minutÄ',
        'mm': 'minutÄs_minuÄiÅ³_minutes',
        'h' : 'valanda_valandos_valandÄ',
        'hh': 'valandos_valandÅ³_valandas',
        'd' : 'diena_dienos_dienÄ',
        'dd': 'dienos_dienÅ³_dienas',
        'M' : 'mÄnuo_mÄnesio_mÄnesÄ¯',
        'MM': 'mÄnesiai_mÄnesiÅ³_mÄnesius',
        'y' : 'metai_metÅ³_metus',
        'yy': 'metai_metÅ³_metus'
    };
    function translateSeconds(number, withoutSuffix, key, isFuture) {
        if (withoutSuffix) {
            return 'kelios sekundÄs';
        } else {
            return isFuture ? 'keliÅ³ sekundÅ¾iÅ³' : 'kelias sekundes';
        }
    }
    function translateSingular(number, withoutSuffix, key, isFuture) {
        return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
    }
    function special(number) {
        return number % 10 === 0 || (number > 10 && number < 20);
    }
    function forms(key) {
        return units[key].split('_');
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        if (number === 1) {
            return result + translateSingular(number, withoutSuffix, key[0], isFuture);
        } else if (withoutSuffix) {
            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
        } else {
            if (isFuture) {
                return result + forms(key)[1];
            } else {
                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
            }
        }
    }
    var lt = moment.defineLocale('lt', {
        months : {
            format: 'sausio_vasario_kovo_balandÅ¾io_geguÅ¾Äs_birÅ¾elio_liepos_rugpjÅ«Äio_rugsÄjo_spalio_lapkriÄio_gruodÅ¾io'.split('_'),
            standalone: 'sausis_vasaris_kovas_balandis_geguÅ¾Ä_birÅ¾elis_liepa_rugpjÅ«tis_rugsÄjis_spalis_lapkritis_gruodis'.split('_'),
            isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/
        },
        monthsShort : 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
        weekdays : {
            format: 'sekmadienÄ¯_pirmadienÄ¯_antradienÄ¯_treÄiadienÄ¯_ketvirtadienÄ¯_penktadienÄ¯_Å¡eÅ¡tadienÄ¯'.split('_'),
            standalone: 'sekmadienis_pirmadienis_antradienis_treÄiadienis_ketvirtadienis_penktadienis_Å¡eÅ¡tadienis'.split('_'),
            isFormat: /dddd HH:mm/
        },
        weekdaysShort : 'Sek_Pir_Ant_Tre_Ket_Pen_Å eÅ¡'.split('_'),
        weekdaysMin : 'S_P_A_T_K_Pn_Å '.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY-MM-DD',
            LL : 'YYYY [m.] MMMM D [d.]',
            LLL : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            LLLL : 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
            l : 'YYYY-MM-DD',
            ll : 'YYYY [m.] MMMM D [d.]',
            lll : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            llll : 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
        },
        calendar : {
            sameDay : '[Å iandien] LT',
            nextDay : '[Rytoj] LT',
            nextWeek : 'dddd LT',
            lastDay : '[Vakar] LT',
            lastWeek : '[PraÄjusÄ¯] dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'po %s',
            past : 'prieÅ¡ %s',
            s : translateSeconds,
            ss : translate,
            m : translateSingular,
            mm : translate,
            h : translateSingular,
            hh : translate,
            d : translateSingular,
            dd : translate,
            M : translateSingular,
            MM : translate,
            y : translateSingular,
            yy : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}-oji/,
        ordinal : function (number) {
            return number + '-oji';
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return lt;

})));

moment.fn.shortDateNoYear = function(){ return this.format('D MMM'); };
moment.fn.shortDate = function(){ return this.format('D MMM YYYY'); };
moment.fn.longDate = function(){ return this.format('D MMMM YYYY LT'); };
moment.fn.relativeAge = function(opts){ return Discourse.Formatter.relativeAge(this.toDate(), opts)};
